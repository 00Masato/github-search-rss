{
    "version": "https://jsonfeed.org/version/1",
    "title": "rust-lang/rfcs pr",
    "home_page_url": "https://00masato.github.io/github-search-rss/rust-rfc.json",
    "feed_url": "https://00masato.github.io/github-search-rss/rust-rfc.json",
    "description": "rust-lang/rfcs pr on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/145740?u=c075676a94db020428cf67bc832a006f1f9d8410&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This PR suggests small changes to the existing unstable \"aribtrary self types\" feature to make it more flexible. In particular, it suggests driving this feature from a new (ish) <code class=\"notranslate\">Receiver</code> trait instead of from <code class=\"notranslate\">Deref</code>, but to maintain compatibility by having a blanket implementation for all <code class=\"notranslate\">Deref</code> types.</p>\n<p dir=\"auto\">This is a squashed commit of many edits by various folks including <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Urhengulas/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Urhengulas\">@Urhengulas</a>, <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Veykril/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Veykril\">@Veykril</a> , <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/madsmtm/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/madsmtm\">@madsmtm</a> and myself. Thanks also to <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/davidhewitt/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/davidhewitt\">@davidhewitt</a>, <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Manishearth/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Manishearth\">@Manishearth</a> and many folks over on Zulip for feedback.</p>\n<p dir=\"auto\"><a href=\"https://github.com/adetaylor/rfcs/blob/arbitrary-self-types-v2/text/3519-arbitrary-self-types-v2.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3519",
            "title": "Arbitrary self types v2.",
            "date_modified": "2023-11-04T08:47:55.000Z",
            "date_published": "2023-11-01T18:11:19.000Z",
            "author": {
                "name": "adetaylor",
                "url": "https://github.com/adetaylor"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/15850505?u=064c10efd2d57ae0bb9d53c6d97ea0a8e550c2a6&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Adds a special attribute <code class=\"notranslate\">#[should_move]</code> that can be applied to function arguments which implement <code class=\"notranslate\">Copy</code>. This allows \"opting into\" move semantics for types that implement <code class=\"notranslate\">Copy</code> to avoid mistakes.</p>\n<p dir=\"auto\">This is marked as an \"experimental\" RFC since the end goal of this feature, allowing API authors to implement <code class=\"notranslate\">Copy</code> without fear of causing bugs, may not actually be achieved by the feature as described alone. A follow-up RFC will likely be written for the final version of this attribute if it ends up being substantially different than the one described.</p>\n<p dir=\"auto\">A good benchmark for when this feature is good enough is being able to implement <code class=\"notranslate\">Copy</code> for standard library iterators (like the <code class=\"notranslate\">Range</code> types) and to retire the <code class=\"notranslate\">clippy::copy_iterator</code> lint for good.</p>\n<p dir=\"auto\"><a href=\"https://github.com/clarfonthey/rust-rfcs/blob/pls-no-copy/text/0000-pls-no-copy.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3518",
            "title": "eRFC: `#[should_move]` attribute for per-function opting out of `Copy` semantics",
            "date_modified": "2023-10-29T18:15:04.000Z",
            "date_published": "2023-10-21T19:05:37.000Z",
            "author": {
                "name": "clarfonthey",
                "url": "https://github.com/clarfonthey"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/60961?u=967a9ccc3f7dba0d5d3acd694e3cf81893defe96&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"222328882\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/1977\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/1977/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/1977\">#1977</a> has languished for 6 years, mostly due to the cargo resolver design section.</p>\n<p dir=\"auto\">This updates the RFC by</p>\n<ul dir=\"auto\">\n<li>Removing non-essential parts, particularly minimal-version resolution and pub-aware version resolution</li>\n<li>Updating the template</li>\n<li>Taking into account new designs that impact it (<code class=\"notranslate\">cfg</code> dependencies, workspace inheritance, renamed dependencies, etc)</li>\n<li>Updates the rustc design for how it evolved in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"258341882\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rust/issues/44663\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/44663/hovercard\" href=\"https://github.com/rust-lang/rust/issues/44663\">rust-lang/rust#44663</a></li>\n<li>Fully specifies cargo's behavior</li>\n</ul>\n<p dir=\"auto\">Pub-aware version resolution was such a large part of the previous RFC, that we felt this needed the wider input of an RFC, rather than addressing these in stabilization FCP.</p>\n<p dir=\"auto\"><a href=\"https://github.com/epage/rfcs/blob/pub/text/3516-public-private-dependencies.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3516",
            "title": "RFC: Superseding public/private dependencies",
            "date_modified": "2023-11-01T14:29:31.000Z",
            "date_published": "2023-10-16T19:01:46.000Z",
            "author": {
                "name": "epage",
                "url": "https://github.com/epage"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/330628?u=562ead6e5c8da9a02015f73a9aefdb6c82d4e2cf&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Rust's floating point operations follow IEEE 754-2008 -- with some caveats around operations producing NaNs: IEEE makes almost no guarantees about the sign and payload bits of the NaN; however, actual hardware does not pick those bits completely arbitrarily, and Rust will expose some of those hardware-provided guarantees to programmers.<br>\nOn the flip side, NaN generation is non-deterministic: running the same operation on the same inputs several times can produce different results.<br>\nAnd there is a caveat: while IEEE specifies that float operations can never output a signaling NaN, Rust float operations <em>can</em> produce signaling NaNs, <em>but only if</em> an input is signaling.<br>\nThat means the only way to ever see a signaling NaN in a program is to create one with <code class=\"notranslate\">from_bits</code> (or equivalent unsafe operations).</p>\n<p dir=\"auto\">Floating-point operations at compile-time follow the same specification. In particular, since operations are non-deterministic, the same operation can lead to different bit-patterns when executed at compile-time (in a <code class=\"notranslate\">const</code> context) vs at run-time.</p>\n<p dir=\"auto\"><a href=\"https://github.com/RalfJung/rfcs/blob/float-semantics/text/0000-float-semantics.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3514",
            "title": "add float semantics RFC",
            "date_modified": "2023-11-04T19:15:50.000Z",
            "date_published": "2023-10-14T07:52:34.000Z",
            "author": {
                "name": "RalfJung",
                "url": "https://github.com/RalfJung"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/332036?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/oli-obk/rfcs/blob/iter_fn/text/0000-gen-fn.md\">Rendered</a></p>\n<p dir=\"auto\">Allow implementing <code class=\"notranslate\">Iterator</code>s similarly to how we can use <code class=\"notranslate\">async</code> blocks to implement <code class=\"notranslate\">Future</code>s.</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// `Iterator` methods\nfn odd_dup(values: impl Iterator&lt;Item = u32&gt;) -&gt; impl Iterator&lt;Item = u32&gt; {\n    values.filter(|value| value.is_odd()).map(|value| value * 2)\n}\n\n// `struct` and manual `impl`\nfn odd_dup(values: impl Iterator&lt;Item = u32&gt;) -&gt; impl Iterator&lt;Item = u32&gt; {\n    struct Foo&lt;T&gt;(T);\n    impl&lt;T: Iterator&lt;Item = u32&gt;&gt; Iterator&lt;Item = u32&gt; for Foo&lt;T&gt; {\n        type Item = u32;\n        fn next(&amp;mut self) -&gt; Option&lt;u32&gt; {\n            loop {\n                let value = self.0.next()?;\n                if value.is_odd() {\n                    return Some(x * 2)\n                }\n            }\n        }\n    }\n    Foo(values)\n}\n\n// `gen block`\nfn odd_dup(values: impl Iterator&lt;Item = u32&gt;) -&gt; impl Iterator&lt;Item = u32&gt; {\n    #[rustc_gen] {\n        for value in values {\n            if value.is_odd() {\n                yield value * 2;\n            }\n        }\n    }\n}\n\n// `gen fn`\n#[rustc_gen]\nfn odd_dup(values: impl Iterator&lt;Item = u32&gt;) -&gt; u32 {\n    for value in values {\n        if value.is_odd() {\n            yield value * 2;\n        }\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-c\">// `Iterator` methods</span>\n<span class=\"pl-k\">fn</span> <span class=\"pl-en\">odd_dup</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">values</span><span class=\"pl-kos\">:</span> <span class=\"pl-k\">impl</span> <span class=\"pl-smi\">Iterator</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">Item</span> = <span class=\"pl-smi\">u32</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-k\">impl</span> <span class=\"pl-smi\">Iterator</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">Item</span> = <span class=\"pl-smi\">u32</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-kos\">{</span>\n    values<span class=\"pl-kos\">.</span><span class=\"pl-en\">filter</span><span class=\"pl-kos\">(</span>|value| value<span class=\"pl-kos\">.</span><span class=\"pl-en\">is_odd</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">map</span><span class=\"pl-kos\">(</span>|value| value <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// `struct` and manual `impl`</span>\n<span class=\"pl-k\">fn</span> <span class=\"pl-en\">odd_dup</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">values</span><span class=\"pl-kos\">:</span> <span class=\"pl-k\">impl</span> <span class=\"pl-smi\">Iterator</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">Item</span> = <span class=\"pl-smi\">u32</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-k\">impl</span> <span class=\"pl-smi\">Iterator</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">Item</span> = <span class=\"pl-smi\">u32</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">struct</span> <span class=\"pl-smi\">Foo</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">T</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">T</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">impl</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">T</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">Iterator</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">Item</span> = <span class=\"pl-smi\">u32</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-smi\">Iterator</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">Item</span> = <span class=\"pl-smi\">u32</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-k\">for</span> <span class=\"pl-smi\">Foo</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">T</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">type</span> <span class=\"pl-smi\">Item</span> = <span class=\"pl-smi\">u32</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-k\">fn</span> <span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span><span class=\"pl-k\">mut</span> <span class=\"pl-smi\">self</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">Option</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">u32</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-k\">loop</span> <span class=\"pl-kos\">{</span>\n                <span class=\"pl-k\">let</span> value = <span class=\"pl-smi\">self</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">0</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">next</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>?<span class=\"pl-kos\">;</span>\n                <span class=\"pl-k\">if</span> value<span class=\"pl-kos\">.</span><span class=\"pl-en\">is_odd</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n                    <span class=\"pl-k\">return</span> <span class=\"pl-v\">Some</span><span class=\"pl-kos\">(</span>x <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span>\n                <span class=\"pl-kos\">}</span>\n            <span class=\"pl-kos\">}</span>\n        <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-v\">Foo</span><span class=\"pl-kos\">(</span>values<span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// `gen block`</span>\n<span class=\"pl-k\">fn</span> <span class=\"pl-en\">odd_dup</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">values</span><span class=\"pl-kos\">:</span> <span class=\"pl-k\">impl</span> <span class=\"pl-smi\">Iterator</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">Item</span> = <span class=\"pl-smi\">u32</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-k\">impl</span> <span class=\"pl-smi\">Iterator</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">Item</span> = <span class=\"pl-smi\">u32</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>rustc_gen<span class=\"pl-kos\">]</span></span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">for</span> value <span class=\"pl-k\">in</span> values <span class=\"pl-kos\">{</span>\n            <span class=\"pl-k\">if</span> value<span class=\"pl-kos\">.</span><span class=\"pl-en\">is_odd</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n                yield value <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">;</span>\n            <span class=\"pl-kos\">}</span>\n        <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// `gen fn`</span>\n<span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>rustc_gen<span class=\"pl-kos\">]</span></span>\n<span class=\"pl-k\">fn</span> <span class=\"pl-en\">odd_dup</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">values</span><span class=\"pl-kos\">:</span> <span class=\"pl-k\">impl</span> <span class=\"pl-smi\">Iterator</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">Item</span> = <span class=\"pl-smi\">u32</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">u32</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">for</span> value <span class=\"pl-k\">in</span> values <span class=\"pl-kos\">{</span>\n        <span class=\"pl-k\">if</span> value<span class=\"pl-kos\">.</span><span class=\"pl-en\">is_odd</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n            yield value <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\"><a href=\"https://github.com/rust-lang/rust/pull/116447\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rust/pull/116447/hovercard\">PR reserving the keyword</a></p>\n<p dir=\"auto\">I would like to avoid discussing the exact details of the experimental implementation proposal in this RFC and instead discuss that during the implementation. Similarly I would like to avoid any syntax discussion beyond what is needed to determine \"which keyword?\" or \"do we need a keyword at all?\".</p>\n<p dir=\"auto\">If this RFC is accepted I expect to be able to work on an initial implementation in January</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3513",
            "title": "Reserve `gen` keyword in 2024 edition for `Iterator` generators ",
            "date_modified": "2023-10-28T10:20:46.000Z",
            "date_published": "2023-10-13T16:06:35.000Z",
            "author": {
                "name": "oli-obk",
                "url": "https://github.com/oli-obk"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19623715?u=8fc1200ecfbd85a03c59f998f50ee2822ee45e20&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">As per discussion in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"315709580\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/2407\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rfcs/issues/2407/hovercard\" href=\"https://github.com/rust-lang/rfcs/issues/2407\">#2407</a>, adds the <code class=\"notranslate\">move(y=f(x)) || {}</code>/<code class=\"notranslate\">move(x) || {}</code> syntax.</p>\n<p dir=\"auto\"><a href=\"https://github.com/SOF3/rfcs/blob/closure-move-bindings/text/3512-closure-move-bindings.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3512",
            "title": "Add closure-move-bindings RFC",
            "date_modified": "2023-10-19T17:45:16.000Z",
            "date_published": "2023-10-10T15:02:14.000Z",
            "author": {
                "name": "SOF3",
                "url": "https://github.com/SOF3"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/2467194?u=300b3913e0e77f925f7116f4830098725a03629f&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h2 dir=\"auto\">Summary</h2>\n<p dir=\"auto\">This RFC describes the inclusion of the <code class=\"notranslate\">Future</code> and <code class=\"notranslate\">IntoFuture</code> traits in  the 2024 edition prelude.</p>\n<p dir=\"auto\"><a href=\"https://github.com/yoshuawuyts/rfcs/blob/prelude-2024-future/0000-prelude-2024-future.md\">Rendered</a></p>\n<hr>\n<p dir=\"auto\">This is a continuation of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1638077837\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/wg-async/issues/310\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/wg-async/issues/310/hovercard\" href=\"https://github.com/rust-lang/wg-async/issues/310\">rust-lang/wg-async#310</a>. It depends on <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1914123291\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3501\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3501/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3501\">#3501</a> being accepted first.</p>\n<p dir=\"auto\">cc/ @rust-lang/wg-async @rust-lang/libs-api</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3509",
            "title": "RFC: Include `Future` and `IntoFuture` in the 2024 prelude",
            "date_modified": "2023-10-26T17:52:42.000Z",
            "date_published": "2023-10-07T12:17:13.000Z",
            "author": {
                "name": "yoshuawuyts",
                "url": "https://github.com/yoshuawuyts"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/28781354?u=2a9bab4b2219431526d70e5ed6444e72512206cd&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/aDotInTheVoid/rfcs/blob/rustdoc-types-maintainers/text/0000-rustdoc-types-maintainers.md\">Rendered</a></p>\n<p dir=\"auto\">CC @rust-lang/rustdoc @rust-lang/infra</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3505",
            "title": "Move `rustdoc-types` crate to T-Rustdoc ownership.",
            "date_modified": "2023-10-17T11:49:55.000Z",
            "date_published": "2023-10-03T10:27:17.000Z",
            "author": {
                "name": "aDotInTheVoid",
                "url": "https://github.com/aDotInTheVoid"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/60961?u=967a9ccc3f7dba0d5d3acd694e3cf81893defe96&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/epage/rfcs/blob/frontmatter/text/3503-frontmatter.md\">Rendered</a></p>\n<p dir=\"auto\">This is for the T-lang side of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1914174424\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3502\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3502/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3502\">#3502</a></p>\n<p dir=\"auto\">Example:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"#!/usr/bin/env cargo\n```cargo\n[dependencies]\nclap = { version = &quot;4.2&quot;, features = [&quot;derive&quot;] }\n```\n\nuse clap::Parser;\n\n#[derive(Parser, Debug)]\n#[clap(version)]\nstruct Args {\n    #[clap(short, long, help = &quot;Path to config&quot;)]\n    config: Option&lt;std::path::PathBuf&gt;,\n}\n\nfn main() {\n    let args = Args::parse();\n    println!(&quot;{:?}&quot;, args);\n}\"><pre class=\"notranslate\">#!/usr/bin/env cargo\n```cargo\n<span class=\"pl-kos\">[</span>dependencies<span class=\"pl-kos\">]</span>\nclap = <span class=\"pl-kos\">{</span> version = <span class=\"pl-s\">\"4.2\"</span><span class=\"pl-kos\">,</span> features = <span class=\"pl-kos\">[</span><span class=\"pl-s\">\"derive\"</span><span class=\"pl-kos\">]</span> <span class=\"pl-kos\">}</span>\n```\n\n<span class=\"pl-k\">use</span> clap<span class=\"pl-kos\">::</span><span class=\"pl-v\">Parser</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>derive<span class=\"pl-kos\">(</span><span class=\"pl-v\">Parser</span><span class=\"pl-kos\">,</span> <span class=\"pl-v\">Debug</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n<span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>clap<span class=\"pl-kos\">(</span>version<span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n<span class=\"pl-k\">struct</span> <span class=\"pl-smi\">Args</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>clap<span class=\"pl-kos\">(</span>short, long, help = <span class=\"pl-s\">\"Path to config\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n    <span class=\"pl-c1\">config</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">Option</span><span class=\"pl-kos\">&lt;</span>std<span class=\"pl-kos\">::</span>path<span class=\"pl-kos\">::</span><span class=\"pl-smi\">PathBuf</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">fn</span> <span class=\"pl-en\">main</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">let</span> args = <span class=\"pl-smi\">Args</span><span class=\"pl-kos\">::</span><span class=\"pl-en\">parse</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-en\">println</span><span class=\"pl-en\">!</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"{:?}\"</span>, args<span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>",
            "url": "https://github.com/rust-lang/rfcs/pull/3503",
            "title": "RFC: Syntax for embedding cargo-script manifests",
            "date_modified": "2023-11-02T00:47:11.000Z",
            "date_published": "2023-09-26T19:40:34.000Z",
            "author": {
                "name": "epage",
                "url": "https://github.com/epage"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/60961?u=967a9ccc3f7dba0d5d3acd694e3cf81893defe96&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/epage/rfcs/blob/script/text/3502-cargo-script.md\">Rendered</a></p>\n<p dir=\"auto\">eRFC <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1685766391\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3424\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3424/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3424\">#3424</a> was previously approved without any direction on syntax or behavior having been decided.  This RFC is to finalize the decisions made through the implementation to prepare the way for stabilization as we work through the remaining tasks in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1733342552\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/cargo/issues/12207\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/cargo/issues/12207/hovercard\" href=\"https://github.com/rust-lang/cargo/issues/12207\">rust-lang/cargo#12207</a></p>\n<p dir=\"auto\"><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1914182358\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3503\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3503/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3503\">#3503</a> covers the T-lang side of this conversation</p>\n<p dir=\"auto\">Example:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"#!/usr/bin/env cargo\n```cargo\n[dependencies]\nclap = { version = &quot;4.2&quot;, features = [&quot;derive&quot;] }\n```\n\nuse clap::Parser;\n\n#[derive(Parser, Debug)]\n#[clap(version)]\nstruct Args {\n    #[clap(short, long, help = &quot;Path to config&quot;)]\n    config: Option&lt;std::path::PathBuf&gt;,\n}\n\nfn main() {\n    let args = Args::parse();\n    println!(&quot;{:?}&quot;, args);\n}\"><pre class=\"notranslate\">#!/usr/bin/env cargo\n```cargo\n<span class=\"pl-kos\">[</span>dependencies<span class=\"pl-kos\">]</span>\nclap = <span class=\"pl-kos\">{</span> version = <span class=\"pl-s\">\"4.2\"</span><span class=\"pl-kos\">,</span> features = <span class=\"pl-kos\">[</span><span class=\"pl-s\">\"derive\"</span><span class=\"pl-kos\">]</span> <span class=\"pl-kos\">}</span>\n```\n\n<span class=\"pl-k\">use</span> clap<span class=\"pl-kos\">::</span><span class=\"pl-v\">Parser</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>derive<span class=\"pl-kos\">(</span><span class=\"pl-v\">Parser</span><span class=\"pl-kos\">,</span> <span class=\"pl-v\">Debug</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n<span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>clap<span class=\"pl-kos\">(</span>version<span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n<span class=\"pl-k\">struct</span> <span class=\"pl-smi\">Args</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>clap<span class=\"pl-kos\">(</span>short, long, help = <span class=\"pl-s\">\"Path to config\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n    <span class=\"pl-c1\">config</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">Option</span><span class=\"pl-kos\">&lt;</span>std<span class=\"pl-kos\">::</span>path<span class=\"pl-kos\">::</span><span class=\"pl-smi\">PathBuf</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">fn</span> <span class=\"pl-en\">main</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">let</span> args = <span class=\"pl-smi\">Args</span><span class=\"pl-kos\">::</span><span class=\"pl-en\">parse</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-en\">println</span><span class=\"pl-en\">!</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"{:?}\"</span>, args<span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<div class=\"highlight highlight-text-shell-session notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ ./prog --config file.toml\nArgs { config: Some(&quot;file.toml&quot;) }\"><pre class=\"notranslate\">$ <span class=\"pl-s1\">./prog --config file.toml</span>\n<span class=\"pl-c1\">Args { config: Some(\"file.toml\") }</span></pre></div>\n<p dir=\"auto\">Note: most of this is available behind <a href=\"https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#script\" rel=\"nofollow\"><code class=\"notranslate\">-Zscript</code></a> (see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1733342552\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/cargo/issues/12207\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/cargo/issues/12207/hovercard\" href=\"https://github.com/rust-lang/cargo/issues/12207\">rust-lang/cargo#12207</a> for limitations).  Support for the code-fence frontmatter was added in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1899598522\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/cargo/issues/12681\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/cargo/pull/12681/hovercard\" href=\"https://github.com/rust-lang/cargo/pull/12681\">rust-lang/cargo#12681</a> and it may be a couple of days before cargo's submodule in rust-lang/rust gets updated and built into a nightly.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3502",
            "title": "RFC: cargo-script",
            "date_modified": "2023-11-02T19:36:17.000Z",
            "date_published": "2023-09-26T19:34:49.000Z",
            "author": {
                "name": "epage",
                "url": "https://github.com/epage"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1076834?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">In Rust 2024 and later editions, return position <code class=\"notranslate\">impl Trait</code> (RPIT) opaque types will automatically capture all in-scope type <em>and</em> lifetime parameters.  In preparation for this, new RPIT-like <code class=\"notranslate\">impl Trait</code> features introduced into the Rust 2021 edition will also automatically capture all in-scope type and lifetime parameters.</p>\n<p dir=\"auto\"><a href=\"https://github.com/traviscross/rfcs/blob/TC/lifetime-capture-rules-2024/text/3498-lifetime-capture-rules-2024.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3498",
            "title": "Lifetime Capture Rules 2024",
            "date_modified": "2023-11-04T19:59:45.000Z",
            "date_published": "2023-09-25T07:06:08.000Z",
            "author": {
                "name": "traviscross",
                "url": "https://github.com/traviscross"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/8074468?u=3f93edb8a0cb1046224faa47b587bc0e89ae266d&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/eopb/rfcs/blob/precise-pre-release-cargo-update/text/3493-precise-pre-release-cargo-update.md\">Rendered</a></p>\n<p dir=\"auto\">This RFC proposes extending <code class=\"notranslate\">cargo update</code> to allow updates to pre-release versions when requested with <code class=\"notranslate\">--precise</code>. For example, a <code class=\"notranslate\">cargo</code> user would be able to call <code class=\"notranslate\">cargo update -p dep --precise 0.1.1-pre.0</code> as long as the version of <code class=\"notranslate\">dep</code> requested by their project and its dependencies are semver compatible with <code class=\"notranslate\">0.1.1</code>. This effectively splits the notion of compatibility in <code class=\"notranslate\">cargo</code>. A pre-release version may be considered compatible when the version is explicitly requested with <code class=\"notranslate\">--precise</code>. Cargo will not automatically select that version via a basic <code class=\"notranslate\">cargo update</code>.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3493",
            "title": "RFC: Precise Pre-release `cargo update`",
            "date_modified": "2023-09-20T17:15:03.000Z",
            "date_published": "2023-09-20T08:09:57.000Z",
            "author": {
                "name": "eopb",
                "url": "https://github.com/eopb"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/15088501?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">the PR and issue have been updated with different semantics</p>\n<p dir=\"auto\"><a href=\"https://github.com/chris-ha458/rfcs/blob/patch-1/text/2495-min-rust-version.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3492",
            "title": "Update 2495-min-rust-version.md links",
            "date_modified": "2023-09-19T12:46:15.000Z",
            "date_published": "2023-09-19T10:05:52.000Z",
            "author": {
                "name": "chris-ha458",
                "url": "https://github.com/chris-ha458"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/13724985?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/tgross35/rfcs/blob/const-fn-in-trait/text/0000-const-fn-in-trait.md\">Rendered</a></p>\n<p dir=\"auto\">This RFC allows marking methods in traits as <code class=\"notranslate\">const</code>.</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"trait Foo {\n    const fn bar(a: i32) -&gt; i32;\n}\n\nimpl Foo for MyStruct {\n    // Implementation must provide a const function\n    const fn bar(a: i32) -&gt; i32 {\n        a + 100\n    }\n}\n\n// `&lt;T as Foo&gt;::bar` can then be used in const contexts\nconst fn use_foo&lt;T: Foo&gt;(a: i32) -&gt; i32 {\n    T::bar(a) * 50\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">trait</span> <span class=\"pl-smi\">Foo</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-k\">fn</span> <span class=\"pl-en\">bar</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">i32</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">i32</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">impl</span> <span class=\"pl-smi\">Foo</span> <span class=\"pl-k\">for</span> <span class=\"pl-smi\">MyStruct</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// Implementation must provide a const function</span>\n    <span class=\"pl-k\">const</span> <span class=\"pl-k\">fn</span> <span class=\"pl-en\">bar</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">i32</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">i32</span> <span class=\"pl-kos\">{</span>\n        a + <span class=\"pl-c1\">100</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// `&lt;T as Foo&gt;::bar` can then be used in const contexts</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-k\">fn</span> <span class=\"pl-en\">use_foo</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">T</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">Foo</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">a</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">i32</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">i32</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-smi\">T</span><span class=\"pl-kos\">::</span><span class=\"pl-en\">bar</span><span class=\"pl-kos\">(</span>a<span class=\"pl-kos\">)</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">50</span>\n<span class=\"pl-kos\">}</span></pre></div>",
            "url": "https://github.com/rust-lang/rfcs/pull/3490",
            "title": "RFC: `const` functions in traits",
            "date_modified": "2023-10-07T11:48:01.000Z",
            "date_published": "2023-09-18T03:53:32.000Z",
            "author": {
                "name": "tgross35",
                "url": "https://github.com/tgross35"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/15850505?u=064c10efd2d57ae0bb9d53c6d97ea0a8e550c2a6&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Categories for crates are now deprecated and implicitly added as keywords instead. A new set of policies is added to allow the crates.io team to curate the way keywords are presented, replacing features such as the \"Popular Categories\" list on crates.io with a \"Popular Keywords\" instead.</p>\n<p dir=\"auto\"><a href=\"https://github.com/clarfonthey/rust-rfcs/blob/cargo-tags/text/3488-deprecate-cargo-categories.md\">Rendered</a></p>\n<p dir=\"auto\">Special thanks to <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Turbo87/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Turbo87\">@Turbo87</a> from the crates.io team for cleaning up this RFC and adding extra context.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3488",
            "title": "Deprecate crate categories and allow metadata on keywords",
            "date_modified": "2023-10-28T06:49:59.000Z",
            "date_published": "2023-09-10T03:37:24.000Z",
            "author": {
                "name": "clarfonthey",
                "url": "https://github.com/clarfonthey"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/13724985?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/tgross35/rfcs/blob/feature-visibility/text/3487-feature-visibility.md\">Rendered</a></p>\n<p dir=\"auto\">RFC for <code class=\"notranslate\">feature-visibility</code><br>\nRFC goals: add a way to make Cargo features private</p>\n<p dir=\"auto\">This was split from <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1669093537\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3416\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3416/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3416\">#3416</a></p>\n<div class=\"highlight highlight-source-toml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"[features]\nfoo = { enables = [], public = false}\"><pre class=\"notranslate\">[<span class=\"pl-en\">features</span>]\n<span class=\"pl-smi\">foo</span> = { <span class=\"pl-smi\">enables</span> = [], <span class=\"pl-smi\">public</span> = <span class=\"pl-c1\">false</span>}</pre></div>\n<p dir=\"auto\">This would <span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #10882.\">resolve</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1310055999\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/cargo/issues/10882\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/cargo/issues/10882/hovercard\" href=\"https://github.com/rust-lang/cargo/issues/10882\">rust-lang/cargo#10882</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3487",
            "title": "RFC: Cargo feature visibility (private/public)",
            "date_modified": "2023-10-18T13:32:19.000Z",
            "date_published": "2023-09-09T23:11:39.000Z",
            "author": {
                "name": "tgross35",
                "url": "https://github.com/tgross35"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/13724985?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/tgross35/rfcs/blob/feature-deprecation/text/3486-feature-deprecation.md\">Rendered</a></p>\n<p dir=\"auto\">RFC for <code class=\"notranslate\">feature-deprecation</code><br>\nRFC goals: add a way to deprecate Cargo features</p>\n<p dir=\"auto\">This was split from <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1669093537\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3416\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3416/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3416\">#3416</a></p>\n<div class=\"highlight highlight-source-toml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"[features]\nfoo = { enables = [], deprecated = true }\nfoo = { enables = [], deprecated = &quot;this works as a note&quot; }\nbar = { enables = [], deprecated = { since = &quot;1.2.3&quot;, note = &quot;don't use this!&quot; } }\"><pre class=\"notranslate\">[<span class=\"pl-en\">features</span>]\n<span class=\"pl-smi\">foo</span> = { <span class=\"pl-smi\">enables</span> = [], <span class=\"pl-smi\">deprecated</span> = <span class=\"pl-c1\">true</span> }\n<span class=\"pl-smi\">foo</span> = { <span class=\"pl-smi\">enables</span> = [], <span class=\"pl-smi\">deprecated</span> = <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>this works as a note<span class=\"pl-pds\">\"</span></span> }\n<span class=\"pl-smi\">bar</span> = { <span class=\"pl-smi\">enables</span> = [], <span class=\"pl-smi\">deprecated</span> = { <span class=\"pl-smi\">since</span> = <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>1.2.3<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-smi\">note</span> = <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>don't use this!<span class=\"pl-pds\">\"</span></span> } }</pre></div>\n<p dir=\"auto\">This would <span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #7130.\">resolve</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"467830911\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/cargo/issues/7130\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/cargo/issues/7130/hovercard\" href=\"https://github.com/rust-lang/cargo/issues/7130\">rust-lang/cargo#7130</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3486",
            "title": "RFC: Cargo feature deprecation",
            "date_modified": "2023-09-10T07:38:09.000Z",
            "date_published": "2023-09-09T23:06:09.000Z",
            "author": {
                "name": "tgross35",
                "url": "https://github.com/tgross35"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/13724985?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/tgross35/rfcs/blob/feature-documentation/text/3485-feature-documentation.md\">Rendered</a></p>\n<p dir=\"auto\">RFC for <code class=\"notranslate\">feature-documentation</code><br>\nRFC goals: add a way to write feature descriptions in Cargo.toml</p>\n<p dir=\"auto\">This was split from <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1669093537\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3416\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3416/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3416\">#3416</a></p>\n<div class=\"highlight highlight-source-toml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"[features]\n# current configuration\nfoo = []\n# Add a description to the feature\nbar = { enables = [&quot;foo&quot;], doc = &quot;simple docstring here&quot;}\n\n# Features can also be full tables if descriptions are longer\n[features.qux]\nenables = [&quot;bar&quot;, &quot;baz&quot;]\ndoc = &quot;&quot;&quot;\n# qux\n\nThis could be a longer description of this feature\n&quot;&quot;&quot;\"><pre class=\"notranslate\">[<span class=\"pl-en\">features</span>]\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> current configuration</span>\n<span class=\"pl-smi\">foo</span> = []\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Add a description to the feature</span>\n<span class=\"pl-smi\">bar</span> = { <span class=\"pl-smi\">enables</span> = [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>], <span class=\"pl-smi\">doc</span> = <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>simple docstring here<span class=\"pl-pds\">\"</span></span>}\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Features can also be full tables if descriptions are longer</span>\n[<span class=\"pl-en\">features</span>.<span class=\"pl-en\">qux</span>]\n<span class=\"pl-smi\">enables</span> = [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bar<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>baz<span class=\"pl-pds\">\"</span></span>]\n<span class=\"pl-smi\">doc</span> = <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\"># qux</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">This could be a longer description of this feature</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span></pre></div>\n<p dir=\"auto\">This would <span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #4956.\">resolve</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"289747867\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/cargo/issues/4956\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/cargo/issues/4956/hovercard\" href=\"https://github.com/rust-lang/cargo/issues/4956\">rust-lang/cargo#4956</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3485",
            "title": "RFC: Cargo feature descriptions",
            "date_modified": "2023-09-15T21:27:34.000Z",
            "date_published": "2023-09-09T22:59:28.000Z",
            "author": {
                "name": "tgross35",
                "url": "https://github.com/tgross35"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/5456384?u=19311cf017def31e83f6c871095f201625f4fb7a&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/Lokathor/rfcs/blob/unsafe-extern-blocks/text/0000-unsafe-extern-blocks.md\">Rendered</a></p>\n<hr>\n<p dir=\"auto\">Continuation of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1730097805\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3439\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3439/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3439\">#3439</a>, very sorry for the mix up, but when I went to make <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1862201012\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3477\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3477/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3477\">#3477</a> I deleted my <code class=\"notranslate\">rfcs</code> repo fork and re-forked. I had forgotten that there was an open PR at the time.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3484",
            "title": "Unsafe Extern Blocks",
            "date_modified": "2023-10-12T15:28:44.000Z",
            "date_published": "2023-09-07T01:15:50.000Z",
            "author": {
                "name": "Lokathor",
                "url": "https://github.com/Lokathor"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/147966?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC proposes a mechanism to allow <code class=\"notranslate\">impl</code>s for a type or trait to be in a<br>\nseparate crate, while still meeting the soundness guarantees currently enforced<br>\nby the orphan rule. With this, the crate structure (and thus build system<br>\ndependency graph) can be decoupled from the actual implementations.</p>\n<p dir=\"auto\"><a href=\"https://github.com/jsgf/rfcs/blob/extern-impl/text/0000-extern-impl.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3482",
            "title": "Pre-RFC describing mechanism to optionally loosen some orphan rule constraints",
            "date_modified": "2023-09-21T19:48:05.000Z",
            "date_published": "2023-09-03T01:56:17.000Z",
            "author": {
                "name": "jsgf",
                "url": "https://github.com/jsgf"
            }
        }
    ]
}