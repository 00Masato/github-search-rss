{
    "version": "https://jsonfeed.org/version/1",
    "title": "rust-lang/rfcs pr",
    "home_page_url": "https://00masato.github.io/github-search-rss/rust-rfc.json",
    "feed_url": "https://00masato.github.io/github-search-rss/rust-rfc.json",
    "description": "rust-lang/rfcs pr on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/in/2740?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://renovatebot.com\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/afc1c2a58082d5a20bbb5b81e6a885ed24e9bbd163f4ee38779d821e9dbfa6e8/68747470733a2f2f6170702e72656e6f76617465626f742e636f6d2f696d616765732f62616e6e65722e737667\" alt=\"Mend Renovate\" data-canonical-src=\"https://app.renovatebot.com/images/banner.svg\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">The Renovate config in this repository needs migrating. Typically this is because one or more configuration options you are using have been renamed.</p>\n<p dir=\"auto\">You don't need to merge this PR right away, because Renovate will continue to migrate these fields internally each time it runs. But later some of these fields may be fully deprecated and the migrations removed. So it's a good idea to merge this migration PR soon.</p>\n<h4 dir=\"auto\"><a href=\"https://docs.renovatebot.com/configuration-options#configmigration\" rel=\"nofollow\">PLEASE NOTE</a>: JSON5 config file migrated! All comments &amp; trailing commas were removed.</h4>\n<p dir=\"auto\">üîï <strong>Ignore</strong>: Close this PR and you won't be reminded about config migration again, but one day your current config may no longer be valid.</p>\n<p dir=\"auto\">‚ùì Got questions? Does something look wrong to you? Please don't hesitate to <a href=\"https://togithub.com/renovatebot/renovate/discussions\" rel=\"nofollow\">request help here</a>.</p>\n<hr>\n<p dir=\"auto\">This PR has been generated by <a href=\"https://www.mend.io/free-developer-tools/renovate/\" rel=\"nofollow\">Mend Renovate</a>. View repository job log <a href=\"https://developer.mend.io/github/rust-lang/rfcs\" rel=\"nofollow\">here</a>.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3638",
            "title": "Migrate renovate config",
            "date_modified": "2024-05-15T15:15:24.000Z",
            "date_published": "2024-05-15T15:15:23.000Z",
            "author": {
                "name": "renovate",
                "url": "https://github.com/apps/renovate"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19580458?u=1884c67cfdf07c9cdcd4edbe3532aa770aba55af&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/max-niederman/rust-rfcs/blob/guard-patterns/text/3637-guard-patterns.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3637",
            "title": "Guard Patterns",
            "date_modified": "2024-05-16T12:56:22.000Z",
            "date_published": "2024-05-15T07:03:42.000Z",
            "author": {
                "name": "max-niederman",
                "url": "https://github.com/max-niederman"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/783247?u=b4f1eeea8dd687c853f13caa8e40eced78c65cf1&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This is an alternative to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2289380504\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3632\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3632/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3632\">#3632</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/m-ou-se/rfcs/blob/extern-static/text/0000-externally-definable-statics.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3635",
            "title": " [RFC] externally definable statics",
            "date_modified": "2024-05-16T14:41:14.000Z",
            "date_published": "2024-05-13T13:49:36.000Z",
            "author": {
                "name": "m-ou-se",
                "url": "https://github.com/m-ou-se"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/715360?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This may be a bit long. I thought it would be best to go over the interactions with other language features and tooling as well as potential impacts thoroughly in advance, since while the addition to the language itself can be explained quickly, it does interact with <em>a lot</em> of other Rust features and aspects of the crate ecosystem.</p>\n<p dir=\"auto\">In (very) short this is a version of orphan-rule avoidance (i.e. non-unique trait implementations) that does not suffer from either version of \"the hashtable problem\", does not obscure imports, can be safely ignored unless needed (but is discoverable), is seamlessly compatible with specialisation and tries to strike a good balance between usability and complexity, so that developers are automatically funneled towards correct and unsurprising but also highly compatible code.</p>\n<p dir=\"auto\">I'm aware that there are often rash proposals in this direction, but I believe I've covered all previously-discussed issues.<br>\nAs the overall RFC is a fairly dense read, I've added cross-references and less-formal comments in form of blockquotes to it.</p>\n<hr>\n<p dir=\"auto\">Thanks</p>\n<ul dir=\"auto\">\n<li>to <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/teliosdev/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/teliosdev\">@teliosdev</a> for some very early syntax feedback that helped put me on track,</li>\n<li>to <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/cofinite/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cofinite\">@cofinite</a> for pointing out how scoped implementations allow syntax traits to be used as extension traits,</li>\n<li>to <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/thefakeplace/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/thefakeplace\">@thefakeplace</a> and to SkiFire13 in the <a href=\"https://internals.rust-lang.org/t/pre-rfc-scoped-impl-trait-for-type/19923\" rel=\"nofollow\">draft discussion</a> for suggestions on how to make this RFC more approachable and easier to understand.</li>\n</ul>\n<hr>\n<p dir=\"auto\"><a href=\"https://github.com/Tamschi/rust-rfcs/blob/scoped_impl_trait_for_type/text/3634-scoped-impl-trait-for-type.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3634",
            "title": "Scoped `impl Trait for Type`",
            "date_modified": "2024-05-15T21:18:05.000Z",
            "date_published": "2024-05-12T13:59:38.000Z",
            "author": {
                "name": "Tamschi",
                "url": "https://github.com/Tamschi"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/6801863?u=699ef806e3d9624167be89db3c7217df5193775e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/p-avital/rfcs/blob/stabilize-marker-freeze/text/0000-stabilize-marker-freeze.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3633",
            "title": "[RFC] `core::marker::Freeze` in bounds",
            "date_modified": "2024-05-16T05:52:00.000Z",
            "date_published": "2024-05-10T17:00:40.000Z",
            "author": {
                "name": "p-avital",
                "url": "https://github.com/p-avital"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/783247?u=b4f1eeea8dd687c853f13caa8e40eced78c65cf1&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">An alternative to this is <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2292887865\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3635\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3635/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3635\">#3635</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/m-ou-se/rfcs/blob/extern-impl-fn/text/0000-externally-implementable-functions.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3632",
            "title": "[RFC] externally implementable functions",
            "date_modified": "2024-05-16T11:54:15.000Z",
            "date_published": "2024-05-10T09:40:13.000Z",
            "author": {
                "name": "m-ou-se",
                "url": "https://github.com/m-ou-se"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/3050060?u=6ca85464b07c5464a052250a4fc3e3f9c03c97ed&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/rust-lang/rust/issues/43781\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/43781/hovercard\">tracking issue</a></p>\n<p dir=\"auto\">cc @rust-lang/rustdoc</p>\n<p dir=\"auto\"><a href=\"https://github.com/GuillaumeGomez/rfcs/blob/doc-cfg/text/000-rustdoc-cfgs-handling.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3631",
            "title": "RFC for doc_cfg, doc_cfg_auto, doc_cfg_hide and doc_cfg_show features",
            "date_modified": "2024-05-13T21:31:39.000Z",
            "date_published": "2024-05-09T14:08:45.000Z",
            "author": {
                "name": "GuillaumeGomez",
                "url": "https://github.com/GuillaumeGomez"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/162737?u=31a4f284889d0261a2b00e45af696e84dafb1488&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Co-authored-by: Eric Holk</p>\n<p dir=\"auto\"><a href=\"https://github.com/joshtriplett/rfcs/blob/fn-body-blocks/text/3629-fn-body-blocks.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3629",
            "title": "Function body blocks",
            "date_modified": "2024-05-16T02:20:15.000Z",
            "date_published": "2024-05-07T08:42:43.000Z",
            "author": {
                "name": "joshtriplett",
                "url": "https://github.com/joshtriplett"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/162737?u=31a4f284889d0261a2b00e45af696e84dafb1488&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Allow the syntax <code class=\"notranslate\">async T</code> and <code class=\"notranslate\">gen T</code> as types, equivalent to<br>\n<code class=\"notranslate\">impl Future&lt;Output = T&gt;</code> and <code class=\"notranslate\">impl Iterator&lt;Item = T&gt;</code> respectively. Accept<br>\nthem anywhere <code class=\"notranslate\">impl Trait</code> can appear.</p>\n<p dir=\"auto\">This RFC was inspired by a few different needs.</p>\n<p dir=\"auto\">First, writing large numbers of functions that manipulate iterators or futures.<br>\nHaving a shorthand for the type makes function signatures much clearer.</p>\n<p dir=\"auto\">And second, providing one part of a general solution that gives people the<br>\nbenefits of <code class=\"notranslate\">async fn</code> in all contexts, and for new constructs like <code class=\"notranslate\">gen</code>.</p>\n<p dir=\"auto\">Co-authored-by: Eric Holk</p>\n<p dir=\"auto\"><a href=\"https://github.com/joshtriplett/rfcs/blob/async-gen-types/text/3628-async-gen-types.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3628",
            "title": "`async T` and `gen T` types",
            "date_modified": "2024-05-10T16:11:51.000Z",
            "date_published": "2024-05-07T08:33:00.000Z",
            "author": {
                "name": "joshtriplett",
                "url": "https://github.com/joshtriplett"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/79955405?u=c4a50058c2fe0214e4243abaf547ee6e1f59de46&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/Jules-Bertholet/rfcs/blob/match-ergonomics-2024/text/3627-match-ergonomics-2024.md\">Rendered</a></p>\n<p dir=\"auto\">Changes to match ergonomics for the 2024 edition.</p>\n<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/rustbot/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/rustbot\">@rustbot</a> label T-lang A-patterns A-edition-2024</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3627",
            "title": "Match ergonomics 2024",
            "date_modified": "2024-05-15T21:40:32.000Z",
            "date_published": "2024-05-06T20:46:23.000Z",
            "author": {
                "name": "Jules-Bertholet",
                "url": "https://github.com/Jules-Bertholet"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/162737?u=31a4f284889d0261a2b00e45af696e84dafb1488&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC extends the \"implicit named arguments\" mechanism to allow accessing<br>\nfield names with <code class=\"notranslate\">var.field</code> syntax: <code class=\"notranslate\">format!(\"{self.x} {var.another_field}\")</code>.</p>\n<p dir=\"auto\"><a href=\"https://github.com/joshtriplett/rfcs/blob/format-args-implicit-identifiers-dot/text/3626-format-args-implicit-dot.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3626",
            "title": "Extend format_args implicit arguments to allow field access",
            "date_modified": "2024-05-15T14:56:51.000Z",
            "date_published": "2024-05-06T10:21:50.000Z",
            "author": {
                "name": "joshtriplett",
                "url": "https://github.com/joshtriplett"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/278509?u=f17ebaaae490d5f66760b62f162c2f142c7fc37d&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This is an alternative to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"545842586\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/2845\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/2845/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/2845\">#2845</a> which aims to resolve the <a href=\"https://github.com/rust-lang/rust/issues/88967\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/88967/hovercard\">issues</a> surrounding the stabilization of <code class=\"notranslate\">Iterator::intersperse</code>.</p>\n<h2 dir=\"auto\">Summary</h2>\n<p dir=\"auto\">When name resolution encounters an ambiguity between 2 trait methods, if one trait is a sub-trait of the other then select that method instead of reporting an ambiguity error.</p>\n<p dir=\"auto\"><a href=\"https://github.com/Amanieu/rfcs/blob/item-shadowing/text/0000-supertrait-item-shadowing-v2.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3624",
            "title": "Supertrait item shadowing v2",
            "date_modified": "2024-05-12T16:59:42.000Z",
            "date_published": "2024-05-03T23:39:09.000Z",
            "author": {
                "name": "Amanieu",
                "url": "https://github.com/Amanieu"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/928074?u=34b16e2e7d89c10be8992a845915ab8af13f5570&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Use custom smart pointers with trait objects.</p>\n<p dir=\"auto\"><a href=\"https://github.com/Darksonn/rfcs/blob/derive-smart-pointer/text/3621-derive-smart-pointer.md\">Rendered</a></p>\n<p dir=\"auto\">Tracking issue: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2223882107\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rust/issues/123430\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/123430/hovercard\" href=\"https://github.com/rust-lang/rust/issues/123430\">rust-lang/rust#123430</a></p>\n<hr>\n<p dir=\"auto\">Co-authored by <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Darksonn/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Darksonn\">@Darksonn</a> and <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Veykril/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Veykril\">@Veykril</a><br>\nThank you to <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/compiler-errors/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/compiler-errors\">@compiler-errors</a> for <a href=\"https://rust-lang.zulipchat.com/#narrow/stream/410673-t-lang.2Fmeetings/topic/RfL.20meeting.202024-02-21/near/422701742\" rel=\"nofollow\">the original idea</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3621",
            "title": "RFC: #[derive(SmartPointer)]",
            "date_modified": "2024-05-12T19:35:53.000Z",
            "date_published": "2024-05-02T07:49:52.000Z",
            "author": {
                "name": "Darksonn",
                "url": "https://github.com/Darksonn"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/43425812?u=f2f8ffc3e131abd598a2ae1b7832c1657ddef687&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #3618.\">fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2272444805\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3618\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rfcs/issues/3618/hovercard\" href=\"https://github.com/rust-lang/rfcs/issues/3618\">#3618</a>.</p>\n<p dir=\"auto\"><a href=\"https://github.com/hamirmahal/rfcs/blob/patch-2/text/0344-conventions-galore.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3619",
            "title": "docs: `0344-conventions-galore.md` should use `_`",
            "date_modified": "2024-05-02T13:12:25.000Z",
            "date_published": "2024-04-30T21:02:18.000Z",
            "author": {
                "name": "hamirmahal",
                "url": "https://github.com/hamirmahal"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1076834?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">To fully stabilize, in Rust 2024, the Lifetime Capture Rules 2024 that we accepted in RFC 3498, we need to stabilize some means of precise capturing.  This RFC provides that means.</p>\n<p dir=\"auto\">This RFC adds <code class=\"notranslate\">use&lt;..&gt;</code> syntax for specifying which generic parameters should be captured in an opaque RPIT-like <code class=\"notranslate\">impl Trait</code> type, e.g. <code class=\"notranslate\">impl use&lt;'t, T&gt; Trait</code>.  This solves the problem of overcapturing and will allow the Lifetime Capture Rules 2024 to be fully stabilized for RPIT in Rust 2024.</p>\n<p dir=\"auto\">One way to think about <code class=\"notranslate\">use&lt;..&gt;</code> is that, in Rust <code class=\"notranslate\">use</code> brings things <em>into scope</em>, and here we are bringing certain generic parameters into scope for the hidden type.</p>\n<p dir=\"auto\">For some history about the progress toward this feature predating this RFC, see <a href=\"https://github.com/rust-lang/rfcs/pull/3617#issuecomment-2076349223\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3617/hovercard\">this comment</a>.</p>\n<p dir=\"auto\"><a href=\"https://github.com/rust-lang/rfcs/blob/TC/precise-capturing/text/3617-precise-capturing.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3617",
            "title": "Precise capturing",
            "date_modified": "2024-05-06T09:04:25.000Z",
            "date_published": "2024-04-24T07:57:17.000Z",
            "author": {
                "name": "traviscross",
                "url": "https://github.com/traviscross"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/18526288?u=a851e2ec349404d3ad63a62786fe9a35009fa8d1&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Third-party <code class=\"notranslate\">derive</code> macros want to be able to use the same direct discriminant access to the <code class=\"notranslate\">enum</code> for which they're implementing a trait that the core derive macro does, which seems entirely reasonable.</p>\n<p dir=\"auto\">To allow that without imposing a new category of major breaking changes on library authors, this proposes a <em>safe</em> built-in way for getting the discriminant as a primitive integer -- not an opaque <code class=\"notranslate\">mem::Discriminant</code> -- for anything on which you can see private fields.</p>\n<p dir=\"auto\"><a href=\"https://github.com/scottmcm/rfcs/blob/enum-discriminant/text/3607-enum-discriminant.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3607",
            "title": "Add an expression for direct access to an enum's discriminant",
            "date_modified": "2024-05-07T07:57:56.000Z",
            "date_published": "2024-04-07T04:18:53.000Z",
            "author": {
                "name": "scottmcm",
                "url": "https://github.com/scottmcm"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/5026283?u=5904dba48d84a78b16221f9d91cfdd86c4985e5c&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/chorman0773/rust-rfcs/blob/freeze-uninit/text/0000-freeze-uninit.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3605",
            "title": "RFC: Add `freeze` intrinsic and related library functions",
            "date_modified": "2024-04-19T07:51:25.000Z",
            "date_published": "2024-04-02T04:01:02.000Z",
            "author": {
                "name": "chorman0773",
                "url": "https://github.com/chorman0773"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/146410045?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">I think this a good quality of life proposal similar to the <a href=\"https://rust-lang.github.io/rfcs/3107-derive-default-enum.html\" rel=\"nofollow\">proposal to add a derive Default for enums</a>, not big in scope or magnitude.<br>\nTLDR:<br>\nI want to make a derive macro for TryFrom and Into, that generate an impl of TryFrom and Into for any C-Style Enum:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"//using these two macros\n#[derive(FromInt, IntoInt)] // names subject to change\nenum CStyleEnum {\n   Variant1 = 10,\n   Variant2 = 20,\n   ...\n}\n\n//convert from a number to the C-style enum easily\nlet from_num = CStyleEnum::try_from(10); // Ok(CStyleEnum::Variant1)\nlet failed_from = CStyleEnum::try_from(21); // Err(())\n//convert into a number from a C-style enum more generically\nlet into_num = CStyleEnum::Variant2.into(); //20\"><pre class=\"notranslate\"><span class=\"pl-c\">//using these two macros</span>\n<span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>derive<span class=\"pl-kos\">(</span><span class=\"pl-v\">FromInt</span><span class=\"pl-kos\">,</span> <span class=\"pl-v\">IntoInt</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span> <span class=\"pl-c\">// names subject to change</span>\n<span class=\"pl-k\">enum</span> <span class=\"pl-smi\">CStyleEnum</span> <span class=\"pl-kos\">{</span>\n   <span class=\"pl-v\">Variant1</span> = <span class=\"pl-c1\">10</span><span class=\"pl-kos\">,</span>\n   <span class=\"pl-v\">Variant2</span> = <span class=\"pl-c1\">20</span><span class=\"pl-kos\">,</span>\n   ...\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">//convert from a number to the C-style enum easily</span>\n<span class=\"pl-k\">let</span> from_num = <span class=\"pl-smi\">CStyleEnum</span><span class=\"pl-kos\">::</span><span class=\"pl-en\">try_from</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">10</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// Ok(CStyleEnum::Variant1)</span>\n<span class=\"pl-k\">let</span> failed_from = <span class=\"pl-smi\">CStyleEnum</span><span class=\"pl-kos\">::</span><span class=\"pl-en\">try_from</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">21</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// Err(())</span>\n<span class=\"pl-c\">//convert into a number from a C-style enum more generically</span>\n<span class=\"pl-k\">let</span> into_num = <span class=\"pl-smi\">CStyleEnum</span><span class=\"pl-kos\">::</span><span class=\"pl-v\">Variant2</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">into</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">//20</span></pre></div>\n<p dir=\"auto\"><a href=\"https://github.com/agreyyy/rfcs-c_style_enums/blob/master/text/3604-derive_c-enum_integer_conversions.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3604",
            "title": "RFC: Add a special TryFrom and Into derive macro, specifically for C-Style enums",
            "date_modified": "2024-04-14T10:40:08.000Z",
            "date_published": "2024-04-01T13:10:56.000Z",
            "author": {
                "name": "agreyyy",
                "url": "https://github.com/agreyyy"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1295100?u=b0540abe14ddfb8c24578add2a8c960bc704a661&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Re-organise the compiler team:</p>\n<ul dir=\"auto\">\n<li>Re-define and rename the tiers of membership</li>\n<li>Change how team members and contributors are promoted</li>\n<li>Document expectations of team members</li>\n<li>Establish mechanism for scaling additional responsibilities that team members take on and recognising these contributions</li>\n</ul>\n<p dir=\"auto\"><a href=\"https://github.com/davidtwco/rfcs/blob/compiler-team-trusted-contrib-maintainer/text/0000-compiler-team-trusted-contrib-maintainer.md\">Rendered text</a></p>\n<p dir=\"auto\">@rust-lang/compiler @rust-lang/compiler-contributors</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3599",
            "title": "re-organise the compiler team",
            "date_modified": "2024-05-15T08:48:41.000Z",
            "date_published": "2024-03-28T15:14:51.000Z",
            "author": {
                "name": "davidtwco",
                "url": "https://github.com/davidtwco"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/164242179?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">More details are in the MD himself.<br>\nFor more possible info see:<br>\n<a href=\"https://internals.rust-lang.org/t/stack-aligment-in-a-callback-function/2050\" rel=\"nofollow\">https://internals.rust-lang.org/t/stack-aligment-in-a-callback-function/2050</a><br>\n<a href=\"https://clang.llvm.org/docs/AttributeReference.html#force-align-arg-pointer\" rel=\"nofollow\">https://clang.llvm.org/docs/AttributeReference.html#force-align-arg-pointer</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/benisxdxd/rfcs/blob/master/text/3594-expose-stackrealign-attribute.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3594",
            "title": "RFC: Add realign_stack attribute to rustc",
            "date_modified": "2024-05-07T20:52:30.000Z",
            "date_published": "2024-03-26T00:19:11.000Z",
            "author": {
                "name": "benisxdxd",
                "url": "https://github.com/benisxdxd"
            }
        }
    ]
}