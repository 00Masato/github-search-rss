{
    "version": "https://jsonfeed.org/version/1",
    "title": "rust-lang/rfcs pr",
    "home_page_url": "https://00masato.github.io/github-search-rss/rust-rfc.json",
    "feed_url": "https://00masato.github.io/github-search-rss/rust-rfc.json",
    "description": "rust-lang/rfcs pr on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/110610266?u=2a99662c5492836da7d975f072bb50febc09372e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">A simple feature for generic markup types.</p>\n<p dir=\"auto\"><a href=\"https://github.com/hydroper/rust-rfcs/blob/master/text/0000-markup-macro.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3468",
            "title": "markup_macro",
            "date_modified": "2023-08-02T16:58:28.000Z",
            "date_published": "2023-08-02T00:02:39.000Z",
            "author": {
                "name": "hydroper",
                "url": "https://github.com/hydroper"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/330628?u=562ead6e5c8da9a02015f73a9aefdb6c82d4e2cf&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Add a type <code class=\"notranslate\">UnsafeAliased</code> that acts on <code class=\"notranslate\">&amp;mut</code> in a similar way to how <code class=\"notranslate\">UnsafeCell</code> acts on <code class=\"notranslate\">&amp;</code>: it opts-out of the aliasing guarantees.<br>\nHowever, <code class=\"notranslate\">&amp;mut UnsafeAliased</code> can still be <code class=\"notranslate\">mem::swap</code>ed, so this is not a free ticket for arbitrary aliasing of mutable references.<br>\nAbstractions built on top of <code class=\"notranslate\">UnsafeAliased</code> must ensure proper encapsulation when handing such aliases references to clients (e.g. via pinning).</p>\n<p dir=\"auto\">This type is then used in generator lowering, finally fixing <a href=\"https://github.com/rust-lang/rust/issues/63818\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/63818/hovercard\">#63818</a>.</p>\n<p dir=\"auto\">Thanks to @rust-lang/opsem for a bunch of useful feedback!</p>\n<p dir=\"auto\"><a href=\"https://github.com/RalfJung/rfcs/blob/unsafe-aliased/text/0000-unsafe-aliased.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3467",
            "title": "UnsafeAliased: allow aliasing of mutable references",
            "date_modified": "2023-08-03T00:38:27.000Z",
            "date_published": "2023-08-01T10:14:20.000Z",
            "author": {
                "name": "RalfJung",
                "url": "https://github.com/RalfJung"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/79955405?u=c4a50058c2fe0214e4243abaf547ee6e1f59de46&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/Jules-Bertholet/rfcs/blob/manuallydrop-deref-move/text/3466-manuallydrop-deref-move.md\"><strong>Rendered</strong></a></p>\n<p dir=\"auto\">Pre-RFC discussion on <a href=\"https://internals.rust-lang.org/t/move-out-of-deref-for-manuallydrop/19216/\" rel=\"nofollow\">Internals</a></p>\n<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/rustbot/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/rustbot\">@rustbot</a> label A-drop</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3466",
            "title": "Move out of deref for `ManuallyDrop`",
            "date_modified": "2023-07-31T02:19:25.000Z",
            "date_published": "2023-07-30T22:00:54.000Z",
            "author": {
                "name": "Jules-Bertholet",
                "url": "https://github.com/Jules-Bertholet"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/229984?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">/cc @rust-lang/crates-io, @rust-lang/cargo, @rust-lang/mods</p>\n<p dir=\"auto\"><a href=\"https://github.com/LawnGnome/rfcs/blob/crate-quarantine/text/0000-crate-quarantine.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3464",
            "title": "Crate quarantine",
            "date_modified": "2023-07-30T18:18:31.000Z",
            "date_published": "2023-07-25T18:53:10.000Z",
            "author": {
                "name": "LawnGnome",
                "url": "https://github.com/LawnGnome"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/141300?u=e222ed60f0855d57158dd20d3613f4db42b4236f&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/Turbo87/rust-rfcs/blob/crates-io-policy-update/text/3463-crates-io-policy-update.md\">Rendered</a></p>\n<p dir=\"auto\">/cc @rust-lang/crates-io</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3463",
            "title": "Add \"crates.io Policy Update\" RFC",
            "date_modified": "2023-08-02T16:50:52.000Z",
            "date_published": "2023-07-24T13:37:52.000Z",
            "author": {
                "name": "Turbo87",
                "url": "https://github.com/Turbo87"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1441126?u=673c0269338267eb09ccf9a8350ab9e55da4904e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This PR is a duplicate of <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"592267297\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/2895\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/2895/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/2895\">#2895</a>, which I have agreed to take over for <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/yaahc/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/yaahc\">@yaahc</a>. The idea is to close that in favor of this PR so I can drive additional changes as feedback comes in.</p>\n<p dir=\"auto\">The current state of this proposal is as follows:</p>\n<ul dir=\"auto\">\n<li>A <a href=\"nightly_implementation\">implementation</a> gated by the <code class=\"notranslate\">error_generic_member_access</code> feature flag is available in nightly.</li>\n<li>There is an <a href=\"feedback_pr\">open PR</a> to address feedback from the <a href=\"provide_any_tracking\"><code class=\"notranslate\">provide_any</code> tracking issue</a> in nightly.</li>\n<li>It has been proposed to supercede the <a href=\"provide_any\"><code class=\"notranslate\">provide_any</code> feature</a> by taking on the <code class=\"notranslate\">Demand</code>/<code class=\"notranslate\">Request</code> API (minus the <code class=\"notranslate\">Provider</code> trait) for the sake of generic member access on <code class=\"notranslate\">dyn Error</code>.</li>\n</ul>\n<p dir=\"auto\"><a href=\"https://github.com/waynr/rust-rfcs/blob/error_generic_member_access/text/0000-dyn-error-generic-member-access.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3461",
            "title": "RFC: Generic member access for dyn Error trait objects",
            "date_modified": "2023-07-21T01:17:48.000Z",
            "date_published": "2023-07-20T22:32:41.000Z",
            "author": {
                "name": "waynr",
                "url": "https://github.com/waynr"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/2090772?u=517ee1e56d9df10ff7fc4f5e9ca781e06841c84e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/ijackson/rust-rfcs/blob/error/text/0000-error-display.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3459",
            "title": "Error Display (std::error::Error::fmt_error)",
            "date_modified": "2023-08-01T09:39:43.000Z",
            "date_published": "2023-07-19T15:57:37.000Z",
            "author": {
                "name": "ijackson",
                "url": "https://github.com/ijackson"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/3161395?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/jhpratt/rfcs/blob/unsafe-fields/text/0000-unsafe-fields.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3458",
            "title": "Unsafe fields",
            "date_modified": "2023-07-23T03:37:55.000Z",
            "date_published": "2023-07-13T04:45:33.000Z",
            "author": {
                "name": "jhpratt",
                "url": "https://github.com/jhpratt"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/10329663?u=f631a737c2d7865f5c69ef694f23645b9a97705c&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/ecnelises/rust-rfcs/blob/bf16_f64f64_f80/text/add-bf16-f64f64-and-f80-type.md\">Rendered</a></p>\n<p dir=\"auto\">Previous RFC <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1779419348\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3451\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3451/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3451\">#3451</a> mixes proposal for IEEE-754 compliant <code class=\"notranslate\">f16</code>/<code class=\"notranslate\">f128</code> and such non-standard types, split this off from it to focus on the target related ones.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3456",
            "title": "Add `bf16`, `f64f64` and `f80` types",
            "date_modified": "2023-07-14T22:11:08.000Z",
            "date_published": "2023-07-10T16:48:54.000Z",
            "author": {
                "name": "ecnelises",
                "url": "https://github.com/ecnelises"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/60961?u=967a9ccc3f7dba0d5d3acd694e3cf81893defe96&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC proposes creating a new sub-team for shepherding improvements to the end-user experience (wider Rust development community) for verifying their Rust code.  For example, this team would be overseeing improvements to <code class=\"notranslate\">cargo test</code> (owned by T-cargo under T-devtools) and lib<code class=\"notranslate\">test</code> (owned by T-libs).</p>\n<p dir=\"auto\"><a href=\"https://github.com/epage/rfcs/blob/test/text/3455-t-test.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3455",
            "title": "Create a Testing sub-team",
            "date_modified": "2023-08-02T13:11:26.000Z",
            "date_published": "2023-07-03T18:39:27.000Z",
            "author": {
                "name": "epage",
                "url": "https://github.com/epage"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1646875?u=24618295fece29a0bf5c850faf2555985232f5f2&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/aaronfranke/rfcs/blob/3453-f16-and-f128/text/3453-f16-and-f128.md\">Rendered</a></p>\n<p dir=\"auto\">See the discussion leading up to this RFC in issue <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"403493179\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/2629\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rfcs/issues/2629/hovercard\" href=\"https://github.com/rust-lang/rfcs/issues/2629\">#2629</a>, and see the RFC for further floating point types at <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1779419348\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3451\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3451/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3451\">#3451</a>. This RFC is mostly a subset of what was originally proposed in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1779419348\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3451\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3451/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3451\">#3451</a>, and was split off to provide an easier path to consensus for types that don't have as many debatable implementation aspects.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3453",
            "title": "Add `f16` and `f128` float types",
            "date_modified": "2023-07-10T20:03:14.000Z",
            "date_published": "2023-07-02T06:39:53.000Z",
            "author": {
                "name": "aaronfranke",
                "url": "https://github.com/aaronfranke"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/779501?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/kpreid/rust-rfcs/blob/nested-publish/text/0000-nested-publish.md\">Rendered</a></p>\n<p dir=\"auto\">This is my first Rust RFC. The idea was previously discussed on IRLO (<a href=\"https://internals.rust-lang.org/t/private-nested-cargo-packages/19042\" rel=\"nofollow\">Private nested Cargo packages</a>), and the feedback was generally positive except for confusion about exactly what was being changed, which I believe I have now precisely defined in this RFC draft.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3452",
            "title": "RFC: Nested Cargo packages",
            "date_modified": "2023-07-28T14:13:19.000Z",
            "date_published": "2023-07-01T00:50:11.000Z",
            "author": {
                "name": "kpreid",
                "url": "https://github.com/kpreid"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/10329663?u=f631a737c2d7865f5c69ef694f23645b9a97705c&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/ecnelises/rust-rfcs/blob/additional-floats/text/3451-additional-float-types.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3451",
            "title": "Additional float types",
            "date_modified": "2023-07-11T20:31:22.000Z",
            "date_published": "2023-06-28T17:45:07.000Z",
            "author": {
                "name": "ecnelises",
                "url": "https://github.com/ecnelises"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/451321?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Add a new syntax for multi-line string literals designed to contain code and play nicely with <code class=\"notranslate\">rustfmt</code>.</p>\n<p dir=\"auto\"><a href=\"https://github.com/Diggsey/rfcs/blob/code-string-literals/text/0000-code-literals.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3450",
            "title": "Propose code string literals",
            "date_modified": "2023-07-29T07:20:28.000Z",
            "date_published": "2023-06-18T17:01:25.000Z",
            "author": {
                "name": "Diggsey",
                "url": "https://github.com/Diggsey"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/563826?u=a408b5784df40b974e45854386172e7e7ebc1797&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Add new <code class=\"notranslate\">is_{arch}_feature_enabled</code> macros for detecting at compile time if a target feature is enabled in a context.</p>\n<p dir=\"auto\"><a href=\"https://github.com/calebzulawski/rfcs/blob/target-feature-enabled/text/3449-target-feature-enabled.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3449",
            "title": "Contextual target feature detection",
            "date_modified": "2023-07-17T06:55:41.000Z",
            "date_published": "2023-06-18T02:46:56.000Z",
            "author": {
                "name": "calebzulawski",
                "url": "https://github.com/calebzulawski"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/2420441?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">The Store offers a more flexible allocation API, suitable for in-line memory store, shared memory store, compact \"pointers\", const/static use, and more.</p>\n<p dir=\"auto\">Adoption of this API, and its use in standard collections, would render a number of specialized crates obsolete in full or in part, such as StackFuture.</p>\n<p dir=\"auto\"><a href=\"https://github.com/matthieu-m/rfcs/blob/store/text/3446-store.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3446",
            "title": "Introduce the Store API for great good.",
            "date_modified": "2023-07-29T13:26:00.000Z",
            "date_published": "2023-06-17T13:40:53.000Z",
            "author": {
                "name": "matthieu-m",
                "url": "https://github.com/matthieu-m"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/36625023?u=dba7deb4fbb4c429e08b309e3e3f9feba236ae28&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC is all about allowing types to be inferred without any compromises. The syntax is as follows. For additional information, please read the bellow.</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"struct MyStruct {\n    value: usize\n}\n\nimpl MyStruct {\n    fn new(value: usize) -&gt; Self {\n        Self {\n            value\n        }\n    }\n}\n\nfn my_func(data: MyStruct) { /* ... */ }\n\nmy_func(_::new(1));\"><pre class=\"notranslate\"><span class=\"pl-k\">struct</span> <span class=\"pl-smi\">MyStruct</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">value</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">usize</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">impl</span> <span class=\"pl-smi\">MyStruct</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">new</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">value</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">usize</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">Self</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">Self</span> <span class=\"pl-kos\">{</span>\n            value\n        <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">fn</span> <span class=\"pl-en\">my_func</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">data</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">MyStruct</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span> <span class=\"pl-c\">/* ... */</span> <span class=\"pl-kos\">}</span>\n\n<span class=\"pl-en\">my_func</span><span class=\"pl-kos\">(</span>_<span class=\"pl-kos\">::</span><span class=\"pl-en\">new</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">I think this is a much better and more concise syntax.</p>\n<blockquote>\n<p dir=\"auto\">If you plan on pressing the dislike button, please leave a comment explaining your disproval. Every piece of constructive feedback helps.</p>\n</blockquote>\n<p dir=\"auto\"><a href=\"https://github.com/JoshuaBrest/rfcs/blob/master/text/0000-inferred-types.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3444",
            "title": "Inferred types `_::Enum`",
            "date_modified": "2023-08-02T20:52:21.000Z",
            "date_published": "2023-06-07T05:01:10.000Z",
            "author": {
                "name": "JoshuaBrest",
                "url": "https://github.com/JoshuaBrest"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19656507?u=6660e21862872967475a54df58143d25987e350b&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">I wrote up my thoughts from <a href=\"https://internals.rust-lang.org/t/macro-rules-metavariable-for-generic/18889\" rel=\"nofollow\">this rust-internals thread</a> into an RFC.</p>\n<p dir=\"auto\"><a href=\"https://github.com/JarredAllen/rust-lang-rfcs/blob/fragment-specifiers-for-generic-arguments/text/0000-fragment-specifiers-for-generic-arguments.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3442",
            "title": "Fragment Specifiers for Generic Arguments",
            "date_modified": "2023-06-06T00:15:21.000Z",
            "date_published": "2023-06-01T20:44:34.000Z",
            "author": {
                "name": "JarredAllen",
                "url": "https://github.com/JarredAllen"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/127629827?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/blagowtf/rust-rfcs-virt-self/blob/master/text/3440-virt-self.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3440",
            "title": "Virtually dispatched trait methods",
            "date_modified": "2023-07-29T18:44:03.000Z",
            "date_published": "2023-05-30T15:37:37.000Z",
            "author": {
                "name": "blagowtf",
                "url": "https://github.com/blagowtf"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/5456384?u=19311cf017def31e83f6c871095f201625f4fb7a&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/Lokathor/rfcs/blob/Lokathor-patch-1/text/0000-unsafe_extern.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3439",
            "title": "Unsafe Extern Blocks",
            "date_modified": "2023-06-22T09:08:24.000Z",
            "date_published": "2023-05-29T05:32:21.000Z",
            "author": {
                "name": "Lokathor",
                "url": "https://github.com/Lokathor"
            }
        }
    ]
}