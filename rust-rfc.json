{
    "version": "https://jsonfeed.org/version/1",
    "title": "rust-lang/rfcs pr",
    "home_page_url": "https://00masato.github.io/github-search-rss/rust-rfc.json",
    "feed_url": "https://00masato.github.io/github-search-rss/rust-rfc.json",
    "description": "rust-lang/rfcs pr on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/2467194?u=300b3913e0e77f925f7116f4830098725a03629f&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This updates the text of RFC <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1931329319\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3509\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3509/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3509\">#3509</a> with <a href=\"https://github.com/rust-lang/rfcs/pull/3509#discussion_r1463621319\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3509/hovercard\">this</a> and <a href=\"https://github.com/rust-lang/rfcs/pull/3509#discussion_r1463631711\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3509/hovercard\">this</a> suggestion from review. Thanks!</p>\n<p dir=\"auto\"><a href=\"https://github.com/yoshuawuyts/rfcs/blob/update-future-prelude-rfc/text/3509-prelude-2024-future.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3574",
            "title": "update future prelude RFC with feedback from review",
            "date_modified": "2024-02-18T01:51:26.000Z",
            "date_published": "2024-02-18T01:51:24.000Z",
            "author": {
                "name": "yoshuawuyts",
                "url": "https://github.com/yoshuawuyts"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/162737?u=31a4f284889d0261a2b00e45af696e84dafb1488&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Introduce an <code class=\"notranslate\">is</code> operator in Rust 2024, to test if an expression matches a<br>\npattern and bind the variables in the pattern. This is in <em>addition</em> to<br>\n<code class=\"notranslate\">let</code>-chaining; this RFC proposes that we allow both <code class=\"notranslate\">let</code>-chaining <em>and</em> the<br>\n<code class=\"notranslate\">is</code> operator.</p>\n<p dir=\"auto\">Previous discussions around <code class=\"notranslate\">let</code>-chains have treated the <code class=\"notranslate\">is</code> operator as an<br>\nalternative on the basis that they serve similar functions, rather than<br>\nproposing that they can and should coexist. This RFC proposes that we allow<br>\n<code class=\"notranslate\">let</code>-chaining <em>and</em> add the <code class=\"notranslate\">is</code> operator.</p>\n<p dir=\"auto\">The <code class=\"notranslate\">is</code> operator allows developers to chain multiple matching-and-binding<br>\noperations and simplify what would otherwise require complex nested<br>\nconditionals. The <code class=\"notranslate\">is</code> operator allows writing and reading a pattern match from<br>\nleft-to-right, which reads more naturally in many circumstances. For instance,<br>\nconsider an expression like <code class=\"notranslate\">x is Some(y) &amp;&amp; y &gt; 5</code>; that boolean expression<br>\nreads more naturally from left-to-right than <code class=\"notranslate\">let Some(y) = x &amp;&amp; y &gt; 5</code>.</p>\n<p dir=\"auto\">This is even more true at the end of a longer expression chain, such as<br>\n<code class=\"notranslate\">x.method()?.another_method().await? is Some(y)</code>. Rust method chaining and <code class=\"notranslate\">?</code><br>\nand <code class=\"notranslate\">.await</code> all encourage writing code that reads in operation order from left<br>\nto right, and <code class=\"notranslate\">is</code> fits naturally at the end of such a sequence.</p>\n<p dir=\"auto\">Having an <code class=\"notranslate\">is</code> operator would also help to reduce the demand for methods on<br>\ntypes such as <code class=\"notranslate\">Option</code> and <code class=\"notranslate\">Result</code> (e.g. <code class=\"notranslate\">Option::is_some_and</code> and<br>\n<code class=\"notranslate\">Result::is_ok_and</code> and <code class=\"notranslate\">Result::is_err_and</code>), by allowing prospective users of<br>\nthose methods to write a natural-looking condition using <code class=\"notranslate\">is</code> instead.</p>\n<p dir=\"auto\"><a href=\"https://github.com/joshtriplett/rfcs/blob/is/text/3573-is.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3573",
            "title": "`is` operator for pattern-matching and binding",
            "date_modified": "2024-02-19T05:24:25.000Z",
            "date_published": "2024-02-16T11:43:05.000Z",
            "author": {
                "name": "joshtriplett",
                "url": "https://github.com/joshtriplett"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/68929154?u=81a93ba0df78bd25d7f797be93bee9964a002f78&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Allow type parameters to be used in nested functions. Removes E0401.</p>\n<p dir=\"auto\">This error was first introduced (at the latest) in 2015. After almost ten years of development and changes in Rust, I believe it's time to reconsider it.<br>\nTLDR: Allow the below.</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"fn foo&lt;T&gt;(x: T) -&gt; T {\n    fn bar(y: T) -&gt; T {\n        y\n    }\n    bar(x)\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">fn</span> <span class=\"pl-en\">foo</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">T</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">x</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">T</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">T</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">bar</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">y</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">T</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">T</span> <span class=\"pl-kos\">{</span>\n        y\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-en\">bar</span><span class=\"pl-kos\">(</span>x<span class=\"pl-kos\">)</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\"><a href=\"https://github.com/jake-87/rfcs/blob/master/text/0000-nested-function-scoped-type-parameters.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3562",
            "title": "Nested function scoped type parameters",
            "date_modified": "2024-02-08T11:58:32.000Z",
            "date_published": "2024-01-31T12:42:54.000Z",
            "author": {
                "name": "jake-87",
                "url": "https://github.com/jake-87"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/49301588?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Pre-RFC on <a href=\"https://internals.rust-lang.org/t/pre-rfc-deprecate-then-remove-static-mut/20072\" rel=\"nofollow\">IRLO</a>.</p>\n<p dir=\"auto\"><a href=\"https://www.surveyhero.com/results/1749245/qsry7n7amfk9t2dbanw15vfyo0x06tzj\" rel=\"nofollow\">Results</a> from research survey to inform discussion with respect to perception of the feature. (JS required)</p>\n<p dir=\"auto\"><a href=\"https://github.com/dyslexicsteak/rfcs/blob/master/text/3560-deprecate-static-mut.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3560",
            "title": "Deprecate `static mut`",
            "date_modified": "2024-02-16T19:45:51.000Z",
            "date_published": "2024-01-26T09:59:12.000Z",
            "author": {
                "name": "dyslexicsteak",
                "url": "https://github.com/dyslexicsteak"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/60669983?u=31e825708e6f1782c6b09a99405bd5b7f4d78ee2&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This PR proposes the creation of an external stand-alone test suite and associated tools for verifying the Rust toolchain that also fits into existing Rust development workflows.</p>\n<p dir=\"auto\"><a href=\"https://github.com/kirtchev-adacore/kirtchev-adacore-rust-lang-rfcs/blob/wip/add-out-of-tree-test-suite-rfc/text/3557-out-of-tree-test-suite.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3557",
            "title": "RFC: Out-of-tree test suite",
            "date_modified": "2024-01-26T12:00:17.000Z",
            "date_published": "2024-01-10T14:31:27.000Z",
            "author": {
                "name": "kirtchev-adacore",
                "url": "https://github.com/kirtchev-adacore"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1050652?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">cc <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"496718321\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/2771\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rfcs/issues/2771/hovercard\" href=\"https://github.com/rust-lang/rfcs/issues/2771\">#2771</a>, <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1722049304\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3435\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3435/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3435\">#3435</a>, <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1677424706\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rust/issues/110624\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/110624/hovercard\" href=\"https://github.com/rust-lang/rust/issues/110624\">rust-lang/rust#110624</a></p>\n<p dir=\"auto\">Not sure if compiler team or lang team owns this.</p>\n<p dir=\"auto\"><a href=\"https://github.com/aidanhs/rfcs/blob/aphs-re-export/text/3556-re-export-symbols.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3556",
            "title": "RFC: Allow symbol re-export in cdylib crate from linked staticlib",
            "date_modified": "2024-02-08T02:54:16.000Z",
            "date_published": "2024-01-06T15:26:58.000Z",
            "author": {
                "name": "aidanhs",
                "url": "https://github.com/aidanhs"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/704597?u=15e04047ef09260a4861c1c9622e1e6fd3898161&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC adds an option to Cargo that emits a Software Bill of Materials (SBOM) alongside compiled artifacts. Similar to how Cargo emits split debug info or \"dep-info\" (.d) files, this change emits an SBOM in a Cargo-specific format alongside outputs in the target directory. External tooling or Cargo subcommands can consume this Cargo SBOM file and transform it into other SBOM formats such as SPDX or CycloneDX.</p>\n<p dir=\"auto\">Originally posted on internals as a <a href=\"https://internals.rust-lang.org/t/pre-rfc-cargo-sbom/19842\" rel=\"nofollow\">pre-RFC</a>, now moved to an RFC.</p>\n<p dir=\"auto\"><a href=\"https://github.com/arlosi/rfcs/blob/sbom/text/0000-cargo-sbom.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3553",
            "title": "RFC: cargo-sbom",
            "date_modified": "2024-02-18T00:48:23.000Z",
            "date_published": "2024-01-04T18:57:29.000Z",
            "author": {
                "name": "arlosi",
                "url": "https://github.com/arlosi"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/803701?u=ebadc7c37e0aea6c03a620fcdc9533ddf632e587&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Change the range operators <code class=\"notranslate\">a..b</code>, <code class=\"notranslate\">a..</code>, and <code class=\"notranslate\">a..=b</code> to resolve to new types <code class=\"notranslate\">ops::range::Range</code>, <code class=\"notranslate\">ops::range::RangeFrom</code>, and <code class=\"notranslate\">ops::range::RangeInclusive</code> in Edition 2024. These new types will not implement <code class=\"notranslate\">Iterator</code>, instead implementing <code class=\"notranslate\">Copy</code> and <code class=\"notranslate\">IntoIterator</code>.</p>\n<p dir=\"auto\"><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #2848.\">Closes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"548525650\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/2848\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rfcs/issues/2848/hovercard\" href=\"https://github.com/rust-lang/rfcs/issues/2848\">#2848</a></p>\n<p dir=\"auto\"><a href=\"https://internals.rust-lang.org/t/pre-rfc-fixing-range-by-2027/19936\" rel=\"nofollow\">Pre-RFC discussion on IRLO</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/pitaj/rfcs/blob/new-range/text/3550-new-range.md\">🖥️ Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3550",
            "title": "RFC: New range types for Edition 2024",
            "date_modified": "2024-02-16T00:36:15.000Z",
            "date_published": "2023-12-28T05:10:59.000Z",
            "author": {
                "name": "pitaj",
                "url": "https://github.com/pitaj"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/8980455?u=67104ddb0b6105cb807a4cfa7c052bd7cc29963b&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Allow type inference for <code class=\"notranslate\">const</code> or <code class=\"notranslate\">static</code> when the RHS is known.</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const PI = 3.1415; // inferred as f64\nstatic MESSAGE = &quot;Hello, World!&quot;; // inferred as &amp;'static str\nconst FN = std::string::String::default; // Inferred as the unnamable type of ZST closure associated with this item. Its type is reported by `type_name_of_val` as ::std::string::String::default\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-v\">PI</span> = <span class=\"pl-c1\">3.1415</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// inferred as f64</span>\n<span class=\"pl-k\">static</span> <span class=\"pl-v\">MESSAGE</span> = <span class=\"pl-s\">\"Hello, World!\"</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// inferred as &amp;'static str</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-v\">FN</span> = std<span class=\"pl-kos\">:</span><span class=\"pl-kos\">:</span>string<span class=\"pl-kos\">::</span><span class=\"pl-smi\">String</span><span class=\"pl-kos\">::</span><span class=\"pl-smi\">default</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// Inferred as the unnamable type of ZST closure associated with this item. Its type is reported by `type_name_of_val` as ::std::string::String::default</span></pre></div>\n<p dir=\"auto\">Pre-RFC discussion: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"114409804\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/1349\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rfcs/issues/1349/hovercard\" href=\"https://github.com/rust-lang/rfcs/issues/1349\">#1349</a></p>\n<p dir=\"auto\">cc <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"156003349\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/1623\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/1623/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/1623\">#1623</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/Neo-Zhixing/rfcs/blob/const_type_inference/text/0000-const-type-inference.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3546",
            "title": "RFC: Allow type inference for const or static",
            "date_modified": "2024-02-02T22:19:53.000Z",
            "date_published": "2023-12-21T12:19:16.000Z",
            "author": {
                "name": "Neo-Zhixing",
                "url": "https://github.com/Neo-Zhixing"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/136037?u=9c6024454f25b07e5b71b85fe88523197bdcf476&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC proposes to add support for the <code class=\"notranslate\">patchable-function-entry</code> family of flags and attributes from <code class=\"notranslate\">clang</code> and <code class=\"notranslate\">gcc</code> in order to support instrumentation and patching as done in the Linux kernel.</p>\n<p dir=\"auto\">I have a <a href=\"https://github.com/maurer/rust/tree/patchable-function-entries\">candidate implementation</a> and a <a href=\"https://github.com/rust-lang/compiler-team/issues/704\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/compiler-team/issues/704/hovercard\">MCP</a> to cover just the compiler flag.</p>\n<p dir=\"auto\"><a href=\"https://github.com/maurer/rust-rfcs/blob/patchable-function-entry/text/3543-patchable-function-entry.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3543",
            "title": "RFC: patchable-function-entry",
            "date_modified": "2024-02-12T15:05:08.000Z",
            "date_published": "2023-12-12T22:26:47.000Z",
            "author": {
                "name": "maurer",
                "url": "https://github.com/maurer"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/692896?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Pre-RFC Discussion: <a href=\"https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/PartialEq.2FEq.20for.20Closures.3F/near/399369137\" rel=\"nofollow\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/PartialEq.2FEq.20for.20Closures.3F/near/399369137</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/ColonelThirtyTwo/rfcs/blob/closure-eq/text/3538-closure-eq.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3538",
            "title": "Closure PartialEq and Eq",
            "date_modified": "2023-12-29T15:02:11.000Z",
            "date_published": "2023-12-07T01:16:39.000Z",
            "author": {
                "name": "ColonelThirtyTwo",
                "url": "https://github.com/ColonelThirtyTwo"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/60961?u=967a9ccc3f7dba0d5d3acd694e3cf81893defe96&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/epage/rfcs/blob/msrv/text/3537-msrv-resolver.md\">Rendered</a><br>\n<a href=\"https://github.com/rust-lang/rfcs/pull/3537#issuecomment-1899285501\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3537/hovercard\">FCP</a></p>\n<hr>\n<p dir=\"auto\"><em>taken from a <a href=\"https://github.com/rust-lang/rfcs/pull/3537#issuecomment-1889675810\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3537/hovercard\">post</a></em></p>\n<p dir=\"auto\">If the proposed resolver solution is still not to your liking, I would recommend focusing the discussion on (in priority order)</p>\n<ol dir=\"auto\">\n<li>Whether there are disagreements on the <a href=\"https://github.com/epage/rfcs/blob/msrv/text/3537-msrv-resolver.md#workflows\">core principles</a></li>\n<li>If agreement above, whether there is disagreement with the <a href=\"https://github.com/epage/rfcs/blob/msrv/text/3537-msrv-resolver.md#latest-rust-with-no-msrv\">evaluation of the workflows based on the above principles</a></li>\n<li>If agreement above, whether there is disagreement with the <a href=\"https://github.com/epage/rfcs/blob/msrv/text/3537-msrv-resolver.md#latest-rust-with-no-msrv\">workflow prioritization based on the above evaluation</a></li>\n<li>If agreement above, whether there is disagreement with the <a href=\"https://github.com/epage/rfcs/blob/msrv/text/3537-msrv-resolver.md#resolver-behavior\">evaluation of the solutions impact on the workflows, based on the principles</a></li>\n<li>If agreement above, whether there is disagreement with the <a href=\"https://github.com/epage/rfcs/blob/msrv/text/3537-msrv-resolver.md#resolver-behavior\">selected solution based on the evaluation</a></li>\n</ol>\n<p dir=\"auto\">In some cases, there is a need for a lot of digging in to understand concerns and use cases.  Asynchronous back and forth can be wearing.  I do host  <a href=\"https://github.com/rust-lang/cargo/wiki/Office-Hours\">Office Hours</a> for some synchronous communication.  If none of those times work, feel free to reach out to me on Zulip to see if we can find another time.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3537",
            "title": "RFC: Make Cargo respect minimum supported Rust version (MSRV) when selecting dependencies",
            "date_modified": "2024-02-16T20:56:46.000Z",
            "date_published": "2023-11-29T19:14:32.000Z",
            "author": {
                "name": "epage",
                "url": "https://github.com/epage"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/646128?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/jmillikin/upstream__rust-rfcs/blob/unsized-thin-pointers/text/3536-unsized-thin-pointers.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3536",
            "title": "RFC: Trait for `!Sized` thin pointers",
            "date_modified": "2023-12-23T09:07:54.000Z",
            "date_published": "2023-11-29T04:20:36.000Z",
            "author": {
                "name": "jmillikin",
                "url": "https://github.com/jmillikin"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/22198616?u=38fc398a34cdd9e77a0de8733826dc59e6cd5fb9&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Let's make it more elegant to conditionally compile tuple type declarations by allowing cfg-attributes directly on their element types.</p>\n<p dir=\"auto\"><a href=\"https://github.com/recatek/rfcs/blob/cfg-attribute-in-tuple-type/text/3532-cfg-attribute-in-tuple-type.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3532",
            "title": "RFC: Allow cfg-attributes on elements of tuple type declarations",
            "date_modified": "2023-12-03T17:13:30.000Z",
            "date_published": "2023-11-23T07:05:27.000Z",
            "author": {
                "name": "recatek",
                "url": "https://github.com/recatek"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/5751617?u=33b44cbfd337b51814048a70b4a0ba677d39a3b8&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h1 dir=\"auto\">Summary</h1>\n<p dir=\"auto\">This RFC proposes a syntactic sugar for delegating implementations of functions to other already implemented functions.</p>\n<p dir=\"auto\">There were two major delegation RFCs in the past, the first RFC in 2015 (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"121890018\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/1406\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/1406/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/1406\">#1406</a>) and the second one in 2018 (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"311919999\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/2393\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/2393/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/2393\">#2393</a>).</p>\n<p dir=\"auto\">The second RFC was postponed by the language team in 2021 (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"311919999\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/2393\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/2393/hovercard?comment_id=816822011&amp;comment_type=issue_comment\" href=\"https://github.com/rust-lang/rfcs/pull/2393#issuecomment-816822011\">#2393 (comment)</a>).<br>\nWe hope to revive that work again.</p>\n<p dir=\"auto\">How this proposal is different from the previous ones:</p>\n<ul dir=\"auto\">\n<li>This proposal follows the \"prototype first, finalized design later\" approach, so it's oriented towards compiler team as well, not just language team.<br>\nThe prototyping is already <a href=\"https://github.com/Bryanskiy/rust/tree/delegImpl\">in progress</a> and we are ready to provide resources for getting the feature to production quality if accepted.</li>\n<li>This proposal takes a more data driven approach, and builds the initial design on relatively detailed statistics about use of delegation-like patterns collected from code in the wild. The resulting design turns out closer in spirit to the<br>\n<a href=\"https://github.com/rust-lang/rfcs/pull/1406\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/1406/hovercard\">original proposal</a> by <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/contactomorph/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/contactomorph\">@contactomorph</a> than to later iterations.</li>\n</ul>\n<p dir=\"auto\">This proposal is also the subject of an experimental feature gate: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1997216698\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rust/issues/117978\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rust/pull/117978/hovercard\" href=\"https://github.com/rust-lang/rust/pull/117978\">rust-lang/rust#117978</a>.</p>\n<p dir=\"auto\"><a href=\"https://github.com/petrochenkov/rfcs/blob/delegation/text/0000-fn-delegation.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3530",
            "title": "Implement function delegation in rustc",
            "date_modified": "2023-12-05T22:56:34.000Z",
            "date_published": "2023-11-15T19:49:47.000Z",
            "author": {
                "name": "petrochenkov",
                "url": "https://github.com/petrochenkov"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/10580822?u=2905c8dd9367f6bf4ab8fc2cf62ae4acbb01786a&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Introduce shared base directories in Cargo configuration files that in turn enable base-relative path dependencies.</p>\n<p dir=\"auto\"><a href=\"https://github.com/dpaoliello/rfcs/blob/basepath/text/3529-cargo-path-bases.md\">Rendered</a></p>\n<p dir=\"auto\">Draft Implementation PR: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1993320171\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/cargo/issues/12974\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/cargo/pull/12974/hovercard\" href=\"https://github.com/rust-lang/cargo/pull/12974\">rust-lang/cargo#12974</a></p>\n<p dir=\"auto\">This is a resurrection of <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jonhoo/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jonhoo\">@jonhoo</a>'s RFC (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"804056819\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3074\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3074/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3074\">#3074</a>). Many thanks and kudos to him for the idea, original RFC text and <a href=\"https://github.com/rust-lang/cargo/pull/9144\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/cargo/pull/9144/hovercard\">original implementation</a>.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3529",
            "title": "Add named path bases to cargo (v2)",
            "date_modified": "2024-01-08T20:18:43.000Z",
            "date_published": "2023-11-14T00:43:04.000Z",
            "author": {
                "name": "dpaoliello",
                "url": "https://github.com/dpaoliello"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1940490?u=42777c8876d7b6591798df666a82057394b8b0c8&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Allow <code class=\"notranslate\">_</code> for the name of associated constants. This RFC builds on <a href=\"https://github.com/rust-lang/rfcs/pull/2526\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/2526/hovercard\">RFC 2526</a> which added support for free <code class=\"notranslate\">const</code> items with the name <code class=\"notranslate\">_</code>, but not associated consts.</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// RFC 2526 (stable in Rust 1.37)\nconst _: () = { /* ... */ };\n\nimpl Thing {\n    // this RFC\n    const _: () = { /* ... */ };\n}\"><pre class=\"notranslate\"><span class=\"pl-c\">// RFC 2526 (stable in Rust 1.37)</span>\n<span class=\"pl-k\">const</span> _<span class=\"pl-kos\">:</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> = <span class=\"pl-kos\">{</span> <span class=\"pl-c\">/* ... */</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">impl</span> <span class=\"pl-smi\">Thing</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c\">// this RFC</span>\n    <span class=\"pl-k\">const</span> _<span class=\"pl-kos\">:</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> = <span class=\"pl-kos\">{</span> <span class=\"pl-c\">/* ... */</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Constants named <code class=\"notranslate\">_</code> are not nameable by other code and do not appear in documentation, but are useful when macro-generated code must typecheck some expression in the context of a specific choice of <code class=\"notranslate\">Self</code>.</p>\n<p dir=\"auto\"><a href=\"https://github.com/dtolnay/rfcs/blob/assocunderscore/text/0000-associated-const-underscore.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3527",
            "title": "RFC: Associated const underscore",
            "date_modified": "2024-01-10T18:31:21.000Z",
            "date_published": "2023-11-12T20:53:33.000Z",
            "author": {
                "name": "dtolnay",
                "url": "https://github.com/dtolnay"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/38225716?u=83b61e79cd926e97b75668e0967f814fb91cd22d&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC proposes to forbid function -&gt; integer <code class=\"notranslate\">as</code> casts, since they have surprising aspects and are error prone.</p>\n<p dir=\"auto\"><a href=\"https://github.com/WaffleLapkin/rfcs/blob/forbidden-function-casts/text/3521-forbidden-function-casts.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3526",
            "title": " Add forbidden function casts RFC",
            "date_modified": "2024-01-22T19:00:29.000Z",
            "date_published": "2023-11-12T20:15:21.000Z",
            "author": {
                "name": "WaffleLapkin",
                "url": "https://github.com/WaffleLapkin"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/40109184?u=3b8c1fe0674113dbbb6d3a38f9a3efc70d2f5bb5&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/rust-lang/rfcs/blob/98a175fe69e26a242bca0c4e72a176f5c5e1f584/text/3525-struct-target-feature.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3525",
            "title": "Struct target features RFC",
            "date_modified": "2023-12-21T13:54:26.000Z",
            "date_published": "2023-11-12T14:09:10.000Z",
            "author": {
                "name": "sarah-ek",
                "url": "https://github.com/sarah-ek"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/145740?u=c075676a94db020428cf67bc832a006f1f9d8410&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This PR suggests small changes to the existing unstable \"aribtrary self types\" feature to make it more flexible. In particular, it suggests driving this feature from a new (ish) <code class=\"notranslate\">Receiver</code> trait instead of from <code class=\"notranslate\">Deref</code>, but to maintain compatibility by having a blanket implementation for all <code class=\"notranslate\">Deref</code> types.</p>\n<p dir=\"auto\">This is a squashed commit of many edits by various folks including <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Urhengulas/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Urhengulas\">@Urhengulas</a>, <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Veykril/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Veykril\">@Veykril</a> , <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/madsmtm/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/madsmtm\">@madsmtm</a> and myself. Thanks also to <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/davidhewitt/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/davidhewitt\">@davidhewitt</a>, <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Manishearth/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Manishearth\">@Manishearth</a> and many folks over on Zulip for feedback.</p>\n<p dir=\"auto\"><a href=\"https://github.com/adetaylor/rfcs/blob/arbitrary-self-types-v2/text/3519-arbitrary-self-types-v2.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3519",
            "title": "Arbitrary self types v2",
            "date_modified": "2024-02-16T15:26:01.000Z",
            "date_published": "2023-11-01T18:11:19.000Z",
            "author": {
                "name": "adetaylor",
                "url": "https://github.com/adetaylor"
            }
        }
    ]
}