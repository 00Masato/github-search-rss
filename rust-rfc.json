{
    "version": "https://jsonfeed.org/version/1",
    "title": "rust-lang/rfcs pr",
    "home_page_url": "https://00masato.github.io/github-search-rss/rust-rfc.json",
    "feed_url": "https://00masato.github.io/github-search-rss/rust-rfc.json",
    "description": "rust-lang/rfcs pr on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/141300?u=e222ed60f0855d57158dd20d3613f4db42b4236f&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/Turbo87/rust-rfcs/blob/crates-io-remove-dev-deps/text/3674-crates-io-remove-dev-deps.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3674",
            "title": "crates.io: Remove dev-dependencies from the index",
            "date_modified": "2024-07-31T13:21:31.000Z",
            "date_published": "2024-07-31T12:11:20.000Z",
            "author": {
                "name": "Turbo87",
                "url": "https://github.com/Turbo87"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/174509?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/shepmaster/rfcs/blob/aarch64-apple-darwin-tier-1/text/0000-promote-aarch64-apple-darwin-to-tier-1.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3671",
            "title": "Promote aarch64-apple-darwin to Tier 1",
            "date_modified": "2024-07-28T21:13:46.000Z",
            "date_published": "2024-07-09T16:02:22.000Z",
            "author": {
                "name": "shepmaster",
                "url": "https://github.com/shepmaster"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/3674314?u=196aca207002445372f3989bb4f72bf0de437665&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC adds an <code class=\"notranslate\">async</code> bound modifier to the <code class=\"notranslate\">Fn</code> family of trait bounds.  The combination desugars to a set of perma-unstable <code class=\"notranslate\">AsyncFn{,Mut,Once}</code> traits that parallel the current <code class=\"notranslate\">Fn{,Mut,Once}</code> traits.</p>\n<p dir=\"auto\">These traits give users the ability to express bounds for async callable types that are higher-ranked, and allow async closures to return futures which borrow from the closure's captures.</p>\n<p dir=\"auto\">This RFC also connects these traits to the <code class=\"notranslate\">async || {}</code> closure syntax, as originally laid out in <a href=\"https://rust-lang.github.io/rfcs/2394-async_await.html#async--closures\" rel=\"nofollow\">RFC 2394</a>, and confirms the necessity of a first-class async closure syntax.</p>\n<p dir=\"auto\"><a href=\"https://github.com/compiler-errors/rust-rfcs/blob/async-closure-redux/text/3668-async-closures.md\">Rendered</a></p>\n<p dir=\"auto\">For additional background, see this blog post (which is referenced in the RFC):</p>\n<ul dir=\"auto\">\n<li><a href=\"https://hackmd.io/@compiler-errors/async-closures\" rel=\"nofollow\">Async closures 2024-07-01</a></li>\n</ul>\n<p dir=\"auto\">Tracking:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"462983150\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rust/issues/62290\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/62290/hovercard\" href=\"https://github.com/rust-lang/rust/issues/62290\">rust-lang/rust#62290</a></li>\n</ul>",
            "url": "https://github.com/rust-lang/rfcs/pull/3668",
            "title": "Async closures",
            "date_modified": "2024-07-29T13:29:45.000Z",
            "date_published": "2024-07-01T21:44:59.000Z",
            "author": {
                "name": "compiler-errors",
                "url": "https://github.com/compiler-errors"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/162737?u=31a4f284889d0261a2b00e45af696e84dafb1488&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC extends Cargo's structured table form of features to include a <code class=\"notranslate\">deps</code><br>\nkey, to unambiguously specify packages the feature depends on without having to<br>\nuse the <code class=\"notranslate\">dep:foo</code> microformat.</p>\n<div class=\"highlight highlight-source-toml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"[features]\nmyfeature = { deps = [&quot;some-crate&quot;, &quot;another-crate&quot;] }\n# This is equivalent to `myfeature = [&quot;dep:some-crate&quot;, &quot;dep:another-crate&quot;]`\n# This can also be written in shorthand form:\nmyfeature.deps = [&quot;some-crate&quot;, &quot;another-crate&quot;]\"><pre class=\"notranslate\">[<span class=\"pl-en\">features</span>]\n<span class=\"pl-smi\">myfeature</span> = { <span class=\"pl-smi\">deps</span> = [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>some-crate<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>another-crate<span class=\"pl-pds\">\"</span></span>] }\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> This is equivalent to `myfeature = [\"dep:some-crate\", \"dep:another-crate\"]`</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> This can also be written in shorthand form:</span>\n<span class=\"pl-smi\">myfeature.deps</span> = [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>some-crate<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>another-crate<span class=\"pl-pds\">\"</span></span>]</pre></div>\n<p dir=\"auto\">This incremental RFC was inspired by the incremental, easier-to-review RFCs<br>\ncurrently being used for other individual pieces of the structured table format<br>\nfor features.</p>\n<p dir=\"auto\"><a href=\"https://github.com/joshtriplett/rfcs/blob/feature-deps/text/3663-feature-deps.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3663",
            "title": "Cargo structured syntax for feature dependencies on crates",
            "date_modified": "2024-06-28T20:56:06.000Z",
            "date_published": "2024-06-21T03:05:14.000Z",
            "author": {
                "name": "joshtriplett",
                "url": "https://github.com/joshtriplett"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19721361?u=9383d7fb7acb50acf57b84096363ae0b522d78ec&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC is to enable <a href=\"https://rust-lang.zulipchat.com/#narrow/stream/266220-t-rustdoc/topic/.22linking.22.20separate.20rustdoc.20outputs/near/434858884\" rel=\"nofollow\">merging</a> cross-crate information (like the search index, index.html, source files index) from separate output directories, so that rustdoc can run in parallel in non-cargo build systems.</p>\n<p dir=\"auto\"><a href=\"https://rustc-dev-guide.rust-lang.org/rustdoc.html#multiple-runs-same-output-directory\" rel=\"nofollow\">Currently</a>, rustdoc updates these cross-crate files with the information from a new crate by reading the old version, adding the information for the current crate, and writing the same file back. This causes issues in build systems that disallow multiple build actions targeting the same output files. Cargo supports cross-crate information because it doesn't have this restriction, <a href=\"https://buck2.build/docs/api/rules/#rust_library\" rel=\"nofollow\">Buck2</a> and <a href=\"https://bazelbuild.github.io/rules_rust/rust_doc.html\" rel=\"nofollow\">Bazel</a> do not support cross-crate information, and Fuchsia has a doc step that runs rustdoc serially on <a href=\"https://fuchsia-docs.firebaseapp.com/rust/rustdoc_index/\" rel=\"nofollow\">2700 crates</a>.</p>\n<p dir=\"auto\">Supporting parallel rustdoc with CCI as a native step in Buck2, <a href=\"https://github.com/bazelbuild/rules_rust/issues/1837\" data-hovercard-type=\"issue\" data-hovercard-url=\"/bazelbuild/rules_rust/issues/1837/hovercard\">Bazel</a>, and <a href=\"https://fuchsia.dev/fuchsia-src/development/build/build_system/intro\" rel=\"nofollow\">GN (Fuchsia + Chrome)</a> would require mergable cross-crate information, which is what this proposal is about. It adds new flags, <code class=\"notranslate\">--include-info-json</code>, <code class=\"notranslate\">--write-info-json</code>, <code class=\"notranslate\">--merge=none|read-write|write-only</code> and <code class=\"notranslate\">--include-rendered-docs</code>, to opt-in to these new features.</p>\n<p dir=\"auto\"><a href=\"https://github.com/EtomicBomb/rust-rfcs/blob/master/text/0000-mergeable-rustdoc-cross-crate-info.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3662",
            "title": "Mergeable rustdoc cross-crate info",
            "date_modified": "2024-07-31T05:31:16.000Z",
            "date_published": "2024-06-20T20:44:52.000Z",
            "author": {
                "name": "EtomicBomb",
                "url": "https://github.com/EtomicBomb"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/141300?u=e222ed60f0855d57158dd20d3613f4db42b4236f&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/Turbo87/rust-rfcs/blob/crates-io/crate-deletions/text/3660-crates-io-crate-deletions.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3660",
            "title": "crates.io: Crate Deletions",
            "date_modified": "2024-07-31T12:13:47.000Z",
            "date_published": "2024-06-20T10:55:21.000Z",
            "author": {
                "name": "Turbo87",
                "url": "https://github.com/Turbo87"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/15850505?u=064c10efd2d57ae0bb9d53c6d97ea0a8e550c2a6&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Primitive representations on enums now accept type aliases, meaning that in addition to primitives like <code class=\"notranslate\">#[repr(u32)]</code>, <code class=\"notranslate\">#[repr(tag = core::ffi::c_int)]</code> and <code class=\"notranslate\">#[repr(tag = my_type)]</code> are now accepted.</p>\n<p dir=\"auto\">Internals discussion: <a href=\"https://internals.rust-lang.org/t/pre-rfc-type-aliases-in-repr/20956\" rel=\"nofollow\">https://internals.rust-lang.org/t/pre-rfc-type-aliases-in-repr/20956</a><br>\nLast comment on RFC under first version (<code class=\"notranslate\">self::</code>): <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2354411818\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3659\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3659/hovercard?comment_id=2171268028&amp;comment_type=issue_comment\" href=\"https://github.com/rust-lang/rfcs/pull/3659#issuecomment-2171268028\">#3659 (comment)</a><br>\nLast comment on RFC under second version (<code class=\"notranslate\">type = ...</code>): <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2354411818\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3659\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3659/hovercard?comment_id=2181588275&amp;comment_type=issue_comment\" href=\"https://github.com/rust-lang/rfcs/pull/3659#issuecomment-2181588275\">#3659 (comment)</a><br>\nLast comment on RFC under third version (<code class=\"notranslate\">discriminant = …</code>): <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2354411818\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3659\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3659/hovercard?comment_id=2221105082&amp;comment_type=issue_comment\" href=\"https://github.com/rust-lang/rfcs/pull/3659#issuecomment-2221105082\">#3659 (comment)</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/clarfonthey/rust-rfcs/blob/repr-type-aliases/text/0000-repr-type-aliases.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3659",
            "title": "`repr(tag = ...)` for type aliases",
            "date_modified": "2024-07-25T06:32:04.000Z",
            "date_published": "2024-06-15T02:14:21.000Z",
            "author": {
                "name": "clarfonthey",
                "url": "https://github.com/clarfonthey"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/13724985?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC proposes optional names for repetition groups in macros:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"macro_rules! foo {\n    ( $group1( $a:ident ),+ ) =&gt; {\n        $group1( println!(&quot;{}&quot;, $a); )+\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">macro_rules!</span> foo <span class=\"pl-kos\">{</span>\n    <span class=\"pl-kos\">(</span> $group1<span class=\"pl-kos\">(</span> $a<span class=\"pl-kos\">:</span>ident <span class=\"pl-kos\">)</span>,+ <span class=\"pl-kos\">)</span> =&gt; <span class=\"pl-kos\">{</span>\n        $group1<span class=\"pl-kos\">(</span> println!<span class=\"pl-kos\">(</span><span class=\"pl-s\">\"{}\"</span>, $a<span class=\"pl-kos\">)</span>; <span class=\"pl-kos\">)</span>+\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\"><a href=\"https://github.com/tgross35/rfcs/blob/macros-named-capture-groups/text/3649-macros-named-capture-groups.md\">Rendered</a></p>\n<p dir=\"auto\">Small Pre-RFC: <a href=\"https://internals.rust-lang.org/t/pre-rfc-named-capture-groups-for-macros/20883\" rel=\"nofollow\">https://internals.rust-lang.org/t/pre-rfc-named-capture-groups-for-macros/20883</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3649",
            "title": "[RFC] Named macro capture groups",
            "date_modified": "2024-07-11T19:01:45.000Z",
            "date_published": "2024-05-29T00:37:05.000Z",
            "author": {
                "name": "tgross35",
                "url": "https://github.com/tgross35"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/278509?u=f17ebaaae490d5f66760b62f162c2f142c7fc37d&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">An alternative proposal to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2289380504\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3632\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3632/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3632\">#3632</a>.</p>\n<p dir=\"auto\"><a href=\"https://github.com/Amanieu/rfcs/blob/extern-impl-trait/text/0000-externally-implementable-traits.md\">Rendered</a></p>\n<p dir=\"auto\">Tracking:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2311212266\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rust/issues/125418\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/125418/hovercard\" href=\"https://github.com/rust-lang/rust/issues/125418\">rust-lang/rust#125418</a></li>\n</ul>",
            "url": "https://github.com/rust-lang/rfcs/pull/3645",
            "title": "Externally implementable traits",
            "date_modified": "2024-06-03T02:31:06.000Z",
            "date_published": "2024-05-22T21:40:35.000Z",
            "author": {
                "name": "Amanieu",
                "url": "https://github.com/Amanieu"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/82710122?u=4f85864b2506072006121bb5cd66ebb5228f2922&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h1 dir=\"auto\">Summary</h1>\n<p dir=\"auto\">Add <code class=\"notranslate\">[diagnostic::on_unimplemented_trait_use]</code> in <code class=\"notranslate\">#[diagnostic]</code> on structs that will influence error messages emitted by unsatisfied traits bounds.</p>\n<h1 dir=\"auto\">Motivation</h1>\n<p dir=\"auto\">The idea came about when I was trying to print out a PathBuf, there's a custom message that said:</p>\n<blockquote>\n<p dir=\"auto\">in format strings you may be able to use <code class=\"notranslate\">{:?}</code> (or {:#?} for pretty-print) instead<br>\ncall <code class=\"notranslate\">.display()</code> or <code class=\"notranslate\">.to_string_lossy()</code> to safely print paths, as they may contain non-Unicode data</p>\n</blockquote>\n<p dir=\"auto\">And found out its hardcoded in trait <code class=\"notranslate\">Display</code></p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"#[rustc_on_unimplemented(\n    on(\n        any(_Self = &quot;std::path::Path&quot;, _Self = &quot;std::path::PathBuf&quot;),\n        label = &quot;`{Self}` cannot be formatted with the default formatter; call `.display()` on it&quot;,\n        note = &quot;call `.display()` or `.to_string_lossy()` to safely print paths, \\\n                as they may contain non-Unicode data&quot;\n    ),\n    message = &quot;`{Self}` doesn't implement `{Display}`&quot;,\n    label = &quot;`{Self}` cannot be formatted with the default formatter&quot;,\n    note = &quot;in format strings you may be able to use `{{:?}}` (or {{:#?}} for pretty-print) instead&quot;\n)]\npub trait Display {...}\"><pre class=\"notranslate\"><span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>rustc_on_unimplemented<span class=\"pl-kos\">(</span></span>\n<span class=\"pl-c1\">    on<span class=\"pl-kos\">(</span></span>\n<span class=\"pl-c1\">        any<span class=\"pl-kos\">(</span>_Self = <span class=\"pl-s\">\"std::path::Path\"</span>, _Self = <span class=\"pl-s\">\"std::path::PathBuf\"</span><span class=\"pl-kos\">)</span>,</span>\n<span class=\"pl-c1\">        label = <span class=\"pl-s\">\"`{Self}` cannot be formatted with the default formatter; call `.display()` on it\"</span>,</span>\n<span class=\"pl-c1\">        note = <span class=\"pl-s\">\"call `.display()` or `.to_string_lossy()` to safely print paths, <span class=\"pl-cce\">\\</span></span></span>\n<span class=\"pl-c1\"><span class=\"pl-s\"><span class=\"pl-cce\"></span>                as they may contain non-Unicode data\"</span></span>\n<span class=\"pl-c1\">    <span class=\"pl-kos\">)</span>,</span>\n<span class=\"pl-c1\">    message = <span class=\"pl-s\">\"`{Self}` doesn't implement `{Display}`\"</span>,</span>\n<span class=\"pl-c1\">    label = <span class=\"pl-s\">\"`{Self}` cannot be formatted with the default formatter\"</span>,</span>\n<span class=\"pl-c1\">    note = <span class=\"pl-s\">\"in format strings you may be able to use `{{:?}}` (or {{:#?}} for pretty-print) instead\"</span></span>\n<span class=\"pl-c1\"><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n<span class=\"pl-k\">pub</span> <span class=\"pl-k\">trait</span> <span class=\"pl-smi\">Display</span> <span class=\"pl-kos\">{</span>...<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">It would be nice if this functionality is exposed to libraries as well, so that when the user tries to use an unimplemented trait (e.g. maybe Display isn't implemented because it's insufficient to clearly express intentions) the author can explain why via this diagnostic and offer a recommendation/alternative.</p>\n<p dir=\"auto\">For example:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"#[diagnostic::on_unimplemented_trait_use(\n    trait = Display,\n    message = &quot;`{Self}` doesn't implement `{Display}`&quot;,\n    label = &quot;`{Self}` cannot be formatted with the default formatter; call `.display()` on it&quot;,\n    note = &quot;call `.display()` or `.to_string_lossy()` to safely print paths, \\\n                as they may contain non-Unicode data&quot;\n)]\nstruct PathBuf;\"><pre class=\"notranslate\"><span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>diagnostic<span class=\"pl-kos\">::</span>on_unimplemented_trait_use<span class=\"pl-kos\">(</span></span>\n<span class=\"pl-c1\">    <span class=\"pl-k\">trait</span> = <span class=\"pl-v\">Display</span>,</span>\n<span class=\"pl-c1\">    message = <span class=\"pl-s\">\"`{Self}` doesn't implement `{Display}`\"</span>,</span>\n<span class=\"pl-c1\">    label = <span class=\"pl-s\">\"`{Self}` cannot be formatted with the default formatter; call `.display()` on it\"</span>,</span>\n<span class=\"pl-c1\">    note = <span class=\"pl-s\">\"call `.display()` or `.to_string_lossy()` to safely print paths, <span class=\"pl-cce\">\\</span></span></span>\n<span class=\"pl-c1\"><span class=\"pl-s\"><span class=\"pl-cce\"></span>                as they may contain non-Unicode data\"</span></span>\n<span class=\"pl-c1\"><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n<span class=\"pl-k\">struct</span> <span class=\"pl-smi\">PathBuf</span><span class=\"pl-kos\">;</span></pre></div>\n<h1 dir=\"auto\">Unresolved questions</h1>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\">  <a href=\"https://github.com/rust-lang/rfcs/pull/3643#pullrequestreview-2075066492\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3643/hovercard\">syntax for generic traits</a></li>\n</ul>",
            "url": "https://github.com/rust-lang/rfcs/pull/3643",
            "title": "[RFC] On_unimplemented_trait_use",
            "date_modified": "2024-07-25T01:59:28.000Z",
            "date_published": "2024-05-22T15:42:05.000Z",
            "author": {
                "name": "B-2U",
                "url": "https://github.com/B-2U"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/783247?u=b4f1eeea8dd687c853f13caa8e40eced78c65cf1&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/m-ou-se/rfcs/blob/thread-spawn-hook/text/3642-thread-spawn-hook.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3642",
            "title": "[RFC] Thread spawn hook (inheriting thread locals)",
            "date_modified": "2024-06-11T16:10:30.000Z",
            "date_published": "2024-05-22T11:53:15.000Z",
            "author": {
                "name": "m-ou-se",
                "url": "https://github.com/m-ou-se"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/27697325?u=c25b1d3eb895997576e1578a950b62a1e4644f7f&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC adds an attribute that allows specifying the ordinal of an exported function when creating cdylibs on windows.</p>\n<p dir=\"auto\">We already have a <a href=\"https://doc.rust-lang.org/reference/items/external-blocks.html#the-link_ordinal-attribute\" rel=\"nofollow\"><code class=\"notranslate\">#[link_ordinal(n)]</code></a> attribute which allows importing functions from DLLs by its ordinal, but we don't have any way of doing the opposite - specifying the ordinal of a function when we're making our own DLLs.</p>\n<p dir=\"auto\">Currently, you need to create a <code class=\"notranslate\">lib.def</code> file and specify the ordinals, and then link it with <code class=\"notranslate\">cargo:rustc-cdylib-link-arg=/DEF</code>.</p>\n<p dir=\"auto\">The biggest downside of the current method is that once you specify a <code class=\"notranslate\">.def</code> file, you will have to specify an ordinal for every function that you want to export from the DLL, or else it won't be present in the generated <code class=\"notranslate\">.lib</code> file. This can become very overwhelming if you have a lot of exported functions.</p>\n<p dir=\"auto\">This RFC would allow you to specify exported function ordinals like so:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// Export this function at Ordinal 1\n#[no_mangle]\n#[export_ordinal(1)]\npub extern &quot;C&quot; fn hello() {\n\tprintln!(&quot;Hello, World!&quot;);\n}\"><pre class=\"notranslate\"><span class=\"pl-c\">// Export this function at Ordinal 1</span>\n<span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>no_mangle<span class=\"pl-kos\">]</span></span>\n<span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>export_ordinal<span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n<span class=\"pl-k\">pub</span> <span class=\"pl-k\">extern</span> <span class=\"pl-s\">\"C\"</span> <span class=\"pl-k\">fn</span> <span class=\"pl-en\">hello</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t<span class=\"pl-en\">println</span><span class=\"pl-en\">!</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Hello, World!\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\"><a href=\"https://github.com/MeguminSama/rfcs/blob/export-function-ordinals/text/3641-export-function-ordinals.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3641",
            "title": "[RFC] Add `#[export_ordinal(n)]` attribute",
            "date_modified": "2024-07-30T12:59:00.000Z",
            "date_published": "2024-05-20T20:54:35.000Z",
            "author": {
                "name": "MeguminSama",
                "url": "https://github.com/MeguminSama"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1606434?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><code class=\"notranslate\">#[diagnostic::blocking]</code> is a marker attribute for functions that are considered (by their author) to be a blocking operation, and as such shouldn't be invoked from an <code class=\"notranslate\">async</code> function. <code class=\"notranslate\">rustc</code>, <code class=\"notranslate\">clippy</code> and other tools can use this signal to lint against calling these functions in <code class=\"notranslate\">async</code> contexts.</p>\n<p dir=\"auto\">It would allow <code class=\"notranslate\">rustc</code>, <code class=\"notranslate\">clippy</code> and other tools to provide lints like</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"warning: async function `foo` can block\n  --&gt; $DIR/blocking-calls-in-async.rs:28:1\n   |\n28 | async fn foo() {\n   | --------------\n29 |     interesting();\n   |     ^^^^^^^^^^^^^`foo` is determined to block because it calls into `interesting`\n   |\nnote: `interesting` is considered to be blocking because it was explicitly marked as such\n  --&gt; $DIR/blocking-calls-in-async.rs:5:1\n   |\n5  | #[diagnostic::blocking]\n   | ^^^^^^^^^^^^^^^^^^^^^^^\n6  | fn interesting() {}\n   | ----------------\"><pre class=\"notranslate\"><code class=\"notranslate\">warning: async function `foo` can block\n  --&gt; $DIR/blocking-calls-in-async.rs:28:1\n   |\n28 | async fn foo() {\n   | --------------\n29 |     interesting();\n   |     ^^^^^^^^^^^^^`foo` is determined to block because it calls into `interesting`\n   |\nnote: `interesting` is considered to be blocking because it was explicitly marked as such\n  --&gt; $DIR/blocking-calls-in-async.rs:5:1\n   |\n5  | #[diagnostic::blocking]\n   | ^^^^^^^^^^^^^^^^^^^^^^^\n6  | fn interesting() {}\n   | ----------------\n</code></pre></div>\n<p dir=\"auto\"><a href=\"https://github.com/estebank/rfcs/blob/diagnostic-blocking/text/3639-diagnostic-blocking.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3639",
            "title": "[RFC] Add `#[diagnostic::blocking]` attribute",
            "date_modified": "2024-07-17T01:39:09.000Z",
            "date_published": "2024-05-17T18:41:40.000Z",
            "author": {
                "name": "estebank",
                "url": "https://github.com/estebank"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19580458?u=1884c67cfdf07c9cdcd4edbe3532aa770aba55af&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/max-niederman/rust-rfcs/blob/guard-patterns/text/3637-guard-patterns.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3637",
            "title": "Guard Patterns",
            "date_modified": "2024-07-20T11:54:34.000Z",
            "date_published": "2024-05-15T07:03:42.000Z",
            "author": {
                "name": "max-niederman",
                "url": "https://github.com/max-niederman"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/783247?u=b4f1eeea8dd687c853f13caa8e40eced78c65cf1&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This is an alternative to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2289380504\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3632\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3632/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3632\">#3632</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/m-ou-se/rfcs/blob/extern-static/text/0000-externally-definable-statics.md\">Rendered</a></p>\n<p dir=\"auto\">Tracking:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2311212266\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rust/issues/125418\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/125418/hovercard\" href=\"https://github.com/rust-lang/rust/issues/125418\">rust-lang/rust#125418</a></li>\n</ul>",
            "url": "https://github.com/rust-lang/rfcs/pull/3635",
            "title": "[RFC] externally definable statics",
            "date_modified": "2024-05-23T10:24:48.000Z",
            "date_published": "2024-05-13T13:49:36.000Z",
            "author": {
                "name": "m-ou-se",
                "url": "https://github.com/m-ou-se"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/6801863?u=699ef806e3d9624167be89db3c7217df5193775e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/p-avital/rfcs/blob/stabilize-marker-freeze/text/0000-stabilize-marker-freeze.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3633",
            "title": "[RFC] `core::marker::Freeze` in bounds",
            "date_modified": "2024-07-28T08:52:05.000Z",
            "date_published": "2024-05-10T17:00:40.000Z",
            "author": {
                "name": "p-avital",
                "url": "https://github.com/p-avital"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/783247?u=b4f1eeea8dd687c853f13caa8e40eced78c65cf1&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">An alternative to this is <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2292887865\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3635\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3635/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3635\">#3635</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/m-ou-se/rfcs/blob/extern-impl-fn/text/0000-externally-implementable-functions.md\">Rendered</a></p>\n<p dir=\"auto\">Tracking:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2311212266\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rust/issues/125418\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/125418/hovercard\" href=\"https://github.com/rust-lang/rust/issues/125418\">rust-lang/rust#125418</a></li>\n</ul>",
            "url": "https://github.com/rust-lang/rfcs/pull/3632",
            "title": "[RFC] externally implementable functions",
            "date_modified": "2024-06-10T03:49:22.000Z",
            "date_published": "2024-05-10T09:40:13.000Z",
            "author": {
                "name": "m-ou-se",
                "url": "https://github.com/m-ou-se"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/3050060?u=6ca85464b07c5464a052250a4fc3e3f9c03c97ed&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/rust-lang/rust/issues/43781\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/43781/hovercard\">tracking issue</a></p>\n<p dir=\"auto\">cc @rust-lang/rustdoc</p>\n<p dir=\"auto\"><a href=\"https://github.com/GuillaumeGomez/rfcs/blob/doc-cfg/text/000-rustdoc-cfgs-handling.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3631",
            "title": "RFC for doc_cfg, doc_cfg_auto, doc_cfg_hide and doc_cfg_show features",
            "date_modified": "2024-07-04T13:18:01.000Z",
            "date_published": "2024-05-09T14:08:45.000Z",
            "author": {
                "name": "GuillaumeGomez",
                "url": "https://github.com/GuillaumeGomez"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/162737?u=31a4f284889d0261a2b00e45af696e84dafb1488&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Co-authored-by: Eric Holk</p>\n<p dir=\"auto\"><a href=\"https://github.com/joshtriplett/rfcs/blob/fn-body-blocks/text/3629-fn-body-blocks.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3629",
            "title": "Function body blocks",
            "date_modified": "2024-05-16T02:20:15.000Z",
            "date_published": "2024-05-07T08:42:43.000Z",
            "author": {
                "name": "joshtriplett",
                "url": "https://github.com/joshtriplett"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/162737?u=31a4f284889d0261a2b00e45af696e84dafb1488&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Allow the syntax <code class=\"notranslate\">async T</code> and <code class=\"notranslate\">gen T</code> as types, equivalent to<br>\n<code class=\"notranslate\">impl Future&lt;Output = T&gt;</code> and <code class=\"notranslate\">impl Iterator&lt;Item = T&gt;</code> respectively. Accept<br>\nthem anywhere <code class=\"notranslate\">impl Trait</code> can appear.</p>\n<p dir=\"auto\">This RFC was inspired by a few different needs.</p>\n<p dir=\"auto\">First, writing large numbers of functions that manipulate iterators or futures.<br>\nHaving a shorthand for the type makes function signatures much clearer.</p>\n<p dir=\"auto\">And second, providing one part of a general solution that gives people the<br>\nbenefits of <code class=\"notranslate\">async fn</code> in all contexts, and for new constructs like <code class=\"notranslate\">gen</code>.</p>\n<p dir=\"auto\">Co-authored-by: Eric Holk</p>\n<p dir=\"auto\"><a href=\"https://github.com/joshtriplett/rfcs/blob/async-gen-types/text/3628-async-gen-types.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3628",
            "title": "`async T` and `gen T` types",
            "date_modified": "2024-07-19T22:41:16.000Z",
            "date_published": "2024-05-07T08:33:00.000Z",
            "author": {
                "name": "joshtriplett",
                "url": "https://github.com/joshtriplett"
            }
        }
    ]
}