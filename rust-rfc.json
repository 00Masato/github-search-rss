{
    "version": "https://jsonfeed.org/version/1",
    "title": "rust-lang/rfcs pr",
    "home_page_url": "https://00masato.github.io/github-search-rss/rust-rfc.json",
    "feed_url": "https://00masato.github.io/github-search-rss/rust-rfc.json",
    "description": "rust-lang/rfcs pr on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/116025916?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC outlines the case for promoting the Rust riscv64gc-unknown-linux-gnu target to Tier-1 (without host tools) status.</p>\n<p dir=\"auto\">Shout out to <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Hoverbear/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Hoverbear\">@Hoverbear</a>, <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/danielsilverstone-ct/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/danielsilverstone-ct\">@danielsilverstone-ct</a> for their support.</p>\n<p dir=\"auto\"><a href=\"https://github.com/robin-randhawa-sifive/rust-lang-rfcs/blob/promote-riscv64-unknown-linux-gnu-to-tier1-without-host-tools/text/0000-promote-riscv64gc-unknown-linux-gnu-to-tier1-without-host-tools.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3707",
            "title": "RFC: Promote riscv64gc-unknown-linux-gnu to Tier-1 (without host tools)",
            "date_modified": "2024-10-04T06:27:53.000Z",
            "date_published": "2024-10-03T13:31:03.000Z",
            "author": {
                "name": "robin-randhawa-sifive",
                "url": "https://github.com/robin-randhawa-sifive"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/20380519?u=88c4d0c68f360b28788a6923ba70d8b2a08ca96d&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC proposes <code class=\"notranslate\">Result::todo</code> and <code class=\"notranslate\">Option::todo</code> functions which work like <code class=\"notranslate\">.unwrap()</code> but imply that error handling should be implemented later.</p>\n<p dir=\"auto\">As an example:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// unwrap is still used for cases where you *actually* want to panic-on-err\nTcpListener::bind(&amp;addr).unwrap();\n\n// we're panicking because error handling is not implemented yet.\n// this use case is common in prototype applications.\nlet int: i32 = input.parse().todo();\nlet arg2 = std::env::args().nth(2).todo();\nlet file_content = fs::read(&quot;file.txt&quot;).todo();\"><pre class=\"notranslate\"><span class=\"pl-c\">// unwrap is still used for cases where you *actually* want to panic-on-err</span>\n<span class=\"pl-smi\">TcpListener</span><span class=\"pl-kos\">::</span><span class=\"pl-en\">bind</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span>addr<span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">unwrap</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// we're panicking because error handling is not implemented yet.</span>\n<span class=\"pl-c\">// this use case is common in prototype applications.</span>\n<span class=\"pl-k\">let</span> int<span class=\"pl-kos\">:</span> <span class=\"pl-smi\">i32</span> = input<span class=\"pl-kos\">.</span><span class=\"pl-en\">parse</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">todo</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">let</span> arg2 = std<span class=\"pl-kos\">::</span>env<span class=\"pl-kos\">::</span><span class=\"pl-en\">args</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">nth</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">todo</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">let</span> file_content = fs<span class=\"pl-kos\">::</span><span class=\"pl-en\">read</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"file.txt\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">todo</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">n.b. The initial version of this RFC also proposed <code class=\"notranslate\">.unreachable()</code>. Upon more thought and some feedback I've decided that <code class=\"notranslate\">.unreachable()</code> isn't ideal -- It is easily emulated with <code class=\"notranslate\">.expect(\"reason for why error cannot happen\")</code>. Attaching <code class=\"notranslate\">.unreachable()</code> onto this RFC drags it down quite a bit. I think <code class=\"notranslate\">.todo()</code> is a strong improvement to Rust, but I can't think a strong case for <code class=\"notranslate\">.unreachable()</code>.</p>\n<hr>\n<p dir=\"auto\"><a href=\"https://github.com/zkrising/rfcs/blob/semantic-unwraps/text/3706-option-result-todo.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3706",
            "title": "[RFC] Add `Option::todo` and `Result::todo`",
            "date_modified": "2024-10-04T12:45:37.000Z",
            "date_published": "2024-10-03T12:03:39.000Z",
            "author": {
                "name": "zkrising",
                "url": "https://github.com/zkrising"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/18526288?u=a851e2ec349404d3ad63a62786fe9a35009fa8d1&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">We have <code class=\"notranslate\">From</code> for infallible, <code class=\"notranslate\">TryFrom</code> for checked, and this proposes <code class=\"notranslate\">WrappingFrom</code> for modular conversions.</p>\n<p dir=\"auto\"><a href=\"https://github.com/scottmcm/rfcs/blob/wrapping-from/text/3703-wrapping-from.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3703",
            "title": "`num::WrappingFrom` trait for conversions between integers",
            "date_modified": "2024-10-04T10:19:00.000Z",
            "date_published": "2024-10-01T05:08:31.000Z",
            "author": {
                "name": "scottmcm",
                "url": "https://github.com/scottmcm"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/25405190?u=64314ab5744b9926919e515a477872955c6562ce&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Add helper methods on primitive pointer types to facilitate getting and setting the tag of a pointer.<br>\nIntended to work with programs that make use of architecture features such as AArch64<br>\nTop-Byte Ignore (TBI), the primary use-case being writing tagging memory allocators.</p>\n<p dir=\"auto\"><a href=\"https://github.com/mrkajetanp/rfcs/blob/ptr-tag-helpers/text/3700-ptr-tag-helpers.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3700",
            "title": "Add helper methods on primitive pointer types for pointer tagging",
            "date_modified": "2024-09-29T18:16:45.000Z",
            "date_published": "2024-09-26T14:49:36.000Z",
            "author": {
                "name": "mrkajetanp",
                "url": "https://github.com/mrkajetanp"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/162737?u=31a4f284889d0261a2b00e45af696e84dafb1488&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Many crates support deriving their traits with <code class=\"notranslate\">derive(Trait)</code>. Today, this<br>\nrequires defining proc macros, in a separate crate, typically with several<br>\nadditional dependencies adding substantial compilation time, and typically<br>\nguarded by a feature that users need to remember to enable.</p>\n<p dir=\"auto\">However, many common cases of derives don't require any more power than an<br>\nordinary <code class=\"notranslate\">macro_rules!</code> macro. Supporting these common cases would allow many<br>\ncrates to avoid defining proc macros, reduce dependencies and compilation time,<br>\nand provide these macros unconditionally without requiring the user to enable a<br>\nfeature.</p>\n<p dir=\"auto\">I've reviewed several existing proc-macro-based derives in the ecosystem, and<br>\nit appears that many would be able to use this feature to avoid needing proc<br>\nmacros at all.</p>\n<p dir=\"auto\"><a href=\"https://github.com/joshtriplett/rfcs/blob/declarative-derive-macros/text/3698-declarative-derive-macros.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3698",
            "title": "Declarative `macro_rules!` derive macros",
            "date_modified": "2024-10-04T06:38:42.000Z",
            "date_published": "2024-09-21T01:51:14.000Z",
            "author": {
                "name": "joshtriplett",
                "url": "https://github.com/joshtriplett"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/162737?u=31a4f284889d0261a2b00e45af696e84dafb1488&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Many crates provide attribute macros. Today, this requires defining proc<br>\nmacros, in a separate crate, typically with several additional dependencies<br>\nadding substantial compilation time, and typically guarded by a feature that<br>\nusers need to remember to enable.</p>\n<p dir=\"auto\">However, many common cases of attribute macros don't require any more power<br>\nthan an ordinary <code class=\"notranslate\">macro_rules!</code> macro. Supporting these common cases would<br>\nallow many crates to avoid defining proc macros, reduce dependencies and<br>\ncompilation time, and provide these macros unconditionally without requiring a<br>\nthe user to enable a feature.</p>\n<p dir=\"auto\">I've reviewed several existing proc-macro-based attributes in the ecosystem,<br>\nand it appears that many would be able to use this feature to avoid needing<br>\nproc macros at all.</p>\n<p dir=\"auto\"><a href=\"https://github.com/joshtriplett/rfcs/blob/declarative-attribute-macros.md/text/3697-declarative-attribute-macros.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3697",
            "title": "Declarative `macro_rules!` attribute macros",
            "date_modified": "2024-10-02T17:14:08.000Z",
            "date_published": "2024-09-21T01:15:27.000Z",
            "author": {
                "name": "joshtriplett",
                "url": "https://github.com/joshtriplett"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/3757567?u=da6a6ffd479943d5ba42f5652320c26aa649ca18&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">As discussed <a href=\"https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/--print.20std-support\" rel=\"nofollow\">on Zulip</a>, this RFC proposes adding a new argument for <code class=\"notranslate\">rustc --print</code> that acts as the single source of truth for whether a target supports std.</p>\n<p dir=\"auto\"><a href=\"https://github.com/adamgemmell/rfcs/blob/dev/adagem01/std-supported/text/3693-print-std-support.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3693",
            "title": "Expose std support via --print",
            "date_modified": "2024-09-24T12:37:47.000Z",
            "date_published": "2024-09-12T15:59:32.000Z",
            "author": {
                "name": "adamgemmell",
                "url": "https://github.com/adamgemmell"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/60961?u=967a9ccc3f7dba0d5d3acd694e3cf81893defe96&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This adds <code class=\"notranslate\">resolver.feature-unification</code> to <code class=\"notranslate\">.cargo/config.toml</code> to allow workspace unfication (cargo-workspace-hack) or per-package unification (<code class=\"notranslate\">cargo hack</code>).</p>\n<p dir=\"auto\"><a href=\"https://github.com/epage/rfcs/blob/feature-unification/text/3692-feature-unification.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3692",
            "title": "RFC: Give users control over feature unification",
            "date_modified": "2024-10-04T07:32:41.000Z",
            "date_published": "2024-09-11T22:22:19.000Z",
            "author": {
                "name": "epage",
                "url": "https://github.com/epage"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/20070360?u=c5051b99b45e27910ed27f9b2145cd90e8c3d717&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">/cc @rust-lang/crates-io</p>\n<p dir=\"auto\">A big thank you to <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/woodruffw/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/woodruffw\">@woodruffw</a> for co-authoring, providing prior art through PyPi's implementation, and all of the expert advice. 🙏</p>\n<p dir=\"auto\"><a href=\"https://github.com/mdtro/rfcs/blob/mdtro/trusted-publishing-cratesio/text/3691-trusted-publishing-cratesio.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3691",
            "title": "Trusted Publishing Support on Crates.io",
            "date_modified": "2024-09-22T22:06:27.000Z",
            "date_published": "2024-09-10T17:35:19.000Z",
            "author": {
                "name": "mdtro",
                "url": "https://github.com/mdtro"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/15850505?u=064c10efd2d57ae0bb9d53c6d97ea0a8e550c2a6&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h2 dir=\"auto\">Summary</h2>\n<p dir=\"auto\">Adds the builtin types <code class=\"notranslate\">u&lt;N&gt;</code> and <code class=\"notranslate\">i&lt;N&gt;</code>, allowing integers with an arbitrary size in bits.</p>\n<p dir=\"auto\"><a href=\"https://github.com/clarfonthey/rust-rfcs/blob/generic-integers-v2/text/0000-generic-integers.md\">Rendered</a></p>\n<h2 dir=\"auto\">Details</h2>\n<p dir=\"auto\">This is a follow-up to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"374716653\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/2581\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/2581/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/2581\">#2581</a>, which was previously postponed. A lot has happened since then, and there has been general support for this change from a lot of different people. It's time.</p>\n<p dir=\"auto\">There are a few key differences from the previous RFC, but I trust that you can read.</p>\n<h2 dir=\"auto\">Thanks</h2>\n<p dir=\"auto\">Thank you to everyone who responded to the <a href=\"https://internals.rust-lang.org/t/pre-rfc-generic-integers-v2/21326\" rel=\"nofollow\">pre-RFC</a> on Internals with feedback.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3686",
            "title": "Generic Integers V2: It's Time",
            "date_modified": "2024-10-04T12:46:45.000Z",
            "date_published": "2024-09-01T19:36:15.000Z",
            "author": {
                "name": "clarfonthey",
                "url": "https://github.com/clarfonthey"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1606434?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Support the following:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"#[derive(Default)]\nenum Foo {\n    #[default]\n    Bar {\n        x: Option&lt;i32&gt;,\n        y: Option&lt;i32&gt;,\n    },\n    Baz,\n}\"><pre class=\"notranslate\"><span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>derive<span class=\"pl-kos\">(</span><span class=\"pl-v\">Default</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n<span class=\"pl-k\">enum</span> <span class=\"pl-smi\">Foo</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>default<span class=\"pl-kos\">]</span></span>\n    <span class=\"pl-v\">Bar</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c1\">x</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">Option</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">i32</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">,</span>\n        <span class=\"pl-c1\">y</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">Option</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">i32</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-v\">Baz</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\"><a href=\"https://github.com/estebank/rfcs/blob/derive-default-enum-with-fields/text/0000-derive-default-enum-with-fields.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3683",
            "title": "`#[derive(Default)]` on enum variants with fields",
            "date_modified": "2024-10-03T10:07:04.000Z",
            "date_published": "2024-08-25T18:59:16.000Z",
            "author": {
                "name": "estebank",
                "url": "https://github.com/estebank"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1606434?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Allow <code class=\"notranslate\">struct</code> definitions to provide default values for individual fields and<br>\nthereby allowing those to be omitted from initializers. When deriving <code class=\"notranslate\">Default</code>,<br>\nthe provided values will then be used. For example:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"#[derive(Default)]\nstruct Pet {\n    name: Option&lt;String&gt;, // impl Default for Pet will use Default::default() for name\n    age: i128 = 42, // impl Default for Pet will use the literal 42 for age\n}\"><pre class=\"notranslate\"><span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>derive<span class=\"pl-kos\">(</span><span class=\"pl-v\">Default</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n<span class=\"pl-k\">struct</span> <span class=\"pl-smi\">Pet</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">name</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">Option</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">String</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">,</span> <span class=\"pl-c\">// impl Default for Pet will use Default::default() for name</span>\n    <span class=\"pl-c1\">age</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">i128</span> = <span class=\"pl-c1\">42</span><span class=\"pl-kos\">,</span> <span class=\"pl-c\">// impl Default for Pet will use the literal 42 for age</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\"><a href=\"https://github.com/estebank/rfcs/blob/default-fields/text/0000-default-field-values.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3681",
            "title": "[RFC] Default field values",
            "date_modified": "2024-10-04T03:10:37.000Z",
            "date_published": "2024-08-22T23:46:12.000Z",
            "author": {
                "name": "estebank",
                "url": "https://github.com/estebank"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/162737?u=31a4f284889d0261a2b00e45af696e84dafb1488&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Provide a feature to simplify performing lightweight clones (such as of<br>\n<code class=\"notranslate\">Arc</code>/<code class=\"notranslate\">Rc</code>), particularly cloning them into closures or async blocks, while<br>\nstill keeping such cloning visible and explicit.</p>\n<p dir=\"auto\">A very common source of friction in asynchronous or multithreaded Rust<br>\nprogramming is having to clone various <code class=\"notranslate\">Arc&lt;T&gt;</code> reference-counted objects into<br>\nan async block or task. This is particularly common when spawning a closure as<br>\na thread, or spawning an async block as a task. Common patterns for doing so<br>\ninclude:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// Use new names throughout the block\nlet new_x = x.clone();\nlet new_y = y.clone();\nspawn(async move {\n    func1(new_x).await;\n    func2(new_y).await;\n});\n\n// Introduce a scope to perform the clones in\n{\n    let x = x.clone();\n    let y = y.clone();\n    spawn(async move {\n        func1(x).await;\n        func2(y).await;\n    });\n}\n\n// Introduce a scope to perform the clones in, inside the call\nspawn({\n    let x = x.clone();\n    let y = y.clone();\n    async move {\n        func1(x).await;\n        func2(y).await;\n    }\n});\"><pre class=\"notranslate\"><span class=\"pl-c\">// Use new names throughout the block</span>\n<span class=\"pl-k\">let</span> new_x = x<span class=\"pl-kos\">.</span><span class=\"pl-en\">clone</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">let</span> new_y = y<span class=\"pl-kos\">.</span><span class=\"pl-en\">clone</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-en\">spawn</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">async</span> <span class=\"pl-k\">move</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-en\">func1</span><span class=\"pl-kos\">(</span>new_x<span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-k\">await</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-en\">func2</span><span class=\"pl-kos\">(</span>new_y<span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-k\">await</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// Introduce a scope to perform the clones in</span>\n<span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">let</span> x = x<span class=\"pl-kos\">.</span><span class=\"pl-en\">clone</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">let</span> y = y<span class=\"pl-kos\">.</span><span class=\"pl-en\">clone</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-en\">spawn</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">async</span> <span class=\"pl-k\">move</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-en\">func1</span><span class=\"pl-kos\">(</span>x<span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-k\">await</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-en\">func2</span><span class=\"pl-kos\">(</span>y<span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-k\">await</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// Introduce a scope to perform the clones in, inside the call</span>\n<span class=\"pl-en\">spawn</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">let</span> x = x<span class=\"pl-kos\">.</span><span class=\"pl-en\">clone</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">let</span> y = y<span class=\"pl-kos\">.</span><span class=\"pl-en\">clone</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">async</span> <span class=\"pl-k\">move</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-en\">func1</span><span class=\"pl-kos\">(</span>x<span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-k\">await</span><span class=\"pl-kos\">;</span>\n        <span class=\"pl-en\">func2</span><span class=\"pl-kos\">(</span>y<span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-k\">await</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">All of these patterns introduce noise every time the program wants to spawn a<br>\nthread or task, or otherwise clone an object into a closure or async block.<br>\nFeedback on Rust regularly brings up this friction, seeking a simpler solution.</p>\n<p dir=\"auto\">This RFC proposes solutions to <em>minimize</em> the syntactic weight of<br>\nlightweight-cloning objects, particularly cloning objects into a closure or<br>\nasync block, <strong>while still keeping an indication of this operation</strong>.</p>\n<hr>\n<p dir=\"auto\">This RFC is part of the \"Ergonomic ref-counting\" project goal, owned by<br>\n<a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jkelleyrtp/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jkelleyrtp\">@jkelleyrtp</a>. Thanks to <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jkelleyrtp/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jkelleyrtp\">@jkelleyrtp</a> and <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/nikomatsakis/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nikomatsakis\">@nikomatsakis</a> for reviewing. Thanks to<br>\n<a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/nikomatsakis/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nikomatsakis\">@nikomatsakis</a> for key insights in this RFC, including the idea to use <code class=\"notranslate\">use</code>.</p>\n<p dir=\"auto\"><a href=\"https://github.com/joshtriplett/rfcs/blob/use/text/3680-use.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3680",
            "title": "Simplify lightweight clones, including into closures and async blocks",
            "date_modified": "2024-09-28T08:26:04.000Z",
            "date_published": "2024-08-20T20:34:07.000Z",
            "author": {
                "name": "joshtriplett",
                "url": "https://github.com/joshtriplett"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/162737?u=31a4f284889d0261a2b00e45af696e84dafb1488&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Support restricting implementation of individual methods within traits, using the already reserved <code class=\"notranslate\">final</code> keyword.</p>\n<p dir=\"auto\">This makes it possible to define a trait that any crate can implement, but disallow overriding one of the trait's methods or associated functions.</p>\n<p dir=\"auto\">This was inspired in the course of writing another RFC defining a trait, which wanted precisely this feature of restricting overrides of the trait's method. I separated out this feature as its own RFC, since it's independently useful for various other purposes, and since it should be available to any crate and not just the standard library.</p>\n<p dir=\"auto\"><a href=\"https://github.com/joshtriplett/rfcs/blob/final/text/3678-final.md\">Rendered</a></p>\n<p dir=\"auto\">Tracking:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2562890879\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rust/issues/131179\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/131179/hovercard\" href=\"https://github.com/rust-lang/rust/issues/131179\">rust-lang/rust#131179</a></li>\n</ul>",
            "url": "https://github.com/rust-lang/rfcs/pull/3678",
            "title": "Trait method impl restrictions",
            "date_modified": "2024-10-04T12:38:29.000Z",
            "date_published": "2024-08-13T19:51:41.000Z",
            "author": {
                "name": "joshtriplett",
                "url": "https://github.com/joshtriplett"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/141300?u=e222ed60f0855d57158dd20d3613f4db42b4236f&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/Turbo87/rust-rfcs/blob/crates-io-remove-dev-deps/text/3674-crates-io-remove-dev-deps.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3674",
            "title": "crates.io: Remove dev-dependencies from the index",
            "date_modified": "2024-09-01T16:09:20.000Z",
            "date_published": "2024-07-31T12:11:20.000Z",
            "author": {
                "name": "Turbo87",
                "url": "https://github.com/Turbo87"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/15850505?u=064c10efd2d57ae0bb9d53c6d97ea0a8e550c2a6&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Primitive representations on enums now accept type aliases, meaning that in addition to primitives like <code class=\"notranslate\">#[repr(u32)]</code>, <code class=\"notranslate\">#[repr(tag = core::ffi::c_int)]</code> and <code class=\"notranslate\">#[repr(tag = my_type)]</code> are now accepted.</p>\n<p dir=\"auto\">Internals discussion: <a href=\"https://internals.rust-lang.org/t/pre-rfc-type-aliases-in-repr/20956\" rel=\"nofollow\">https://internals.rust-lang.org/t/pre-rfc-type-aliases-in-repr/20956</a><br>\nLast comment on RFC under first version (<code class=\"notranslate\">self::</code>): <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2354411818\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3659\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3659/hovercard?comment_id=2171268028&amp;comment_type=issue_comment\" href=\"https://github.com/rust-lang/rfcs/pull/3659#issuecomment-2171268028\">#3659 (comment)</a><br>\nLast comment on RFC under second version (<code class=\"notranslate\">type = ...</code>): <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2354411818\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3659\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3659/hovercard?comment_id=2181588275&amp;comment_type=issue_comment\" href=\"https://github.com/rust-lang/rfcs/pull/3659#issuecomment-2181588275\">#3659 (comment)</a><br>\nLast comment on RFC under third version (<code class=\"notranslate\">discriminant = …</code>): <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2354411818\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3659\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3659/hovercard?comment_id=2221105082&amp;comment_type=issue_comment\" href=\"https://github.com/rust-lang/rfcs/pull/3659#issuecomment-2221105082\">#3659 (comment)</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/clarfonthey/rust-rfcs/blob/repr-type-aliases/text/0000-repr-type-aliases.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3659",
            "title": "`repr(tag = ...)` for type aliases",
            "date_modified": "2024-08-17T00:54:17.000Z",
            "date_published": "2024-06-15T02:14:21.000Z",
            "author": {
                "name": "clarfonthey",
                "url": "https://github.com/clarfonthey"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/13724985?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC proposes optional names for repetition groups in macros:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"macro_rules! foo {\n    ( $group1( $a:ident ),+ ) =&gt; {\n        $group1( println!(&quot;{}&quot;, $a); )+\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">macro_rules!</span> foo <span class=\"pl-kos\">{</span>\n    <span class=\"pl-kos\">(</span> $group1<span class=\"pl-kos\">(</span> $a<span class=\"pl-kos\">:</span>ident <span class=\"pl-kos\">)</span>,+ <span class=\"pl-kos\">)</span> =&gt; <span class=\"pl-kos\">{</span>\n        $group1<span class=\"pl-kos\">(</span> println!<span class=\"pl-kos\">(</span><span class=\"pl-s\">\"{}\"</span>, $a<span class=\"pl-kos\">)</span>; <span class=\"pl-kos\">)</span>+\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\"><a href=\"https://github.com/tgross35/rfcs/blob/macros-named-capture-groups/text/3649-macros-named-capture-groups.md\">Rendered</a></p>\n<p dir=\"auto\">Small Pre-RFC: <a href=\"https://internals.rust-lang.org/t/pre-rfc-named-capture-groups-for-macros/20883\" rel=\"nofollow\">https://internals.rust-lang.org/t/pre-rfc-named-capture-groups-for-macros/20883</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3649",
            "title": "[RFC] Named macro capture groups",
            "date_modified": "2024-07-11T19:01:45.000Z",
            "date_published": "2024-05-29T00:37:05.000Z",
            "author": {
                "name": "tgross35",
                "url": "https://github.com/tgross35"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/278509?u=f17ebaaae490d5f66760b62f162c2f142c7fc37d&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">An alternative proposal to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2289380504\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3632\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3632/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3632\">#3632</a>.</p>\n<p dir=\"auto\"><a href=\"https://github.com/Amanieu/rfcs/blob/extern-impl-trait/text/0000-externally-implementable-traits.md\">Rendered</a></p>\n<p dir=\"auto\">Tracking:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2311212266\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rust/issues/125418\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/125418/hovercard\" href=\"https://github.com/rust-lang/rust/issues/125418\">rust-lang/rust#125418</a></li>\n</ul>",
            "url": "https://github.com/rust-lang/rfcs/pull/3645",
            "title": "Externally implementable traits",
            "date_modified": "2024-06-03T02:31:06.000Z",
            "date_published": "2024-05-22T21:40:35.000Z",
            "author": {
                "name": "Amanieu",
                "url": "https://github.com/Amanieu"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/82710122?u=4f85864b2506072006121bb5cd66ebb5228f2922&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h1 dir=\"auto\">Summary</h1>\n<p dir=\"auto\">Add <code class=\"notranslate\">[diagnostic::on_unimplemented_trait_use]</code> in <code class=\"notranslate\">#[diagnostic]</code> on structs that will influence error messages emitted by unsatisfied traits bounds.</p>\n<h1 dir=\"auto\">Motivation</h1>\n<p dir=\"auto\">The idea came about when I was trying to print out a PathBuf, there's a custom message that said:</p>\n<blockquote>\n<p dir=\"auto\">in format strings you may be able to use <code class=\"notranslate\">{:?}</code> (or {:#?} for pretty-print) instead<br>\ncall <code class=\"notranslate\">.display()</code> or <code class=\"notranslate\">.to_string_lossy()</code> to safely print paths, as they may contain non-Unicode data</p>\n</blockquote>\n<p dir=\"auto\">And found out its hardcoded in trait <code class=\"notranslate\">Display</code></p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"#[rustc_on_unimplemented(\n    on(\n        any(_Self = &quot;std::path::Path&quot;, _Self = &quot;std::path::PathBuf&quot;),\n        label = &quot;`{Self}` cannot be formatted with the default formatter; call `.display()` on it&quot;,\n        note = &quot;call `.display()` or `.to_string_lossy()` to safely print paths, \\\n                as they may contain non-Unicode data&quot;\n    ),\n    message = &quot;`{Self}` doesn't implement `{Display}`&quot;,\n    label = &quot;`{Self}` cannot be formatted with the default formatter&quot;,\n    note = &quot;in format strings you may be able to use `{{:?}}` (or {{:#?}} for pretty-print) instead&quot;\n)]\npub trait Display {...}\"><pre class=\"notranslate\"><span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>rustc_on_unimplemented<span class=\"pl-kos\">(</span></span>\n<span class=\"pl-c1\">    on<span class=\"pl-kos\">(</span></span>\n<span class=\"pl-c1\">        any<span class=\"pl-kos\">(</span>_Self = <span class=\"pl-s\">\"std::path::Path\"</span>, _Self = <span class=\"pl-s\">\"std::path::PathBuf\"</span><span class=\"pl-kos\">)</span>,</span>\n<span class=\"pl-c1\">        label = <span class=\"pl-s\">\"`{Self}` cannot be formatted with the default formatter; call `.display()` on it\"</span>,</span>\n<span class=\"pl-c1\">        note = <span class=\"pl-s\">\"call `.display()` or `.to_string_lossy()` to safely print paths, <span class=\"pl-cce\">\\</span></span></span>\n<span class=\"pl-c1\"><span class=\"pl-s\"><span class=\"pl-cce\"></span>                as they may contain non-Unicode data\"</span></span>\n<span class=\"pl-c1\">    <span class=\"pl-kos\">)</span>,</span>\n<span class=\"pl-c1\">    message = <span class=\"pl-s\">\"`{Self}` doesn't implement `{Display}`\"</span>,</span>\n<span class=\"pl-c1\">    label = <span class=\"pl-s\">\"`{Self}` cannot be formatted with the default formatter\"</span>,</span>\n<span class=\"pl-c1\">    note = <span class=\"pl-s\">\"in format strings you may be able to use `{{:?}}` (or {{:#?}} for pretty-print) instead\"</span></span>\n<span class=\"pl-c1\"><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n<span class=\"pl-k\">pub</span> <span class=\"pl-k\">trait</span> <span class=\"pl-smi\">Display</span> <span class=\"pl-kos\">{</span>...<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">It would be nice if this functionality is exposed to libraries as well, so that when the user tries to use an unimplemented trait (e.g. maybe Display isn't implemented because it's insufficient to clearly express intentions) the author can explain why via this diagnostic and offer a recommendation/alternative.</p>\n<p dir=\"auto\">For example:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"#[diagnostic::on_unimplemented_trait_use(\n    trait = Display,\n    message = &quot;`{Self}` doesn't implement `{Display}`&quot;,\n    label = &quot;`{Self}` cannot be formatted with the default formatter; call `.display()` on it&quot;,\n    note = &quot;call `.display()` or `.to_string_lossy()` to safely print paths, \\\n                as they may contain non-Unicode data&quot;\n)]\nstruct PathBuf;\"><pre class=\"notranslate\"><span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>diagnostic<span class=\"pl-kos\">::</span>on_unimplemented_trait_use<span class=\"pl-kos\">(</span></span>\n<span class=\"pl-c1\">    <span class=\"pl-k\">trait</span> = <span class=\"pl-v\">Display</span>,</span>\n<span class=\"pl-c1\">    message = <span class=\"pl-s\">\"`{Self}` doesn't implement `{Display}`\"</span>,</span>\n<span class=\"pl-c1\">    label = <span class=\"pl-s\">\"`{Self}` cannot be formatted with the default formatter; call `.display()` on it\"</span>,</span>\n<span class=\"pl-c1\">    note = <span class=\"pl-s\">\"call `.display()` or `.to_string_lossy()` to safely print paths, <span class=\"pl-cce\">\\</span></span></span>\n<span class=\"pl-c1\"><span class=\"pl-s\"><span class=\"pl-cce\"></span>                as they may contain non-Unicode data\"</span></span>\n<span class=\"pl-c1\"><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n<span class=\"pl-k\">struct</span> <span class=\"pl-smi\">PathBuf</span><span class=\"pl-kos\">;</span></pre></div>\n<h1 dir=\"auto\">Unresolved questions</h1>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\">  <a href=\"https://github.com/rust-lang/rfcs/pull/3643#pullrequestreview-2075066492\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3643/hovercard\">syntax for generic traits</a></li>\n</ul>",
            "url": "https://github.com/rust-lang/rfcs/pull/3643",
            "title": "[RFC] On_unimplemented_trait_use",
            "date_modified": "2024-07-25T01:59:28.000Z",
            "date_published": "2024-05-22T15:42:05.000Z",
            "author": {
                "name": "B-2U",
                "url": "https://github.com/B-2U"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/783247?u=b4f1eeea8dd687c853f13caa8e40eced78c65cf1&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/m-ou-se/rfcs/blob/thread-spawn-hook/text/3642-thread-spawn-hook.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3642",
            "title": "[RFC] Thread spawn hook (inheriting thread locals)",
            "date_modified": "2024-06-11T16:10:30.000Z",
            "date_published": "2024-05-22T11:53:15.000Z",
            "author": {
                "name": "m-ou-se",
                "url": "https://github.com/m-ou-se"
            }
        }
    ]
}