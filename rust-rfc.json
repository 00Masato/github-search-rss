{
    "version": "https://jsonfeed.org/version/1",
    "title": "rust-lang/rfcs pr",
    "home_page_url": "https://00masato.github.io/github-search-rss/rust-rfc.json",
    "feed_url": "https://00masato.github.io/github-search-rss/rust-rfc.json",
    "description": "rust-lang/rfcs pr on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/96880612?u=ef95926007b78325046330840f3dc3fede768634&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Fix outdated links in RFC I/O safety, the old links will only give you \"Not Found\".</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://private-user-images.githubusercontent.com/96880612/337855190-d55c3403-7e09-431e-b1ce-05d2e4ce6066.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTgxNTA5NjYsIm5iZiI6MTcxODE1MDY2NiwicGF0aCI6Ii85Njg4MDYxMi8zMzc4NTUxOTAtZDU1YzM0MDMtN2UwOS00MzFlLWIxY2UtMDVkMmU0Y2U2MDY2LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MTIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjEyVDAwMDQyNlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTg4NzY5NzMwZmM0ZDIxMGZkMWVkMTZlM2UzMjlhNTgwMmFlMGExNzU1OTI2Y2Q5NDJmNDI1ZDAyNzVkMjIzZDUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.fCnXDlBHSFuu9gJGbAwmcqdnvkmGn2XB06banOe0VEQ\"><img src=\"https://private-user-images.githubusercontent.com/96880612/337855190-d55c3403-7e09-431e-b1ce-05d2e4ce6066.png?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3MTgxNTA5NjYsIm5iZiI6MTcxODE1MDY2NiwicGF0aCI6Ii85Njg4MDYxMi8zMzc4NTUxOTAtZDU1YzM0MDMtN2UwOS00MzFlLWIxY2UtMDVkMmU0Y2U2MDY2LnBuZz9YLUFtei1BbGdvcml0aG09QVdTNC1ITUFDLVNIQTI1NiZYLUFtei1DcmVkZW50aWFsPUFLSUFWQ09EWUxTQTUzUFFLNFpBJTJGMjAyNDA2MTIlMkZ1cy1lYXN0LTElMkZzMyUyRmF3czRfcmVxdWVzdCZYLUFtei1EYXRlPTIwMjQwNjEyVDAwMDQyNlomWC1BbXotRXhwaXJlcz0zMDAmWC1BbXotU2lnbmF0dXJlPTg4NzY5NzMwZmM0ZDIxMGZkMWVkMTZlM2UzMjlhNTgwMmFlMGExNzU1OTI2Y2Q5NDJmNDI1ZDAyNzVkMjIzZDUmWC1BbXotU2lnbmVkSGVhZGVycz1ob3N0JmFjdG9yX2lkPTAma2V5X2lkPTAmcmVwb19pZD0wIn0.fCnXDlBHSFuu9gJGbAwmcqdnvkmGn2XB06banOe0VEQ\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\"><a href=\"https://github.com/SteveLauC/rfcs/blob/FromRawFd_link/text/3128-io-safety.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3655",
            "title": "fix links of I/O safety RFC",
            "date_modified": "2024-06-11T16:50:23.000Z",
            "date_published": "2024-06-08T06:26:28.000Z",
            "author": {
                "name": "SteveLauC",
                "url": "https://github.com/SteveLauC"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/155238?u=c09aaff33aa53ea99359e53bef06aa5058ac8d15&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Return type notation (RTN) gives a way to reference or bound the type returned by a trait method. The new bounds look like <code class=\"notranslate\">T: Trait&lt;method(..): Send&gt;</code> or <code class=\"notranslate\">T::method(..): Send</code>. The primary use case is to add bounds such as <code class=\"notranslate\">Send</code> to the futures returned by <code class=\"notranslate\">async fn</code>s in traits and <code class=\"notranslate\">-&gt; impl Future</code> functions, but they work for any trait function defined with return-position impl trait (e.g., <code class=\"notranslate\">where T: Factory&lt;widgets(..): DoubleEndedIterator&gt;</code> would also be valid).</p>\n<p dir=\"auto\">This RFC proposes a new kind of type written <code class=\"notranslate\">&lt;T as Trait&gt;::method(..)</code> (or <code class=\"notranslate\">T::method(..)</code> for short). RTN refers to \"the type returned by invoking <code class=\"notranslate\">method</code> on <code class=\"notranslate\">T</code>\".</p>\n<p dir=\"auto\">To keep this RFC focused, it only covers usage of RTN as the <code class=\"notranslate\">Self</code> type of a bound or where-clause. The expectation is that, after accepting this RFC, we will gradually expand RTN usage to other places as covered under <a href=\"#future-possibilities\">Future Possibilities</a>. As a notable example, supporting RTN in struct field types would allow constructing types that store the results of a call to a trait <code class=\"notranslate\">-&gt; impl Trait</code> method, making them <a href=\"https://rust-lang.github.io/api-guidelines/future-proofing.html\" rel=\"nofollow\">more suitable for use in public APIs</a>.</p>\n<p dir=\"auto\">Examples of RTN usage allowed by this RFC include:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">where &lt;T as Trait&gt;::method(..): Send</code>\n<ul dir=\"auto\">\n<li>(the base syntax)</li>\n</ul>\n</li>\n<li><code class=\"notranslate\">where T: Trait&lt;method(..): Send&gt;</code>\n<ul dir=\"auto\">\n<li>(sugar for the base syntax with the (recently stabilized) <a href=\"https://github.com/rust-lang/rust/issues/52662\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/52662/hovercard\">associated type bounds</a>)</li>\n</ul>\n</li>\n<li><code class=\"notranslate\">where T::method(..): Send</code>\n<ul dir=\"auto\">\n<li>(sugar where <code class=\"notranslate\">Trait</code> is inferred from the compiler)</li>\n</ul>\n</li>\n<li><code class=\"notranslate\">dyn Trait&lt;method(..): Send&gt;</code>\n<ul dir=\"auto\">\n<li>(<code class=\"notranslate\">dyn</code> types take lists of bounds)</li>\n</ul>\n</li>\n<li><code class=\"notranslate\">impl Trait&lt;method(..): Send&gt;</code>\n<ul dir=\"auto\">\n<li>(...as do <code class=\"notranslate\">impl</code> types)</li>\n</ul>\n</li>\n</ul>\n<p dir=\"auto\"><a href=\"https://github.com/nikomatsakis/rfcs/blob/rtn/text/0000-return-type-notation.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3654",
            "title": "RFC: Return Type Notation",
            "date_modified": "2024-06-11T21:36:09.000Z",
            "date_published": "2024-06-05T09:29:56.000Z",
            "author": {
                "name": "nikomatsakis",
                "url": "https://github.com/nikomatsakis"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/13724985?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC proposes optional names for repetition groups in macros:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"macro_rules! foo {\n    ( $group1:( $a:ident ),+ ) =&gt; {\n        $group1( println!(&quot;{}&quot;, $a); )+\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">macro_rules!</span> foo <span class=\"pl-kos\">{</span>\n    <span class=\"pl-kos\">(</span> $group1<span class=\"pl-kos\">:</span><span class=\"pl-kos\">(</span> $a<span class=\"pl-kos\">:</span>ident <span class=\"pl-kos\">)</span>,+ <span class=\"pl-kos\">)</span> =&gt; <span class=\"pl-kos\">{</span>\n        $group1<span class=\"pl-kos\">(</span> println!<span class=\"pl-kos\">(</span><span class=\"pl-s\">\"{}\"</span>, $a<span class=\"pl-kos\">)</span>; <span class=\"pl-kos\">)</span>+\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\"><a href=\"https://github.com/rust-lang/rfcs/blob/aa37d02a509da8b5f1187ddd13c92d40cdbd31cf/text/0000-macros-named-capture-groups.md\">Rendered</a></p>\n<p dir=\"auto\">Small Pre-RFC: <a href=\"https://internals.rust-lang.org/t/pre-rfc-named-capture-groups-for-macros/20883\" rel=\"nofollow\">https://internals.rust-lang.org/t/pre-rfc-named-capture-groups-for-macros/20883</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3649",
            "title": "[RFC] Named macro capture groups",
            "date_modified": "2024-05-29T14:29:54.000Z",
            "date_published": "2024-05-29T00:37:05.000Z",
            "author": {
                "name": "tgross35",
                "url": "https://github.com/tgross35"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/193874?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/carols10cents/rfcs/blob/no-crate-transfer-help/text/3646-remove-crate-transfer-mediation-policy.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3646",
            "title": "Change crates.io policy to not offer crate transfer mediation",
            "date_modified": "2024-06-11T15:45:33.000Z",
            "date_published": "2024-05-24T12:53:18.000Z",
            "author": {
                "name": "carols10cents",
                "url": "https://github.com/carols10cents"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/278509?u=f17ebaaae490d5f66760b62f162c2f142c7fc37d&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">An alternative proposal to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2289380504\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3632\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3632/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3632\">#3632</a>.</p>\n<p dir=\"auto\"><a href=\"https://github.com/Amanieu/rfcs/blob/extern-impl-trait/text/0000-externally-implementable-traits.md\">Rendered</a></p>\n<p dir=\"auto\">Tracking:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2311212266\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rust/issues/125418\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/125418/hovercard\" href=\"https://github.com/rust-lang/rust/issues/125418\">rust-lang/rust#125418</a></li>\n</ul>",
            "url": "https://github.com/rust-lang/rfcs/pull/3645",
            "title": "Externally implementable traits",
            "date_modified": "2024-06-03T02:31:06.000Z",
            "date_published": "2024-05-22T21:40:35.000Z",
            "author": {
                "name": "Amanieu",
                "url": "https://github.com/Amanieu"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/82710122?u=4f85864b2506072006121bb5cd66ebb5228f2922&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h1 dir=\"auto\">Summary</h1>\n<p dir=\"auto\">Add <code class=\"notranslate\">[diagnostic::on_unimplemented_trait_use]</code> in <code class=\"notranslate\">#[diagnostic]</code> on structs that will influence error messages emitted by unsatisfied traits bounds.</p>\n<h1 dir=\"auto\">Motivation</h1>\n<p dir=\"auto\">The idea came about when I was trying to print out a PathBuf, there's a custom message that said:</p>\n<blockquote>\n<p dir=\"auto\">in format strings you may be able to use <code class=\"notranslate\">{:?}</code> (or {:#?} for pretty-print) instead<br>\ncall <code class=\"notranslate\">.display()</code> or <code class=\"notranslate\">.to_string_lossy()</code> to safely print paths, as they may contain non-Unicode data</p>\n</blockquote>\n<p dir=\"auto\">And found out its hardcoded in trait <code class=\"notranslate\">Display</code></p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"#[rustc_on_unimplemented(\n    on(\n        any(_Self = &quot;std::path::Path&quot;, _Self = &quot;std::path::PathBuf&quot;),\n        label = &quot;`{Self}` cannot be formatted with the default formatter; call `.display()` on it&quot;,\n        note = &quot;call `.display()` or `.to_string_lossy()` to safely print paths, \\\n                as they may contain non-Unicode data&quot;\n    ),\n    message = &quot;`{Self}` doesn't implement `{Display}`&quot;,\n    label = &quot;`{Self}` cannot be formatted with the default formatter&quot;,\n    note = &quot;in format strings you may be able to use `{{:?}}` (or {{:#?}} for pretty-print) instead&quot;\n)]\npub trait Display {...}\"><pre class=\"notranslate\"><span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>rustc_on_unimplemented<span class=\"pl-kos\">(</span></span>\n<span class=\"pl-c1\">    on<span class=\"pl-kos\">(</span></span>\n<span class=\"pl-c1\">        any<span class=\"pl-kos\">(</span>_Self = <span class=\"pl-s\">\"std::path::Path\"</span>, _Self = <span class=\"pl-s\">\"std::path::PathBuf\"</span><span class=\"pl-kos\">)</span>,</span>\n<span class=\"pl-c1\">        label = <span class=\"pl-s\">\"`{Self}` cannot be formatted with the default formatter; call `.display()` on it\"</span>,</span>\n<span class=\"pl-c1\">        note = <span class=\"pl-s\">\"call `.display()` or `.to_string_lossy()` to safely print paths, <span class=\"pl-cce\">\\</span></span></span>\n<span class=\"pl-c1\"><span class=\"pl-s\"><span class=\"pl-cce\"></span>                as they may contain non-Unicode data\"</span></span>\n<span class=\"pl-c1\">    <span class=\"pl-kos\">)</span>,</span>\n<span class=\"pl-c1\">    message = <span class=\"pl-s\">\"`{Self}` doesn't implement `{Display}`\"</span>,</span>\n<span class=\"pl-c1\">    label = <span class=\"pl-s\">\"`{Self}` cannot be formatted with the default formatter\"</span>,</span>\n<span class=\"pl-c1\">    note = <span class=\"pl-s\">\"in format strings you may be able to use `{{:?}}` (or {{:#?}} for pretty-print) instead\"</span></span>\n<span class=\"pl-c1\"><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n<span class=\"pl-k\">pub</span> <span class=\"pl-k\">trait</span> <span class=\"pl-smi\">Display</span> <span class=\"pl-kos\">{</span>...<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">It would be nice if this functionality is exposed to libraries as well, so that when the user tries to use an unimplemented trait (e.g. maybe Display isn't implemented because it's insufficient to clearly express intentions) the author can explain why via this diagnostic and offer a recommendation/alternative.</p>\n<p dir=\"auto\">For example:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"#[diagnostic::on_unimplemented_trait_use(\n    trait = Display,\n    message = &quot;`{Self}` doesn't implement `{Display}`&quot;,\n    label = &quot;`{Self}` cannot be formatted with the default formatter; call `.display()` on it&quot;,\n    note = &quot;call `.display()` or `.to_string_lossy()` to safely print paths, \\\n                as they may contain non-Unicode data&quot;\n)]\nstruct PathBuf;\"><pre class=\"notranslate\"><span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>diagnostic<span class=\"pl-kos\">::</span>on_unimplemented_trait_use<span class=\"pl-kos\">(</span></span>\n<span class=\"pl-c1\">    <span class=\"pl-k\">trait</span> = <span class=\"pl-v\">Display</span>,</span>\n<span class=\"pl-c1\">    message = <span class=\"pl-s\">\"`{Self}` doesn't implement `{Display}`\"</span>,</span>\n<span class=\"pl-c1\">    label = <span class=\"pl-s\">\"`{Self}` cannot be formatted with the default formatter; call `.display()` on it\"</span>,</span>\n<span class=\"pl-c1\">    note = <span class=\"pl-s\">\"call `.display()` or `.to_string_lossy()` to safely print paths, <span class=\"pl-cce\">\\</span></span></span>\n<span class=\"pl-c1\"><span class=\"pl-s\"><span class=\"pl-cce\"></span>                as they may contain non-Unicode data\"</span></span>\n<span class=\"pl-c1\"><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n<span class=\"pl-k\">struct</span> <span class=\"pl-smi\">PathBuf</span><span class=\"pl-kos\">;</span></pre></div>\n<h1 dir=\"auto\">Unresolved questions</h1>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\">  <a href=\"https://github.com/rust-lang/rfcs/pull/3643#pullrequestreview-2075066492\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3643/hovercard\">syntax for generic traits</a></li>\n</ul>",
            "url": "https://github.com/rust-lang/rfcs/pull/3643",
            "title": "[RFC] On_unimplemented_trait_use",
            "date_modified": "2024-05-30T19:17:16.000Z",
            "date_published": "2024-05-22T15:42:05.000Z",
            "author": {
                "name": "B-2U",
                "url": "https://github.com/B-2U"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/783247?u=b4f1eeea8dd687c853f13caa8e40eced78c65cf1&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/m-ou-se/rfcs/blob/thread-spawn-hook/text/3642-thread-spawn-hook.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3642",
            "title": "[RFC] Thread spawn hook (inheriting thread locals)",
            "date_modified": "2024-06-11T16:10:30.000Z",
            "date_published": "2024-05-22T11:53:15.000Z",
            "author": {
                "name": "m-ou-se",
                "url": "https://github.com/m-ou-se"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/27697325?u=c25b1d3eb895997576e1578a950b62a1e4644f7f&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC adds an attribute that allows specifying the ordinal of an exported function when creating cdylibs on windows.</p>\n<p dir=\"auto\">We already have a <a href=\"https://doc.rust-lang.org/reference/items/external-blocks.html#the-link_ordinal-attribute\" rel=\"nofollow\"><code class=\"notranslate\">#[link_ordinal(n)]</code></a> attribute which allows importing functions from DLLs by its ordinal, but we don't have any way of doing the opposite - specifying the ordinal of a function when we're making our own DLLs.</p>\n<p dir=\"auto\">Currently, you need to create a <code class=\"notranslate\">lib.def</code> file and specify the ordinals, and then link it with <code class=\"notranslate\">cargo:rustc-cdylib-link-arg=/DEF</code>.</p>\n<p dir=\"auto\">The biggest downside of the current method is that once you specify a <code class=\"notranslate\">.def</code> file, you will have to specify an ordinal for every function that you want to export from the DLL, or else it won't be present in the generated <code class=\"notranslate\">.lib</code> file. This can become very overwhelming if you have a lot of exported functions.</p>\n<p dir=\"auto\">This RFC would allow you to specify exported function ordinals like so:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// Export this function at Ordinal 1\n#[no_mangle]\n#[export_ordinal(1)]\npub extern &quot;C&quot; fn hello() {\n\tprintln!(&quot;Hello, World!&quot;);\n}\"><pre class=\"notranslate\"><span class=\"pl-c\">// Export this function at Ordinal 1</span>\n<span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>no_mangle<span class=\"pl-kos\">]</span></span>\n<span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>export_ordinal<span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n<span class=\"pl-k\">pub</span> <span class=\"pl-k\">extern</span> <span class=\"pl-s\">\"C\"</span> <span class=\"pl-k\">fn</span> <span class=\"pl-en\">hello</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n\t<span class=\"pl-en\">println</span><span class=\"pl-en\">!</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"Hello, World!\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\"><a href=\"https://github.com/MeguminSama/rfcs/blob/export-function-ordinals/text/3641-export-function-ordinals.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3641",
            "title": "[RFC] Add `#[export_ordinal(n)]` attribute",
            "date_modified": "2024-05-21T18:47:33.000Z",
            "date_published": "2024-05-20T20:54:35.000Z",
            "author": {
                "name": "MeguminSama",
                "url": "https://github.com/MeguminSama"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1606434?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><code class=\"notranslate\">#[diagnostic::blocking]</code> is a marker attribute for functions that are considered (by their author) to be a blocking operation, and as such shouldn't be invoked from an <code class=\"notranslate\">async</code> function. <code class=\"notranslate\">rustc</code>, <code class=\"notranslate\">clippy</code> and other tools can use this signal to lint against calling these functions in <code class=\"notranslate\">async</code> contexts.</p>\n<p dir=\"auto\">It would allow <code class=\"notranslate\">rustc</code>, <code class=\"notranslate\">clippy</code> and other tools to provide lints like</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"warning: async function `foo` can block\n  --&gt; $DIR/blocking-calls-in-async.rs:28:1\n   |\n28 | async fn foo() {\n   | --------------\n29 |     interesting();\n   |     ^^^^^^^^^^^^^`foo` is determined to block because it calls into `interesting`\n   |\nnote: `interesting` is considered to be blocking because it was explicitly marked as such\n  --&gt; $DIR/blocking-calls-in-async.rs:5:1\n   |\n5  | #[diagnostic::blocking]\n   | ^^^^^^^^^^^^^^^^^^^^^^^\n6  | fn interesting() {}\n   | ----------------\"><pre class=\"notranslate\"><code class=\"notranslate\">warning: async function `foo` can block\n  --&gt; $DIR/blocking-calls-in-async.rs:28:1\n   |\n28 | async fn foo() {\n   | --------------\n29 |     interesting();\n   |     ^^^^^^^^^^^^^`foo` is determined to block because it calls into `interesting`\n   |\nnote: `interesting` is considered to be blocking because it was explicitly marked as such\n  --&gt; $DIR/blocking-calls-in-async.rs:5:1\n   |\n5  | #[diagnostic::blocking]\n   | ^^^^^^^^^^^^^^^^^^^^^^^\n6  | fn interesting() {}\n   | ----------------\n</code></pre></div>\n<p dir=\"auto\"><a href=\"https://github.com/estebank/rfcs/blob/diagnostic-blocking/text/3639-diagnostic-blocking.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3639",
            "title": "[RFC] Add `#[diagnostic::blocking]` attribute",
            "date_modified": "2024-06-11T20:56:54.000Z",
            "date_published": "2024-05-17T18:41:40.000Z",
            "author": {
                "name": "estebank",
                "url": "https://github.com/estebank"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19580458?u=1884c67cfdf07c9cdcd4edbe3532aa770aba55af&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/max-niederman/rust-rfcs/blob/guard-patterns/text/3637-guard-patterns.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3637",
            "title": "Guard Patterns",
            "date_modified": "2024-05-25T05:21:05.000Z",
            "date_published": "2024-05-15T07:03:42.000Z",
            "author": {
                "name": "max-niederman",
                "url": "https://github.com/max-niederman"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/783247?u=b4f1eeea8dd687c853f13caa8e40eced78c65cf1&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This is an alternative to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2289380504\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3632\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3632/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3632\">#3632</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/m-ou-se/rfcs/blob/extern-static/text/0000-externally-definable-statics.md\">Rendered</a></p>\n<p dir=\"auto\">Tracking:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2311212266\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rust/issues/125418\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/125418/hovercard\" href=\"https://github.com/rust-lang/rust/issues/125418\">rust-lang/rust#125418</a></li>\n</ul>",
            "url": "https://github.com/rust-lang/rfcs/pull/3635",
            "title": "[RFC] externally definable statics",
            "date_modified": "2024-05-23T10:24:48.000Z",
            "date_published": "2024-05-13T13:49:36.000Z",
            "author": {
                "name": "m-ou-se",
                "url": "https://github.com/m-ou-se"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/715360?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This may be a bit long. I thought it would be best to go over the interactions with other language features and tooling as well as potential impacts thoroughly in advance, since while the addition to the language itself can be explained quickly, it does interact with <em>a lot</em> of other Rust features and aspects of the crate ecosystem.</p>\n<p dir=\"auto\">In (very) short this is a version of orphan-rule avoidance (i.e. non-unique trait implementations) that does not suffer from either version of \"the hashtable problem\", does not obscure imports, can be safely ignored unless needed (but is discoverable), is seamlessly compatible with specialisation and tries to strike a good balance between usability and complexity, so that developers are automatically funneled towards correct and unsurprising but also highly compatible code.</p>\n<p dir=\"auto\">I'm aware that there are often rash proposals in this direction, but I believe I've covered all previously-discussed issues.<br>\nAs the overall RFC is a fairly dense read, I've added cross-references and less-formal comments in form of blockquotes to it.</p>\n<hr>\n<p dir=\"auto\">Thanks</p>\n<ul dir=\"auto\">\n<li>to <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/teliosdev/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/teliosdev\">@teliosdev</a> for some very early syntax feedback that helped put me on track,</li>\n<li>to <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/cofinite/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/cofinite\">@cofinite</a> for pointing out how scoped implementations allow syntax traits to be used as extension traits,</li>\n<li>to <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/thefakeplace/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/thefakeplace\">@thefakeplace</a> and to SkiFire13 in the <a href=\"https://internals.rust-lang.org/t/pre-rfc-scoped-impl-trait-for-type/19923\" rel=\"nofollow\">draft discussion</a> for suggestions on how to make this RFC more approachable and easier to understand.</li>\n</ul>\n<hr>\n<p dir=\"auto\"><a href=\"https://github.com/Tamschi/rust-rfcs/blob/scoped_impl_trait_for_type/text/3634-scoped-impl-trait-for-type.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3634",
            "title": "Scoped `impl Trait for Type`",
            "date_modified": "2024-06-08T17:29:05.000Z",
            "date_published": "2024-05-12T13:59:38.000Z",
            "author": {
                "name": "Tamschi",
                "url": "https://github.com/Tamschi"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/6801863?u=699ef806e3d9624167be89db3c7217df5193775e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/p-avital/rfcs/blob/stabilize-marker-freeze/text/0000-stabilize-marker-freeze.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3633",
            "title": "[RFC] `core::marker::Freeze` in bounds",
            "date_modified": "2024-06-07T15:52:39.000Z",
            "date_published": "2024-05-10T17:00:40.000Z",
            "author": {
                "name": "p-avital",
                "url": "https://github.com/p-avital"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/783247?u=b4f1eeea8dd687c853f13caa8e40eced78c65cf1&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">An alternative to this is <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2292887865\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3635\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3635/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3635\">#3635</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/m-ou-se/rfcs/blob/extern-impl-fn/text/0000-externally-implementable-functions.md\">Rendered</a></p>\n<p dir=\"auto\">Tracking:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2311212266\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rust/issues/125418\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/125418/hovercard\" href=\"https://github.com/rust-lang/rust/issues/125418\">rust-lang/rust#125418</a></li>\n</ul>",
            "url": "https://github.com/rust-lang/rfcs/pull/3632",
            "title": "[RFC] externally implementable functions",
            "date_modified": "2024-06-10T03:49:22.000Z",
            "date_published": "2024-05-10T09:40:13.000Z",
            "author": {
                "name": "m-ou-se",
                "url": "https://github.com/m-ou-se"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/3050060?u=6ca85464b07c5464a052250a4fc3e3f9c03c97ed&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/rust-lang/rust/issues/43781\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/43781/hovercard\">tracking issue</a></p>\n<p dir=\"auto\">cc @rust-lang/rustdoc</p>\n<p dir=\"auto\"><a href=\"https://github.com/GuillaumeGomez/rfcs/blob/doc-cfg/text/000-rustdoc-cfgs-handling.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3631",
            "title": "RFC for doc_cfg, doc_cfg_auto, doc_cfg_hide and doc_cfg_show features",
            "date_modified": "2024-05-30T05:09:26.000Z",
            "date_published": "2024-05-09T14:08:45.000Z",
            "author": {
                "name": "GuillaumeGomez",
                "url": "https://github.com/GuillaumeGomez"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/162737?u=31a4f284889d0261a2b00e45af696e84dafb1488&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Co-authored-by: Eric Holk</p>\n<p dir=\"auto\"><a href=\"https://github.com/joshtriplett/rfcs/blob/fn-body-blocks/text/3629-fn-body-blocks.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3629",
            "title": "Function body blocks",
            "date_modified": "2024-05-16T02:20:15.000Z",
            "date_published": "2024-05-07T08:42:43.000Z",
            "author": {
                "name": "joshtriplett",
                "url": "https://github.com/joshtriplett"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/162737?u=31a4f284889d0261a2b00e45af696e84dafb1488&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Allow the syntax <code class=\"notranslate\">async T</code> and <code class=\"notranslate\">gen T</code> as types, equivalent to<br>\n<code class=\"notranslate\">impl Future&lt;Output = T&gt;</code> and <code class=\"notranslate\">impl Iterator&lt;Item = T&gt;</code> respectively. Accept<br>\nthem anywhere <code class=\"notranslate\">impl Trait</code> can appear.</p>\n<p dir=\"auto\">This RFC was inspired by a few different needs.</p>\n<p dir=\"auto\">First, writing large numbers of functions that manipulate iterators or futures.<br>\nHaving a shorthand for the type makes function signatures much clearer.</p>\n<p dir=\"auto\">And second, providing one part of a general solution that gives people the<br>\nbenefits of <code class=\"notranslate\">async fn</code> in all contexts, and for new constructs like <code class=\"notranslate\">gen</code>.</p>\n<p dir=\"auto\">Co-authored-by: Eric Holk</p>\n<p dir=\"auto\"><a href=\"https://github.com/joshtriplett/rfcs/blob/async-gen-types/text/3628-async-gen-types.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3628",
            "title": "`async T` and `gen T` types",
            "date_modified": "2024-05-10T16:11:51.000Z",
            "date_published": "2024-05-07T08:33:00.000Z",
            "author": {
                "name": "joshtriplett",
                "url": "https://github.com/joshtriplett"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/79955405?u=c4a50058c2fe0214e4243abaf547ee6e1f59de46&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/Jules-Bertholet/rfcs/blob/match-ergonomics-2024/text/3627-match-ergonomics-2024.md\">Rendered</a></p>\n<p dir=\"auto\">Changes to match ergonomics for the 2024 edition.</p>\n<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/rustbot/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/rustbot\">@rustbot</a> label T-lang A-patterns A-edition-2024</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3627",
            "title": "Match ergonomics 2024",
            "date_modified": "2024-05-29T13:59:09.000Z",
            "date_published": "2024-05-06T20:46:23.000Z",
            "author": {
                "name": "Jules-Bertholet",
                "url": "https://github.com/Jules-Bertholet"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/162737?u=31a4f284889d0261a2b00e45af696e84dafb1488&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC extends the \"implicit named arguments\" mechanism to allow accessing<br>\nfield names with <code class=\"notranslate\">var.field</code> syntax: <code class=\"notranslate\">format!(\"{self.x} {var.another_field}\")</code>.</p>\n<p dir=\"auto\"><a href=\"https://github.com/joshtriplett/rfcs/blob/format-args-implicit-identifiers-dot/text/3626-format-args-implicit-dot.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3626",
            "title": "Extend format_args implicit arguments to allow field access",
            "date_modified": "2024-05-18T20:33:13.000Z",
            "date_published": "2024-05-06T10:21:50.000Z",
            "author": {
                "name": "joshtriplett",
                "url": "https://github.com/joshtriplett"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/278509?u=f17ebaaae490d5f66760b62f162c2f142c7fc37d&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This is an alternative to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"545842586\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/2845\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/2845/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/2845\">#2845</a> which aims to resolve the <a href=\"https://github.com/rust-lang/rust/issues/88967\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/88967/hovercard\">issues</a> surrounding the stabilization of <code class=\"notranslate\">Iterator::intersperse</code>.</p>\n<h2 dir=\"auto\">Summary</h2>\n<p dir=\"auto\">When name resolution encounters an ambiguity between 2 trait methods, if one trait is a sub-trait of the other then select that method instead of reporting an ambiguity error.</p>\n<p dir=\"auto\"><a href=\"https://github.com/Amanieu/rfcs/blob/item-shadowing/text/0000-supertrait-item-shadowing-v2.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3624",
            "title": "Supertrait item shadowing v2",
            "date_modified": "2024-06-01T17:53:14.000Z",
            "date_published": "2024-05-03T23:39:09.000Z",
            "author": {
                "name": "Amanieu",
                "url": "https://github.com/Amanieu"
            }
        }
    ]
}