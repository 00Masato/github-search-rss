{
    "version": "https://jsonfeed.org/version/1",
    "title": "rust-lang/rfcs pr",
    "home_page_url": "https://00masato.github.io/github-search-rss/rust-rfc.json",
    "feed_url": "https://00masato.github.io/github-search-rss/rust-rfc.json",
    "description": "rust-lang/rfcs pr on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/127629827?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><ul dir=\"auto\">\n<li>Feature Name: <code class=\"notranslate\">virt_self</code></li>\n<li>Start Date: <code class=\"notranslate\">2023-05-30</code></li>\n<li>RFC PR: <a href=\"https://github.com/rust-lang/rfcs/pull/3440\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3440/hovercard\">rust-lang/rfcs#3440</a></li>\n<li>Rust Issue: <a href=\"https://github.com/rust-lang/rust/issues/3440\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rust/pull/3440/hovercard\">rust-lang/rust#3440</a></li>\n</ul>\n<h1 dir=\"auto\">Summary</h1>\n<p dir=\"auto\">Enable virtual dispatch of trait methods.</p>\n<h1 dir=\"auto\">Motivation</h1>\n<p dir=\"auto\">Coming to Rust from an OOP language such as C++ one is told to favor composition over inheritance. In general, I think that's a great thing. However, lack of language features such as delegation and what this RFC proposes can make certain patterns more difficult to express than they should be.</p>\n<p dir=\"auto\">Consider the following situation. Say we have a trait <code class=\"notranslate\">System</code> that models a given system.</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"pub trait System {\n    fn op1(&amp;self) -&gt; SystemOp1;\n    fn op2(&amp;self) -&gt; SystemOp2;\n    // etc.\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">pub</span> <span class=\"pl-k\">trait</span> <span class=\"pl-smi\">System</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">op1</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span><span class=\"pl-smi\">self</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">SystemOp1</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">op2</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span><span class=\"pl-smi\">self</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">SystemOp2</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-c\">// etc.</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Assume that we now have a particular impl. <code class=\"notranslate\">SystemA</code> which implements <code class=\"notranslate\">op1</code> through a reference to <code class=\"notranslate\">op2</code>. For instance,</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"// asume the following\ntype SystemOp1 = i64;\ntype SystemOp2 = i64;\n\npub struct SystemA {\n\n}\n\nimpl System for SystemA {\n    fn op1(&amp;self) -&gt; SystemOp1 {\n        self.op2() * 5\n    }\n    fn op2(&amp;self) -&gt; SystemOp2 {\n        3\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-c\">// asume the following</span>\n<span class=\"pl-k\">type</span> <span class=\"pl-smi\">SystemOp1</span> = <span class=\"pl-smi\">i64</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-k\">type</span> <span class=\"pl-smi\">SystemOp2</span> = <span class=\"pl-smi\">i64</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">pub</span> <span class=\"pl-k\">struct</span> <span class=\"pl-smi\">SystemA</span> <span class=\"pl-kos\">{</span>\n\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">impl</span> <span class=\"pl-smi\">System</span> <span class=\"pl-k\">for</span> <span class=\"pl-smi\">SystemA</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">op1</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span><span class=\"pl-smi\">self</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">SystemOp1</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">self</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">op2</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">5</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">op2</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span><span class=\"pl-smi\">self</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">SystemOp2</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c1\">3</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Assume we now want to have a general purpose wrapper that allows us to somehow map the result of <code class=\"notranslate\">op2</code>, say. For instance,</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"pub struct DoubleOp2&lt;S: System&gt; {\n    sys: S,\n}\n\nimpl&lt;S: System&gt; System for DoubleOp2&lt;S&gt; {\n    fn op1(&amp;self) -&gt; SystemOp1 {\n        self.sys.op1()\n    }\n    fn op2(&amp;self) -&gt; SystemOp2 {\n        self.sys.op2() * 2\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">pub</span> <span class=\"pl-k\">struct</span> <span class=\"pl-smi\">DoubleOp2</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">S</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">System</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">sys</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">S</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">impl</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">S</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">System</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-smi\">System</span> <span class=\"pl-k\">for</span> <span class=\"pl-smi\">DoubleOp2</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">S</span><span class=\"pl-kos\">&gt;</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">op1</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span><span class=\"pl-smi\">self</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">SystemOp1</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">self</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">sys</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">op1</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">op2</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span><span class=\"pl-smi\">self</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">SystemOp2</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">self</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">sys</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">op2</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">2</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Clearly, this has the intended effect of changing <code class=\"notranslate\">op2</code>. However, it also has the unintended effect of keeping <code class=\"notranslate\">DoubleOp2&lt;SystemA&gt;::op1()</code> out of sync with <code class=\"notranslate\">DoubleOp2&lt;SystemA&gt;::op2</code>. We got static dispatch when in this context virtual dispatch made more sense.</p>\n<p dir=\"auto\">Of course, in Rust, we usually associate dynamic dispatch with the <code class=\"notranslate\">dyn</code> keyword. However, <code class=\"notranslate\">dyn System</code> only gives a vtable for a particular impl without virtualizing any subsequent calls. In other words, calling <code class=\"notranslate\">op1</code> through <code class=\"notranslate\">DoubleOp2&lt;SystemA&gt; as dyn System</code> will still call <code class=\"notranslate\">SystemA::op2</code>.</p>\n<p dir=\"auto\">Of course, this behaviour may be what is desired. But sometimes, virtualizing at depth is more appropriate. Certainly when adopting OOP patterns.</p>\n<p dir=\"auto\">When I first stumbled upon this, I wondered if I could simply take <code class=\"notranslate\">self</code> as <code class=\"notranslate\">&amp;dyn System</code> (or <code class=\"notranslate\">Arc</code> or <code class=\"notranslate\">Box</code> equivalent, etc.). Nope.</p>\n<p dir=\"auto\">The code I was working on required me to keep the trait <code class=\"notranslate\">System</code> as one unit so I did not investigate possible ways to split it up.</p>\n<p dir=\"auto\">What I came up is passing a &amp;dyn System virtualized self so now System looked like this</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"pub trait System {\n    fn op1(&amp;self, vself: &amp;dyn System) -&gt; SystemOp1;\n    fn op2(&amp;self, vself: &amp;dyn System) -&gt; SystemOp2;\n}\nimpl System for SystemA {\n    fn op1(&amp;self, vself: &amp;dyn System) -&gt; SystemOp1 {\n        vself.op2() * 5\n    }\n    fn op2(&amp;self, vself: &amp;dyn System) -&gt; SystemOp2 {\n        3\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">pub</span> <span class=\"pl-k\">trait</span> <span class=\"pl-smi\">System</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">op1</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span><span class=\"pl-smi\">self</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">vself</span><span class=\"pl-kos\">:</span> <span class=\"pl-c1\">&amp;</span><span class=\"pl-k\">dyn</span> <span class=\"pl-smi\">System</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">SystemOp1</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">op2</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span><span class=\"pl-smi\">self</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">vself</span><span class=\"pl-kos\">:</span> <span class=\"pl-c1\">&amp;</span><span class=\"pl-k\">dyn</span> <span class=\"pl-smi\">System</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">SystemOp2</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n<span class=\"pl-k\">impl</span> <span class=\"pl-smi\">System</span> <span class=\"pl-k\">for</span> <span class=\"pl-smi\">SystemA</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">op1</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span><span class=\"pl-smi\">self</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">vself</span><span class=\"pl-kos\">:</span> <span class=\"pl-c1\">&amp;</span><span class=\"pl-k\">dyn</span> <span class=\"pl-smi\">System</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">SystemOp1</span> <span class=\"pl-kos\">{</span>\n        vself<span class=\"pl-kos\">.</span><span class=\"pl-en\">op2</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">5</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">op2</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span><span class=\"pl-smi\">self</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">vself</span><span class=\"pl-kos\">:</span> <span class=\"pl-c1\">&amp;</span><span class=\"pl-k\">dyn</span> <span class=\"pl-smi\">System</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">SystemOp2</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c1\">3</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">And then calling <code class=\"notranslate\">op2</code> with essentially another copy of <code class=\"notranslate\">self</code>:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"let system = DoubleOp2&lt;SystemA&gt; {};\nsystem.op2(&amp;system2); // works!\"><pre class=\"notranslate\"><span class=\"pl-k\">let</span> system = <span class=\"pl-v\">DoubleOp2</span>&lt;<span class=\"pl-v\">SystemA</span>&gt; <span class=\"pl-kos\">{</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\nsystem<span class=\"pl-kos\">.</span><span class=\"pl-en\">op2</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span>system2<span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// works!</span></pre></div>\n<p dir=\"auto\">Of course this design is a bit clunky, but is very powerful. It allows complete control over what is virtualized and what isn't at any point in the call chain for every implementation.</p>\n<p dir=\"auto\">As I have been thinking about this more and more, I wondered what Rust with this in the language would look like. This RFC proposes a sample syntax (bikeshedding welcome, but please focus on the concepts).</p>\n<h1 dir=\"auto\">Guide-level explanation</h1>\n<p dir=\"auto\">Essentially, we now allow <code class=\"notranslate\">&amp;virt self</code> as a shorthand for the above.</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"pub trait System {\n    fn op1(&amp;virt self) -&gt; SystemOp1;\n    fn op2(&amp;virt self) -&gt; SystemOp2;\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">pub</span> <span class=\"pl-k\">trait</span> <span class=\"pl-smi\">System</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">op1</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span><span class=\"pl-smi\">virt</span> self<span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">SystemOp1</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">op2</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span><span class=\"pl-smi\">virt</span> self<span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">SystemOp2</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">The effect is that rust will manage two pointers - one concretely typed and one dynamic. The The concretely typed (i.e. <code class=\"notranslate\">self</code>) follows the existing Rust rules. The dynamic one is either <code class=\"notranslate\">self</code> as <code class=\"notranslate\">dyn System</code> again or an existing dynamic <code class=\"notranslate\">self</code> (this is like choosing <code class=\"notranslate\">self</code> or <code class=\"notranslate\">vself</code> in the previous section).</p>\n<p dir=\"auto\">Syntax could be e.g.</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"impl System for SystemA {\n    fn op1(&amp;virt self) -&gt; SystemOp1 {\n        // alternative 1\n        virt(self).op2() * 5\n        // alternative 2, I like this one most because it reminds me of C\n        self-&gt;op2() * 5\n        // something else...\n    }\n    fn op2(&amp;virt self) -&gt; SystemOp2 {\n        3\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">impl</span> <span class=\"pl-smi\">System</span> <span class=\"pl-k\">for</span> <span class=\"pl-smi\">SystemA</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">op1</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span><span class=\"pl-smi\">virt</span> self<span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">SystemOp1</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c\">// alternative 1</span>\n        <span class=\"pl-en\">virt</span><span class=\"pl-kos\">(</span><span class=\"pl-smi\">self</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">op2</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">5</span>\n        <span class=\"pl-c\">// alternative 2, I like this one most because it reminds me of C</span>\n        self-&gt;op2<span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">*</span> <span class=\"pl-c1\">5</span>\n        <span class=\"pl-c\">// something else...</span>\n    <span class=\"pl-kos\">}</span>\n    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">op2</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span><span class=\"pl-smi\">virt</span> self<span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">SystemOp2</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-c1\">3</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Working with the second syntax, the difference between <code class=\"notranslate\">self.op2()</code> and <code class=\"notranslate\">self-&gt;op2()</code> would be static vs dynamic dispatch. In other words, it would allow us to call <code class=\"notranslate\">DoubleOp2&lt;SystemA&gt;::op2()</code> from within <code class=\"notranslate\">SystemA::op1()</code> when the call to it is made from <code class=\"notranslate\">DoubleOp2&lt;SystemA&gt;::op1()</code>.</p>\n<p dir=\"auto\">If the called method is also declared virt, using <code class=\"notranslate\">self-&gt;op2()</code> will retain the <code class=\"notranslate\">vself</code> the same as originally passed to <code class=\"notranslate\">op1</code>. Otherwise, it will replace it by <code class=\"notranslate\">self as &amp;dyn System</code>.</p>\n<p dir=\"auto\">Outside of traits, <code class=\"notranslate\">a-&gt;b()</code> wouldn't compile.</p>\n<p dir=\"auto\"><code class=\"notranslate\">[error-xxx] trait virtual methods can only be called virtually from within the trait</code></p>\n<p dir=\"auto\">Instead, only the traditional syntax of <code class=\"notranslate\">a.b()</code> will be allowed and this would simply use a <code class=\"notranslate\">vself</code> of <code class=\"notranslate\">a as &amp;dyn Trait</code>.</p>\n<p dir=\"auto\">I believe this feature will make Rust more user-friendly to people more inclined to think in OOP terms or who (like me) simply found themselves writing code in a domain that is very amenable to an OOP approach.</p>\n<p dir=\"auto\">The syntax changes are relatively minimal and there is no extra cost for code that does not use this feature.</p>\n<h1 dir=\"auto\">Reference-level explanation</h1>\n<p dir=\"auto\">Implementing the above for immutable references is easy. However, mut references are inherently unsafe as we will be aliasing self initially.</p>\n<p dir=\"auto\">Solution is to either outright ban the above  for <code class=\"notranslate\">&amp;mut self</code> or only allow it in unsafe contexts (e.g. treat it as <code class=\"notranslate\">mut ptr</code>).</p>\n<h1 dir=\"auto\">Drawbacks</h1>\n<p dir=\"auto\">I fail to see any major drawbacks besides the override of <code class=\"notranslate\">-&gt;</code>.</p>\n<h1 dir=\"auto\">Rationale and alternatives</h1>\n<ul dir=\"auto\">\n<li>Why is this design the best in the space of possible designs?</li>\n</ul>\n<p dir=\"auto\">It is intuitive and doesn't clutter the signatures unnecessarily.</p>\n<ul dir=\"auto\">\n<li>What other designs have been considered and what is the rationale for not choosing them?</li>\n</ul>\n<p dir=\"auto\">Explicit argument passing considered above.</p>\n<ul dir=\"auto\">\n<li>What is the impact of not doing this?</li>\n</ul>\n<p dir=\"auto\">The impact for experienced Rust users is probably low as they could figure their way to a solution. However, the impact for new Rust users coming from an OOP language may be great.</p>\n<ul dir=\"auto\">\n<li>If this is a language proposal, could this be done in a library or macro instead? Does the proposed change make Rust code easier or harder to read, understand, and maintain?</li>\n</ul>\n<p dir=\"auto\">Admittedly, a lot of the above can be done with a macro but it would be awkward to use on the initial call site. Also, the generated code would necessarily have to expose the <code class=\"notranslate\">vself</code> parameter and the IDE experience may not be that great. Also, a macro would find it hard to differentiate between mut and immutable references and will lead to subpar error messages.</p>\n<h1 dir=\"auto\">Prior art</h1>\n<p dir=\"auto\">OOP languages naturally support this via implicit or explicit virtual markers.</p>\n<h1 dir=\"auto\">Unresolved questions</h1>\n<p dir=\"auto\">The case of <code class=\"notranslate\">mut self</code>.</p>\n<h1 dir=\"auto\">Future possibilities</h1>\n<p dir=\"auto\">I have to think if the above interacts negatively with async but it doesn't seem to on a first pass.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3440",
            "title": "Virtually dispatched trait methods",
            "date_modified": "2023-05-30T20:32:56.000Z",
            "date_published": "2023-05-30T15:37:37.000Z",
            "author": {
                "name": "blagowtf",
                "url": "https://github.com/blagowtf"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/5456384?u=19311cf017def31e83f6c871095f201625f4fb7a&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/Lokathor/rfcs/blob/Lokathor-patch-1/text/0000-unsafe_extern.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3439",
            "title": "Unsafe Extern Blocks",
            "date_modified": "2023-05-30T03:09:42.000Z",
            "date_published": "2023-05-29T05:32:21.000Z",
            "author": {
                "name": "Lokathor",
                "url": "https://github.com/Lokathor"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/79955405?u=c4a50058c2fe0214e4243abaf547ee6e1f59de46&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/Jules-Bertholet/rfcs/blob/implementable-trait-alias/text/3437-implementable-trait-alias.md\">Rendered</a></p>\n<p dir=\"auto\">Allow writing <code class=\"notranslate\">impl</code> blocks for certain trait aliases.</p>\n<p dir=\"auto\"><a href=\"https://internals.rust-lang.org/t/implementable-trait-aliases/18806/\" rel=\"nofollow\">Prior discussion on Internals</a></p>\n<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/rustbot/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/rustbot\">@rustbot</a> label A-traits</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3437",
            "title": "RFC: Implementable trait aliases",
            "date_modified": "2023-05-29T08:16:02.000Z",
            "date_published": "2023-05-24T23:54:47.000Z",
            "author": {
                "name": "Jules-Bertholet",
                "url": "https://github.com/Jules-Bertholet"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/783247?u=9531927576dae8d2a9b8a9c5ebea42db423c01c7&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/m-ou-se/rfcs/blob/export/text/0000-export.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3435",
            "title": "RFC: `#[export]` (dynamically linked crates)",
            "date_modified": "2023-05-30T02:09:36.000Z",
            "date_published": "2023-05-23T13:06:18.000Z",
            "author": {
                "name": "m-ou-se",
                "url": "https://github.com/m-ou-se"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/6801863?u=699ef806e3d9624167be89db3c7217df5193775e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC proposes adding a (defaulted) generic parameter to the <code class=\"notranslate\">core::future::Future</code> trait to allow more flexibility in <code class=\"notranslate\">Future::poll</code>'s second argument (<code class=\"notranslate\">context</code>).</p>\n<p dir=\"auto\">This is would allow new <code class=\"notranslate\">Waker</code>s to be created, that may be used to:</p>\n<ul dir=\"auto\">\n<li>Allow the creation of ABI-stable wakers, allowing futures constructed by a shared object to be run on another's executor.</li>\n<li>Allow wakers to adopt other structures that that of vtable/pointer pairs, which may be desirable to certain domains.</li>\n<li>Allow specific futures to rely on additional behaviour of specific wakers that certain executors may provide.</li>\n</ul>\n<p dir=\"auto\"><a href=\"https://github.com/p-avital/rfcs/blob/generic-futures/text/0000-generic-futures.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3434",
            "title": "Generic Futures",
            "date_modified": "2023-05-25T07:27:38.000Z",
            "date_published": "2023-05-22T08:17:38.000Z",
            "author": {
                "name": "p-avital",
                "url": "https://github.com/p-avital"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/646128?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/jmillikin/upstream__rust-rfcs/blob/unix-socket-ancillary-data/text/3430-unix-socket-ancillary-data-v2.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3430",
            "title": "RFC: Unix socket ancillary data v2",
            "date_modified": "2023-05-16T03:29:58.000Z",
            "date_published": "2023-05-10T08:25:04.000Z",
            "author": {
                "name": "jmillikin",
                "url": "https://github.com/jmillikin"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/2280544?u=7f0df5aa9d0c05db41776dcfacedc8bbc2098746&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><ul dir=\"auto\">\n<li>Permit <code class=\"notranslate\">impl Trait</code> in fn return position within traits and trait impls.</li>\n<li>Allow <code class=\"notranslate\">async fn</code> in traits and trait impls to be used interchangeably with its equivalent <code class=\"notranslate\">impl Trait</code> desugaring.</li>\n<li>Allow trait impls to <code class=\"notranslate\">#[refine]</code> an <code class=\"notranslate\">impl Trait</code> return type with added bounds or a concrete type.</li>\n</ul>\n<h2 dir=\"auto\">Background</h2>\n<p dir=\"auto\">This RFC is a collaboration between myself and <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/compiler-errors/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/compiler-errors\">@compiler-errors</a>, and is based on an <a href=\"https://github.com/rust-lang/rfcs/pull/3193\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3193/hovercard\">earlier RFC</a> by <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/nikomatsakis/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nikomatsakis\">@nikomatsakis</a>.</p>\n<p dir=\"auto\">The primary changes from that RFC are:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">async fn</code> is now allowed to be used interchangeably with its equivalent <code class=\"notranslate\">impl Trait</code> desugaring.</li>\n<li><code class=\"notranslate\">#[refine]</code> is now included as a way to add more information about the returned type in an impl, either by adding bounds to the <code class=\"notranslate\">impl Trait</code> type, or by using a concrete type. <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1177047240\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3245\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3245/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3245\">#3245</a> did not exist at the time of the previous RFC (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1049875633\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3193\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3193/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3193\">#3193</a>), and was added partly in response to discussion there.</li>\n<li>You are now allowed to use <code class=\"notranslate\">dyn Trait</code> on a trait with a method returning <code class=\"notranslate\">impl Trait</code>, as long as that method has a <code class=\"notranslate\">where Self: Sized</code> bound.</li>\n</ul>\n<p dir=\"auto\"><a href=\"https://github.com/tmandry/rfcs/blob/rpitit/text/0000-return-position-impl-trait-in-traits.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3425",
            "title": "Return position `impl Trait` in traits",
            "date_modified": "2023-05-25T03:40:23.000Z",
            "date_published": "2023-04-27T18:25:57.000Z",
            "author": {
                "name": "tmandry",
                "url": "https://github.com/tmandry"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/60961?u=967a9ccc3f7dba0d5d3acd694e3cf81893defe96&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This <em>experimental RFC</em> adds unstable support for single-file<br>\npackages in cargo so we can explore the design and resolve<br>\nquestions with an implementation to collect feedback on.</p>\n<p dir=\"auto\">Single-file packages are <code class=\"notranslate\">.rs</code> files with an embedded<br>\nmanifest.  These will be accepted with just like <code class=\"notranslate\">Cargo.toml</code> files with<br>\n<code class=\"notranslate\">--manifest-path</code>.  <code class=\"notranslate\">cargo</code> will be modified to accept <code class=\"notranslate\">cargo &lt;file&gt;.rs</code> as a<br>\nshortcut to <code class=\"notranslate\">cargo run --manifest-path &lt;file&gt;.rs</code>.  This allows placing<br>\n<code class=\"notranslate\">cargo</code> in a <code class=\"notranslate\">#!</code> line for directly running these files.</p>\n<p dir=\"auto\">Example:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"#!/usr/bin/env cargo\n\n//! ```cargo\n//! [dependencies]\n//! clap = { version = &quot;4.2&quot;, features = [&quot;derive&quot;] }\n//! ```\n\nuse clap::Parser;\n\n#[derive(Parser, Debug)]\n#[clap(version)]\nstruct Args {\n    #[clap(short, long, help = &quot;Path to config&quot;)]\n    config: Option&lt;std::path::PathBuf&gt;,\n}\n\nfn main() {\n    let args = Args::parse();\n    println!(&quot;{:?}&quot;, args);\n}\"><pre class=\"notranslate\">#!/usr/bin/env cargo\n\n<span class=\"pl-c\">//! ```cargo</span>\n<span class=\"pl-c\">//! [dependencies]</span>\n<span class=\"pl-c\">//! clap = { version = \"4.2\", features = [\"derive\"] }</span>\n<span class=\"pl-c\">//! ```</span>\n\nuse clap<span class=\"pl-kos\">::</span><span class=\"pl-v\">Parser</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>derive<span class=\"pl-kos\">(</span><span class=\"pl-v\">Parser</span><span class=\"pl-kos\">,</span> <span class=\"pl-v\">Debug</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n<span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>clap<span class=\"pl-kos\">(</span>version<span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n<span class=\"pl-k\">struct</span> <span class=\"pl-smi\">Args</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>clap<span class=\"pl-kos\">(</span>short, long, help = <span class=\"pl-s\">\"Path to config\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n    <span class=\"pl-c1\">config</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">Option</span><span class=\"pl-kos\">&lt;</span>std<span class=\"pl-kos\">::</span>path<span class=\"pl-kos\">::</span><span class=\"pl-smi\">PathBuf</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">fn</span> <span class=\"pl-en\">main</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">let</span> args = <span class=\"pl-smi\">Args</span><span class=\"pl-kos\">::</span><span class=\"pl-en\">parse</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-en\">println</span><span class=\"pl-en\">!</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"{:?}\"</span>, args<span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<div class=\"highlight highlight-text-shell-session notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ ./prog --config file.toml\nArgs { config: Some(&quot;file.toml&quot;) }\"><pre class=\"notranslate\">$ <span class=\"pl-s1\">./prog --config file.toml</span>\n<span class=\"pl-c1\">Args { config: Some(\"file.toml\") }</span></pre></div>\n<p dir=\"auto\">See <a href=\"https://crates.io/crates/cargo-script-mvs\" rel=\"nofollow\"><code class=\"notranslate\">cargo-script-mvs</code></a> for a demo.</p>\n<p dir=\"auto\"><a href=\"https://github.com/epage/rfcs/blob/cargo-script/text/3424-cargo-script.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3424",
            "title": "eRFC: single-file packages (\"cargo script\") integration",
            "date_modified": "2023-05-26T01:36:03.000Z",
            "date_published": "2023-04-26T21:37:43.000Z",
            "author": {
                "name": "epage",
                "url": "https://github.com/epage"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/13724985?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">RFC for rustdoc-cargo-configuration</p>\n<p dir=\"auto\"><a href=\"https://github.com/tgross35/rfcs/blob/rustdoc-cargo-config/text/0000-rustdoc-cargo-configuration.md\">Rendered</a></p>\n<p dir=\"auto\">This RFC describes a way for <code class=\"notranslate\">rustdoc</code> to get information from <code class=\"notranslate\">Cargo.toml</code>. Its main use case is the Cargo feature descriptions RFC <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1669093537\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3416\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3416/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3416\">#3416</a>.</p>\n<p dir=\"auto\">The implementation goal of this RFC is <em>only</em> to get <code class=\"notranslate\">rustdoc</code> working. However, it describes a flexible configuration that could be implemented for other tools (<code class=\"notranslate\">rustfmt</code>, <code class=\"notranslate\">clippy</code>, or any of the <code class=\"notranslate\">cargo-xyz</code> tools) and can be used by build systems other than Cargo (e.g. <code class=\"notranslate\">Make</code> or some WASM extensions of <code class=\"notranslate\">npm</code>)</p>\n<p dir=\"auto\">Related:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1586028300\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3389\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3389/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3389\">#3389</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"258689168\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rust/issues/44690\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/44690/hovercard\" href=\"https://github.com/rust-lang/rust/issues/44690\">rust-lang/rust#44690</a></li>\n</ul>",
            "url": "https://github.com/rust-lang/rfcs/pull/3421",
            "title": "RFC: Rustdoc configuration via Cargo (includes feature descriptions)",
            "date_modified": "2023-04-24T20:23:17.000Z",
            "date_published": "2023-04-20T09:15:25.000Z",
            "author": {
                "name": "tgross35",
                "url": "https://github.com/tgross35"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/12226503?u=261e4d3e8648e7cfa2c203d5d71ea58f7f97bed4&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">for reference I created an issue about this here: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1668184055\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/libs-team/issues/210\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/libs-team/issues/210/hovercard\" href=\"https://github.com/rust-lang/libs-team/issues/210\">rust-lang/libs-team#210</a> &amp; a rust internals thread here: <a href=\"https://internals.rust-lang.org/t/should-pi-be-available-as-f32-pi-etc/18670\" rel=\"nofollow\">https://internals.rust-lang.org/t/should-pi-be-available-as-f32-pi-etc/18670</a></p>\n<p dir=\"auto\">it's my first time writing an rfc so please let me know if there's anything that can be improved :)</p>\n<p dir=\"auto\"><a href=\"https://github.com/pommicket/rfcs/blob/associated-math-constants/text/0000-associated-math-constants.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3418",
            "title": "RFC: Associated mathematical constants",
            "date_modified": "2023-04-21T18:55:22.000Z",
            "date_published": "2023-04-17T13:47:12.000Z",
            "author": {
                "name": "pommicket",
                "url": "https://github.com/pommicket"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/29864074?u=133f9259e09c1bc34f6f4dd2451554472abddfff&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">based on the discussion from <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1419486184\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rust/issues/103413\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rust/pull/103413/hovercard\" href=\"https://github.com/rust-lang/rust/pull/103413\">rust-lang/rust#103413</a> and <a href=\"https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/deprecating.20spooky-dropck-at-a-distance/near/349392447\" rel=\"nofollow\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/deprecating.20spooky-dropck-at-a-distance/near/349392447</a>. A big thanks to <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/SoniEx2/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SoniEx2\">@SoniEx2</a> for their valuable input in these threads.</p>\n<p dir=\"auto\">I consider this to be solely the responsibility of t-types, but cc @rust-lang/lang, <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/RalfJung/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/RalfJung\">@RalfJung</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/lcnr/rfcs/blob/bb-may-dangle/text/3417-dropck-eyepatch-v3.md\">rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3417",
            "title": "improve `#[may_dangle]` for type parameters",
            "date_modified": "2023-04-29T03:40:42.000Z",
            "date_published": "2023-04-17T11:53:28.000Z",
            "author": {
                "name": "lcnr",
                "url": "https://github.com/lcnr"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/13724985?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">RFC for <code class=\"notranslate\">feature-metadata</code></p>\n<p dir=\"auto\"><a href=\"https://github.com/tgross35/rfcs/blob/feature-descriptions-doc-cfg/text/0000-feature-metadata.md\">Rendered</a></p>\n<p dir=\"auto\">RFC goals: add a way to write feature descriptions and other feature configuration in <code class=\"notranslate\">Cargo.toml</code>. <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1676328953\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3421\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3421/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3421\">#3421</a> will provide a way for <code class=\"notranslate\">rustdoc</code> to use that information.</p>\n<div class=\"highlight highlight-source-toml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# Cargo.toml snippet\n\n[features]\n# current configuration\nfoo = []\n# Add a description to the feature\nbar = { requires = [&quot;foo&quot;], doc = &quot;simple docstring here&quot;}\n# `public` indicates whether or not the feature should be visible in\n# documentation, and defaults to true\nbaz = { requires = [&quot;foo&quot;], public = false }\n\n# Features can also be full tables if descriptions are longer\n[features.qux]\nrequires = [&quot;bar&quot;, &quot;baz&quot;]\ndoc = &quot;&quot;&quot;\n# qux\n\nThis could be a longer description of this feature\n&quot;&quot;&quot;\"><pre class=\"notranslate\"><span class=\"pl-c\"><span class=\"pl-c\">#</span> Cargo.toml snippet</span>\n\n[<span class=\"pl-en\">features</span>]\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> current configuration</span>\n<span class=\"pl-smi\">foo</span> = []\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Add a description to the feature</span>\n<span class=\"pl-smi\">bar</span> = { <span class=\"pl-smi\">requires</span> = [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>], <span class=\"pl-smi\">doc</span> = <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>simple docstring here<span class=\"pl-pds\">\"</span></span>}\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> `public` indicates whether or not the feature should be visible in</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> documentation, and defaults to true</span>\n<span class=\"pl-smi\">baz</span> = { <span class=\"pl-smi\">requires</span> = [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>], <span class=\"pl-smi\">public</span> = <span class=\"pl-c1\">false</span> }\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Features can also be full tables if descriptions are longer</span>\n[<span class=\"pl-en\">features</span>.<span class=\"pl-en\">qux</span>]\n<span class=\"pl-smi\">requires</span> = [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bar<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>baz<span class=\"pl-pds\">\"</span></span>]\n<span class=\"pl-smi\">doc</span> = <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\"># qux</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">This could be a longer description of this feature</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span></pre></div>\n<p dir=\"auto\">Zulip discussion: <a href=\"https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/Descriptions.20for.20feature.20flags\" rel=\"nofollow\">https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/Descriptions.20for.20feature.20flags</a></p>\n<p dir=\"auto\">See also:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"289747867\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/cargo/issues/4956\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/cargo/issues/4956/hovercard\" href=\"https://github.com/rust-lang/cargo/issues/4956\">rust-lang/cargo#4956</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1310055999\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/cargo/issues/10882\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/cargo/issues/10882/hovercard\" href=\"https://github.com/rust-lang/cargo/issues/10882\">rust-lang/cargo#10882</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"467830911\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/cargo/issues/7130\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/cargo/issues/7130/hovercard\" href=\"https://github.com/rust-lang/cargo/issues/7130\">rust-lang/cargo#7130</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1310053486\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/cargo/issues/10881\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/cargo/issues/10881/hovercard\" href=\"https://github.com/rust-lang/cargo/issues/10881\">rust-lang/cargo#10881</a></li>\n</ul>",
            "url": "https://github.com/rust-lang/rfcs/pull/3416",
            "title": "RFC: Cargo feature descriptions & metadata",
            "date_modified": "2023-05-30T20:22:05.000Z",
            "date_published": "2023-04-15T01:20:53.000Z",
            "author": {
                "name": "tgross35",
                "url": "https://github.com/tgross35"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/15658558?u=0864056b73954e3020796850188876984dcb71f4&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Add lossy numeric conversions as an alternative to the <code class=\"notranslate\">as</code> operator, and deprecate <code class=\"notranslate\">as</code> for lossy numeric casts in a future edition, so</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"let n = f64::PI as usize;\"><pre class=\"notranslate\"><span class=\"pl-k\">let</span> n = f64<span class=\"pl-kos\">::</span><span class=\"pl-v\">PI</span> <span class=\"pl-k\">as</span> <span class=\"pl-smi\">usize</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">becomes</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"let n: usize = f64::PI.approx();\n// or\nlet n = f64::PI.approx::&lt;usize&gt;();\"><pre class=\"notranslate\"><span class=\"pl-k\">let</span> n<span class=\"pl-kos\">:</span> <span class=\"pl-smi\">usize</span> = f64<span class=\"pl-kos\">::</span><span class=\"pl-v\">PI</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">approx</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-c\">// or</span>\n<span class=\"pl-k\">let</span> n = f64<span class=\"pl-kos\">::</span><span class=\"pl-v\">PI</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">approx</span><span class=\"pl-kos\">::</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">usize</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\"><a href=\"https://github.com/Aloso/rfcs/blob/lossy-conversion-traits/0000-lossy-conversions.md\"><strong>RENDERED</strong></a></p>\n<p dir=\"auto\">This solves the problem that when you see <code class=\"notranslate\">as</code>, you don't know what it does. Does it truncate? saturate? round towards zero? lose numeric precision? Or is it lossless? When <code class=\"notranslate\">as</code> for lossy conversions is deprecated, <code class=\"notranslate\">as</code> is guaranteed to be lossless.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3415",
            "title": "Traits for lossy conversions",
            "date_modified": "2023-05-06T08:50:14.000Z",
            "date_published": "2023-04-14T21:21:38.000Z",
            "author": {
                "name": "Aloso",
                "url": "https://github.com/Aloso"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/48802534?u=fa54658fd8bcc8eb724b7785b3abccd253d54bc9&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC suggests using the <code class=\"notranslate\">move</code> keyword to explicitly specify the moving binding mode to override match ergonomics</p>\n<p dir=\"auto\"><a href=\"https://github.com/schuelermine/rfcs/blob/explicit-move-binding-mode/text/3410-explicit-move-binding-mode.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3410",
            "title": "Explicit move binding mode",
            "date_modified": "2023-05-17T11:02:12.000Z",
            "date_published": "2023-04-07T21:32:47.000Z",
            "author": {
                "name": "schuelermine",
                "url": "https://github.com/schuelermine"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/28248770?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC proposes a feature to provide a guarantee that function calls are tail-call eliminated via the <code class=\"notranslate\">become</code> keyword. If this guarantee can not be provided an error is generated instead.</p>\n<p dir=\"auto\"><a href=\"https://github.com/phi-go/rfcs/blob/guaranteed-tco/text/0000-explicit-tail-calls.md\">Rendered</a></p>\n<p dir=\"auto\">For reference, previous RFCs <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"33774368\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/81\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/81/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/81\">#81</a> and <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"205914157\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/1888\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/1888/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/1888\">#1888</a>, as well as an earlier issue <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"43705105\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/271\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rfcs/issues/271/hovercard\" href=\"https://github.com/rust-lang/rfcs/issues/271\">#271</a>, and the currently active issue <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"435379329\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/2691\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rfcs/issues/2691/hovercard\" href=\"https://github.com/rust-lang/rfcs/issues/2691\">#2691</a>.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3407",
            "title": "Explicit Tail Calls",
            "date_modified": "2023-05-29T07:39:41.000Z",
            "date_published": "2023-04-06T12:31:47.000Z",
            "author": {
                "name": "phi-go",
                "url": "https://github.com/phi-go"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/6801863?u=699ef806e3d9624167be89db3c7217df5193775e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Implementing FFI-safe futures for <a href=\"https://crates.io/crates/stabby\" rel=\"nofollow\"><code class=\"notranslate\">stabby</code></a> has given me the opportunity to find out just how hard <code class=\"notranslate\">Waker</code>s are to deal with when attempting to pass futures across the FFI boundary.</p>\n<p dir=\"auto\">This RFC aims to make dealing with them not only much easier, but also much more performant than currently possible, removing a tree-sized splinter from the thumb of projects that need to pass futures across the FFI boundary.</p>\n<p dir=\"auto\">Disclaimer: this RFC proposes breaking API for completeness' sake only: my firm opinion is that Rust's backward compatibility guarantees should be protected, and the proposed non-breaking solution's runtime cost, while existent, is likely to become negligible as soon as the common executors switch to the newly proposed constructor for waker vtables.</p>\n<p dir=\"auto\"><a href=\"https://github.com/p-avital/rfcs/blob/stable-wakers/text/0000-stable-wakers.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3404",
            "title": "ABI-stabilize `core::task::Waker`",
            "date_modified": "2023-03-31T08:40:50.000Z",
            "date_published": "2023-03-28T19:07:22.000Z",
            "author": {
                "name": "p-avital",
                "url": "https://github.com/p-avital"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19670?u=d7df321e1e8f2ee042f53aa8990a319210e82534&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Summary:</p>\n<p dir=\"auto\">This proposal will enhance cargo and crates.io through adoption of the Sigstore capabilities and workflows as described in the document.</p>\n<p dir=\"auto\"><a href=\"https://github.com/trustification/rust-rfcs/blob/sigstore-rfc/text/0000-sigstore-integration.md\">Rendered</a></p>\n<p dir=\"auto\">For reference: <a href=\"https://internals.rust-lang.org/t/pre-rfc-using-sigstore-for-signing-and-verifying-crates/18115\" rel=\"nofollow\">pre-RFC discussions</a></p>\n<p dir=\"auto\">Made in collaboration with Tim Pletcher (HPE) and feedback from the community and RFCs from other package ecosystems.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3403",
            "title": "RFC: sigstore and cargo/crates.io",
            "date_modified": "2023-05-27T16:33:30.000Z",
            "date_published": "2023-03-27T11:11:01.000Z",
            "author": {
                "name": "lulf",
                "url": "https://github.com/lulf"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19656507?u=6660e21862872967475a54df58143d25987e350b&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC proposes extending the <code class=\"notranslate\">expect</code> attribute` from <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"310615309\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/2383\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/2383/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/2383\">#2383</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/JarredAllen/rust-lang-rfcs/blob/expect-attribute-count-parameter/text/0000-expect-attribute-count-parameter.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3400",
            "title": "Add a count parameter to the expect attribute",
            "date_modified": "2023-03-17T16:50:26.000Z",
            "date_published": "2023-03-13T21:46:30.000Z",
            "author": {
                "name": "JarredAllen",
                "url": "https://github.com/JarredAllen"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/22198616?u=38fc398a34cdd9e77a0de8733826dc59e6cd5fb9&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Let's make it more elegant to conditionally compile trait bounds by allowing cfg-attributes directly in where clauses.</p>\n<p dir=\"auto\"><a href=\"https://github.com/recatek/rfcs/blob/cfg-attribute-in-where/text/3399-cfg-attribute-in-where.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3399",
            "title": "Allow cfg-attributes in where clauses",
            "date_modified": "2023-03-17T19:41:33.000Z",
            "date_published": "2023-03-11T18:44:58.000Z",
            "author": {
                "name": "recatek",
                "url": "https://github.com/recatek"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/3050060?u=6ca85464b07c5464a052250a4fc3e3f9c03c97ed&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/rust-lang/rust/issues/32104\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/32104/hovercard\">Tracking issue</a></p>\n<p dir=\"auto\">cc @rust-lang/rustdoc</p>\n<p dir=\"auto\"><a href=\"https://github.com/GuillaumeGomez/rfcs/blob/rustdoc-bundle-local-images/text/000-rustdoc-bundle-local-resources.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3397",
            "title": "Bundle local images in rustdoc output",
            "date_modified": "2023-05-21T15:15:15.000Z",
            "date_published": "2023-02-27T09:58:56.000Z",
            "author": {
                "name": "GuillaumeGomez",
                "url": "https://github.com/GuillaumeGomez"
            }
        }
    ]
}