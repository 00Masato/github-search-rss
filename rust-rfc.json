{
    "version": "https://jsonfeed.org/version/1",
    "title": "rust-lang/rfcs pr",
    "home_page_url": "https://00masato.github.io/github-search-rss/rust-rfc.json",
    "feed_url": "https://00masato.github.io/github-search-rss/rust-rfc.json",
    "description": "rust-lang/rfcs pr on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/646128?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/jmillikin/upstream__rust-rfcs/blob/unix-socket-ancillary-data/text/3430-unix-socket-ancillary-data-v2.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3430",
            "title": "RFC: Unix socket ancillary data v2",
            "date_modified": "2023-05-16T00:44:05.000Z",
            "date_published": "2023-05-10T08:25:04.000Z",
            "author": {
                "name": "jmillikin",
                "url": "https://github.com/jmillikin"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/130038091?u=ee14d5421ebc534c38bc2826c1a38a3d07878657&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC proposes Partial Types as universal and type safe solution to \"partial borrowing\" like problems.<br>\nThis RFC is a second try and it is based on <a href=\"https://github.com/rust-lang/rfcs/pull/3420\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3420/hovercard\">Partial Types (v1) #3420</a><br>\nBut I made it much nicer and easier to read.<br>\nI also add new abilities, and add a lot of simplifications in syntax.</p>\n<p dir=\"auto\">This RFC makes a guarantee to borrow-checker that by <code class=\"notranslate\">&amp; var.{x,y}</code> or <code class=\"notranslate\">&amp;mut var.{z,t}</code> borrowing the whole variable and pretending to borrow just several fields is <strong>fully safe</strong>.</p>\n<h3 dir=\"auto\"><strong><a href=\"https://github.com/VitWW/rfcs/blob/partial_types2/text/0000-partial_types.md\">Rendered</a></strong></h3>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"struct Point {x: f64, y: f64, was_x: f64, was_y: f64}\n\nlet mut p1_full = Point {x: 1.0, y: 2.0, was_x: 4.0, was_y: 5.0};\n    // p1_full : Point;\n\nlet p_just_x = Point {x: 1.0};\n    // partial initializing\n    // p_just_x : Point.%{x, %unfill};\n\nlet ref_p_just_x = &amp; p_just_x;\n    // partial referencing\n    // ref_p_justx : &amp; Point.%{x};\n\n// late initialize unfilled fields\np_just_x.y let= 6.0;\n     // p_just_x : Point.%{x, y, %unfill};\np_just_x.was_y let= 14.0;\n     // p_just_x : Point.%{x, y, was_y, %unfill};\np_just_x.was_x let= 76.0;\n     // p_just_x : Point.%full;\n     // p_just_x : Point;\n\n// partial parameters   \nfn x_restore(&amp;mut p1 : &amp;mut Point.%{was_x, %any}, &amp; p2 : &amp; Point.%{x, %any}) {\n    *p1.x = *p2.was_x;\n}\n\n// partial arguments\nx_restore(&amp;mut p1_full, &amp; p1_full);\"><pre class=\"notranslate\"><span class=\"pl-k\">struct</span> <span class=\"pl-smi\">Point</span> <span class=\"pl-kos\">{</span><span class=\"pl-c1\">x</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">f64</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">y</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">f64</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">was_x</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">f64</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">was_y</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">f64</span><span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">let</span> <span class=\"pl-k\">mut</span> p1_full = <span class=\"pl-smi\">Point</span> <span class=\"pl-kos\">{</span><span class=\"pl-c1\">x</span><span class=\"pl-kos\">:</span> <span class=\"pl-c1\">1.0</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">y</span><span class=\"pl-kos\">:</span> <span class=\"pl-c1\">2.0</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">was_x</span><span class=\"pl-kos\">:</span> <span class=\"pl-c1\">4.0</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">was_y</span><span class=\"pl-kos\">:</span> <span class=\"pl-c1\">5.0</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-c\">// p1_full : Point;</span>\n\n<span class=\"pl-k\">let</span> p_just_x = <span class=\"pl-smi\">Point</span> <span class=\"pl-kos\">{</span><span class=\"pl-c1\">x</span><span class=\"pl-kos\">:</span> <span class=\"pl-c1\">1.0</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-c\">// partial initializing</span>\n    <span class=\"pl-c\">// p_just_x : Point.%{x, %unfill};</span>\n\n<span class=\"pl-k\">let</span> ref_p_just_x = <span class=\"pl-c1\">&amp;</span> p_just_x<span class=\"pl-kos\">;</span>\n    <span class=\"pl-c\">// partial referencing</span>\n    <span class=\"pl-c\">// ref_p_justx : &amp; Point.%{x};</span>\n\n<span class=\"pl-c\">// late initialize unfilled fields</span>\np_just_x<span class=\"pl-kos\">.</span><span class=\"pl-c1\">y</span> let= <span class=\"pl-c1\">6.0</span><span class=\"pl-kos\">;</span>\n     <span class=\"pl-c\">// p_just_x : Point.%{x, y, %unfill};</span>\np_just_x<span class=\"pl-kos\">.</span><span class=\"pl-c1\">was_y</span> let= <span class=\"pl-c1\">14.0</span><span class=\"pl-kos\">;</span>\n     <span class=\"pl-c\">// p_just_x : Point.%{x, y, was_y, %unfill};</span>\np_just_x<span class=\"pl-kos\">.</span><span class=\"pl-c1\">was_x</span> let= <span class=\"pl-c1\">76.0</span><span class=\"pl-kos\">;</span>\n     <span class=\"pl-c\">// p_just_x : Point.%full;</span>\n     <span class=\"pl-c\">// p_just_x : Point;</span>\n\n<span class=\"pl-c\">// partial parameters   </span>\n<span class=\"pl-k\">fn</span> <span class=\"pl-en\">x_restore</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span><span class=\"pl-k\">mut</span> p1 <span class=\"pl-kos\">:</span> <span class=\"pl-c1\">&amp;</span><span class=\"pl-k\">mut</span> <span class=\"pl-smi\">Point</span><span class=\"pl-kos\">.</span>%<span class=\"pl-kos\">{</span>was_x<span class=\"pl-kos\">,</span> %<span class=\"pl-smi\">any</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">&amp;</span> p2 <span class=\"pl-kos\">:</span> <span class=\"pl-c1\">&amp;</span> <span class=\"pl-smi\">Point</span><span class=\"pl-kos\">.</span>%<span class=\"pl-kos\">{</span>x<span class=\"pl-kos\">,</span> %<span class=\"pl-smi\">any</span><span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">*</span>p1<span class=\"pl-kos\">.</span><span class=\"pl-c1\">x</span> = <span class=\"pl-c1\">*</span>p2<span class=\"pl-kos\">.</span><span class=\"pl-c1\">was_x</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">// partial arguments</span>\n<span class=\"pl-en\">x_restore</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">&amp;</span><span class=\"pl-k\">mut</span> p1_full<span class=\"pl-kos\">,</span> <span class=\"pl-c1\">&amp;</span> p1_full<span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">where</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">%permit</code>, <code class=\"notranslate\">%miss</code> and <code class=\"notranslate\">%deny</code> are field access;</li>\n<li><code class=\"notranslate\">.%{..}</code> is a detailed type access;</li>\n<li><code class=\"notranslate\">%any</code> is quasi-field filter</li>\n</ul>\n<p dir=\"auto\">This is an alternative to  Partial Types (v1) <a href=\"https://github.com/rust-lang/rfcs/pull/3420\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3420/hovercard\">#3420</a>, Partial borrowing <a href=\"https://github.com/rust-lang/rfcs/issues/1215\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rfcs/issues/1215/hovercard\">issue#1215</a>, View patterns <a href=\"https://internals.rust-lang.org/t/view-types-based-on-pattern-matching/16879\" rel=\"nofollow\">internals#16879</a>, Permissions <a href=\"https://github.com/rust-lang/rfcs/pull/3380\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3380/hovercard\">#3380</a>, Field projection <a href=\"https://github.com/rust-lang/rfcs/pull/3318\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3318/hovercard\">#3318</a>, Fields in Traits <a href=\"https://github.com/rust-lang/rfcs/pull/1546\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/1546/hovercard\">#1546</a>, ImplFields <a href=\"https://github.com/rust-lang/rfcs/issues/3269\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rfcs/issues/3269/hovercard\">issue#3269</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3426",
            "title": "RFC: Partial Types (v2)",
            "date_modified": "2023-05-14T22:10:46.000Z",
            "date_published": "2023-04-27T23:16:14.000Z",
            "author": {
                "name": "VitWW",
                "url": "https://github.com/VitWW"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/2280544?u=7f0df5aa9d0c05db41776dcfacedc8bbc2098746&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><ul dir=\"auto\">\n<li>Permit <code class=\"notranslate\">impl Trait</code> in fn return position within traits and trait impls.</li>\n<li>Allow <code class=\"notranslate\">async fn</code> in traits and trait impls to be used interchangeably with its equivalent <code class=\"notranslate\">impl Trait</code> desugaring.</li>\n<li>Allow trait impls to <code class=\"notranslate\">#[refine]</code> an <code class=\"notranslate\">impl Trait</code> return type with added bounds or a concrete type.</li>\n</ul>\n<h2 dir=\"auto\">Background</h2>\n<p dir=\"auto\">This RFC is a collaboration between myself and <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/compiler-errors/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/compiler-errors\">@compiler-errors</a>, and is based on an <a href=\"https://github.com/rust-lang/rfcs/pull/3193\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3193/hovercard\">earlier RFC</a> by <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/nikomatsakis/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nikomatsakis\">@nikomatsakis</a>.</p>\n<p dir=\"auto\">The primary changes from that RFC are:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">async fn</code> is now allowed to be used interchangeably with its equivalent <code class=\"notranslate\">impl Trait</code> desugaring.</li>\n<li><code class=\"notranslate\">#[refine]</code> is now included as a way to add more information about the returned type in an impl, either by adding bounds to the <code class=\"notranslate\">impl Trait</code> type, or by using a concrete type. <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1177047240\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3245\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3245/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3245\">#3245</a> did not exist at the time of the previous RFC (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1049875633\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3193\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3193/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3193\">#3193</a>), and was added partly in response to discussion there.</li>\n<li>You are now allowed to use <code class=\"notranslate\">dyn Trait</code> on a trait with a method returning <code class=\"notranslate\">impl Trait</code>, as long as that method has a <code class=\"notranslate\">where Self: Sized</code> bound.</li>\n</ul>\n<p dir=\"auto\"><a href=\"https://github.com/tmandry/rfcs/blob/rpitit/text/0000-return-position-impl-trait-in-traits.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3425",
            "title": "Return position `impl Trait` in traits",
            "date_modified": "2023-05-13T10:56:23.000Z",
            "date_published": "2023-04-27T18:25:57.000Z",
            "author": {
                "name": "tmandry",
                "url": "https://github.com/tmandry"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/60961?u=967a9ccc3f7dba0d5d3acd694e3cf81893defe96&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This <em>experimental RFC</em> adds unstable support for single-file<br>\npackages in cargo so we can explore the design and resolve<br>\nquestions with an implementation to collect feedback on.</p>\n<p dir=\"auto\">Single-file packages are <code class=\"notranslate\">.rs</code> files with an embedded<br>\nmanifest.  These will be accepted with just like <code class=\"notranslate\">Cargo.toml</code> files with<br>\n<code class=\"notranslate\">--manifest-path</code>.  <code class=\"notranslate\">cargo</code> will be modified to accept <code class=\"notranslate\">cargo &lt;file&gt;.rs</code> as a<br>\nshortcut to <code class=\"notranslate\">cargo run --manifest-path &lt;file&gt;.rs</code>.  This allows placing<br>\n<code class=\"notranslate\">cargo</code> in a <code class=\"notranslate\">#!</code> line for directly running these files.</p>\n<p dir=\"auto\">Example:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"#!/usr/bin/env cargo\n\n//! ```cargo\n//! [dependencies]\n//! clap = { version = &quot;4.2&quot;, features = [&quot;derive&quot;] }\n//! ```\n\nuse clap::Parser;\n\n#[derive(Parser, Debug)]\n#[clap(version)]\nstruct Args {\n    #[clap(short, long, help = &quot;Path to config&quot;)]\n    config: Option&lt;std::path::PathBuf&gt;,\n}\n\nfn main() {\n    let args = Args::parse();\n    println!(&quot;{:?}&quot;, args);\n}\"><pre class=\"notranslate\">#!/usr/bin/env cargo\n\n<span class=\"pl-c\">//! ```cargo</span>\n<span class=\"pl-c\">//! [dependencies]</span>\n<span class=\"pl-c\">//! clap = { version = \"4.2\", features = [\"derive\"] }</span>\n<span class=\"pl-c\">//! ```</span>\n\nuse clap<span class=\"pl-kos\">::</span><span class=\"pl-v\">Parser</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>derive<span class=\"pl-kos\">(</span><span class=\"pl-v\">Parser</span><span class=\"pl-kos\">,</span> <span class=\"pl-v\">Debug</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n<span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>clap<span class=\"pl-kos\">(</span>version<span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n<span class=\"pl-k\">struct</span> <span class=\"pl-smi\">Args</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>clap<span class=\"pl-kos\">(</span>short, long, help = <span class=\"pl-s\">\"Path to config\"</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span>\n    <span class=\"pl-c1\">config</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">Option</span><span class=\"pl-kos\">&lt;</span>std<span class=\"pl-kos\">::</span>path<span class=\"pl-kos\">::</span><span class=\"pl-smi\">PathBuf</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">fn</span> <span class=\"pl-en\">main</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">let</span> args = <span class=\"pl-smi\">Args</span><span class=\"pl-kos\">::</span><span class=\"pl-en\">parse</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n    <span class=\"pl-en\">println</span><span class=\"pl-en\">!</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"{:?}\"</span>, args<span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<div class=\"highlight highlight-text-shell-session notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ ./prog --config file.toml\nArgs { config: Some(&quot;file.toml&quot;) }\"><pre class=\"notranslate\">$ <span class=\"pl-s1\">./prog --config file.toml</span>\n<span class=\"pl-c1\">Args { config: Some(\"file.toml\") }</span></pre></div>\n<p dir=\"auto\">See <a href=\"https://crates.io/crates/cargo-script-mvs\" rel=\"nofollow\"><code class=\"notranslate\">cargo-script-mvs</code></a> for a demo.</p>\n<p dir=\"auto\"><a href=\"https://github.com/epage/rfcs/blob/cargo-script/text/3424-cargo-script.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3424",
            "title": "eRFC: single-file packages (\"cargo script\") integration",
            "date_modified": "2023-05-05T06:01:58.000Z",
            "date_published": "2023-04-26T21:37:43.000Z",
            "author": {
                "name": "epage",
                "url": "https://github.com/epage"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/13724985?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">RFC for rustdoc-cargo-configuration</p>\n<p dir=\"auto\"><a href=\"https://github.com/tgross35/rfcs/blob/rustdoc-cargo-config/text/0000-rustdoc-cargo-configuration.md\">Rendered</a></p>\n<p dir=\"auto\">This RFC describes a way for <code class=\"notranslate\">rustdoc</code> to get information from <code class=\"notranslate\">Cargo.toml</code>. Its main use case is the Cargo feature descriptions RFC <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1669093537\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3416\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3416/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3416\">#3416</a>.</p>\n<p dir=\"auto\">The implementation goal of this RFC is <em>only</em> to get <code class=\"notranslate\">rustdoc</code> working. However, it describes a flexible configuration that could be implemented for other tools (<code class=\"notranslate\">rustfmt</code>, <code class=\"notranslate\">clippy</code>, or any of the <code class=\"notranslate\">cargo-xyz</code> tools) and can be used by build systems other than Cargo (e.g. <code class=\"notranslate\">Make</code> or some WASM extensions of <code class=\"notranslate\">npm</code>)</p>\n<p dir=\"auto\">Related:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1586028300\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3389\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3389/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3389\">#3389</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"258689168\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rust/issues/44690\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/44690/hovercard\" href=\"https://github.com/rust-lang/rust/issues/44690\">rust-lang/rust#44690</a></li>\n</ul>",
            "url": "https://github.com/rust-lang/rfcs/pull/3421",
            "title": "RFC: Rustdoc configuration via Cargo (includes feature descriptions)",
            "date_modified": "2023-04-24T20:23:17.000Z",
            "date_published": "2023-04-20T09:15:25.000Z",
            "author": {
                "name": "tgross35",
                "url": "https://github.com/tgross35"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/12226503?u=261e4d3e8648e7cfa2c203d5d71ea58f7f97bed4&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">for reference I created an issue about this here: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1668184055\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/libs-team/issues/210\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/libs-team/issues/210/hovercard\" href=\"https://github.com/rust-lang/libs-team/issues/210\">rust-lang/libs-team#210</a> &amp; a rust internals thread here: <a href=\"https://internals.rust-lang.org/t/should-pi-be-available-as-f32-pi-etc/18670\" rel=\"nofollow\">https://internals.rust-lang.org/t/should-pi-be-available-as-f32-pi-etc/18670</a></p>\n<p dir=\"auto\">it's my first time writing an rfc so please let me know if there's anything that can be improved :)</p>\n<p dir=\"auto\"><a href=\"https://github.com/pommicket/rfcs/blob/associated-math-constants/text/0000-associated-math-constants.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3418",
            "title": "RFC: Associated mathematical constants",
            "date_modified": "2023-04-21T18:55:22.000Z",
            "date_published": "2023-04-17T13:47:12.000Z",
            "author": {
                "name": "pommicket",
                "url": "https://github.com/pommicket"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/29864074?u=133f9259e09c1bc34f6f4dd2451554472abddfff&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">based on the discussion from <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1419486184\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rust/issues/103413\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rust/pull/103413/hovercard\" href=\"https://github.com/rust-lang/rust/pull/103413\">rust-lang/rust#103413</a> and <a href=\"https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/deprecating.20spooky-dropck-at-a-distance/near/349392447\" rel=\"nofollow\">https://rust-lang.zulipchat.com/#narrow/stream/213817-t-lang/topic/deprecating.20spooky-dropck-at-a-distance/near/349392447</a>. A big thanks to <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/SoniEx2/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/SoniEx2\">@SoniEx2</a> for their valuable input in these threads.</p>\n<p dir=\"auto\">I consider this to be solely the responsibility of t-types, but cc @rust-lang/lang, <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/RalfJung/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/RalfJung\">@RalfJung</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/lcnr/rfcs/blob/bb-may-dangle/text/3417-dropck-eyepatch-v3.md\">rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3417",
            "title": "improve `#[may_dangle]` for type parameters",
            "date_modified": "2023-04-29T03:40:42.000Z",
            "date_published": "2023-04-17T11:53:28.000Z",
            "author": {
                "name": "lcnr",
                "url": "https://github.com/lcnr"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/13724985?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">RFC for <code class=\"notranslate\">feature-metadata</code></p>\n<p dir=\"auto\"><a href=\"https://github.com/tgross35/rfcs/blob/feature-descriptions-doc-cfg/text/0000-feature-metadata.md\">Rendered</a></p>\n<p dir=\"auto\">RFC goals: add a way to write feature descriptions and other feature configuration in <code class=\"notranslate\">Cargo.toml</code>. <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1676328953\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3421\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3421/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3421\">#3421</a> will provide a way for <code class=\"notranslate\">rustdoc</code> to use that information.</p>\n<div class=\"highlight highlight-source-toml notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"# Cargo.toml snippet\n\n[features]\n# current configuration\nfoo = []\n# Add a description to the feature\nbar = { requires = [&quot;foo&quot;], doc = &quot;simple docstring here&quot;}\n# `public` indicates whether or not the feature should be visible in\n# documentation, and defaults to true\nbaz = { requires = [&quot;foo&quot;], public = false }\n\n# Features can also be full tables if descriptions are longer\n[features.qux]\nrequires = [&quot;bar&quot;, &quot;baz&quot;]\ndoc = &quot;&quot;&quot;\n# qux\n\nThis could be a longer description of this feature\n&quot;&quot;&quot;\"><pre class=\"notranslate\"><span class=\"pl-c\"><span class=\"pl-c\">#</span> Cargo.toml snippet</span>\n\n[<span class=\"pl-en\">features</span>]\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> current configuration</span>\n<span class=\"pl-smi\">foo</span> = []\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Add a description to the feature</span>\n<span class=\"pl-smi\">bar</span> = { <span class=\"pl-smi\">requires</span> = [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>], <span class=\"pl-smi\">doc</span> = <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>simple docstring here<span class=\"pl-pds\">\"</span></span>}\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> `public` indicates whether or not the feature should be visible in</span>\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> documentation, and defaults to true</span>\n<span class=\"pl-smi\">baz</span> = { <span class=\"pl-smi\">requires</span> = [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>], <span class=\"pl-smi\">public</span> = <span class=\"pl-c1\">false</span> }\n\n<span class=\"pl-c\"><span class=\"pl-c\">#</span> Features can also be full tables if descriptions are longer</span>\n[<span class=\"pl-en\">features</span>.<span class=\"pl-en\">qux</span>]\n<span class=\"pl-smi\">requires</span> = [<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bar<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>baz<span class=\"pl-pds\">\"</span></span>]\n<span class=\"pl-smi\">doc</span> = <span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span>\n<span class=\"pl-s\"># qux</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">This could be a longer description of this feature</span>\n<span class=\"pl-s\"><span class=\"pl-pds\">\"\"\"</span></span></pre></div>\n<p dir=\"auto\">Zulip discussion: <a href=\"https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/Descriptions.20for.20feature.20flags\" rel=\"nofollow\">https://rust-lang.zulipchat.com/#narrow/stream/266220-rustdoc/topic/Descriptions.20for.20feature.20flags</a></p>\n<p dir=\"auto\">See also:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"289747867\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/cargo/issues/4956\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/cargo/issues/4956/hovercard\" href=\"https://github.com/rust-lang/cargo/issues/4956\">rust-lang/cargo#4956</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1310055999\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/cargo/issues/10882\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/cargo/issues/10882/hovercard\" href=\"https://github.com/rust-lang/cargo/issues/10882\">rust-lang/cargo#10882</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"467830911\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/cargo/issues/7130\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/cargo/issues/7130/hovercard\" href=\"https://github.com/rust-lang/cargo/issues/7130\">rust-lang/cargo#7130</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1310053486\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/cargo/issues/10881\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/cargo/issues/10881/hovercard\" href=\"https://github.com/rust-lang/cargo/issues/10881\">rust-lang/cargo#10881</a></li>\n</ul>",
            "url": "https://github.com/rust-lang/rfcs/pull/3416",
            "title": "RFC: Cargo feature descriptions & metadata",
            "date_modified": "2023-05-05T21:17:53.000Z",
            "date_published": "2023-04-15T01:20:53.000Z",
            "author": {
                "name": "tgross35",
                "url": "https://github.com/tgross35"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/15658558?u=0864056b73954e3020796850188876984dcb71f4&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Add lossy numeric conversions as an alternative to the <code class=\"notranslate\">as</code> operator, and deprecate <code class=\"notranslate\">as</code> for lossy numeric casts in a future edition, so</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"let n = f64::PI as usize;\"><pre class=\"notranslate\"><span class=\"pl-k\">let</span> n = f64<span class=\"pl-kos\">::</span><span class=\"pl-v\">PI</span> <span class=\"pl-k\">as</span> <span class=\"pl-smi\">usize</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">becomes</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"let n: usize = f64::PI.approx();\n// or\nlet n = f64::PI.approx::&lt;usize&gt;();\"><pre class=\"notranslate\"><span class=\"pl-k\">let</span> n<span class=\"pl-kos\">:</span> <span class=\"pl-smi\">usize</span> = f64<span class=\"pl-kos\">::</span><span class=\"pl-v\">PI</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">approx</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-c\">// or</span>\n<span class=\"pl-k\">let</span> n = f64<span class=\"pl-kos\">::</span><span class=\"pl-v\">PI</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">approx</span><span class=\"pl-kos\">::</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">usize</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\"><a href=\"https://github.com/Aloso/rfcs/blob/lossy-conversion-traits/0000-lossy-conversions.md\"><strong>RENDERED</strong></a></p>\n<p dir=\"auto\">This solves the problem that when you see <code class=\"notranslate\">as</code>, you don't know what it does. Does it truncate? saturate? round towards zero? lose numeric precision? Or is it lossless? When <code class=\"notranslate\">as</code> for lossy conversions is deprecated, <code class=\"notranslate\">as</code> is guaranteed to be lossless.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3415",
            "title": "Traits for lossy conversions",
            "date_modified": "2023-05-06T08:50:14.000Z",
            "date_published": "2023-04-14T21:21:38.000Z",
            "author": {
                "name": "Aloso",
                "url": "https://github.com/Aloso"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1779619?u=b10930ca42037569e89ac4145347ca24a1cf5e8f&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">(Split off from <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1590342409\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3390\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3390/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3390\">#3390</a> after discussions with t-types.)</p>\n<p dir=\"auto\"><a href=\"https://github.com/SoniEx2/rfcs/blob/split-maydangle/text/3414-deprecate-spooky-dropck-at-a-distance.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3414",
            "title": "Deprecate spooky-dropck-at-a-distance",
            "date_modified": "2023-04-22T20:36:14.000Z",
            "date_published": "2023-04-14T17:58:48.000Z",
            "author": {
                "name": "SoniEx2",
                "url": "https://github.com/SoniEx2"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/130038091?u=ee14d5421ebc534c38bc2826c1a38a3d07878657&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC proposes new abilities for <code class=\"notranslate\">as</code>(as_cast) casting <code class=\"notranslate\">From</code> Trait implementations.</p>\n<p dir=\"auto\">Like this:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"let foo = &quot;my string&quot; as String;\n\nlet baz = 12u32 as Ipv4Addr;\n\nlet bar = 12 as Rc&lt;i32&gt;;\"><pre class=\"notranslate\"><span class=\"pl-k\">let</span> foo = <span class=\"pl-s\">\"my string\"</span> <span class=\"pl-k\">as</span> <span class=\"pl-smi\">String</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">let</span> baz = <span class=\"pl-c1\">12u32</span> <span class=\"pl-k\">as</span> <span class=\"pl-smi\">Ipv4Addr</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">let</span> bar = <span class=\"pl-c1\">12</span> <span class=\"pl-k\">as</span> <span class=\"pl-smi\">Rc</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">i32</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\"><a href=\"https://github.com/VitWW/rfcs/blob/casting_from_by_as/text/0000-casting_from_by_as.md\">Rendered</a></p>\n<p dir=\"auto\">This proposal was inspired by \"smart constructors\" discussion in <a href=\"https://github.com/VitWW/rfcs/blob/derefered_types/text/0000-derefered_composite_types.md\">#3408</a> RFC.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3413",
            "title": "RFC: Casting From by as_cast",
            "date_modified": "2023-04-14T10:35:55.000Z",
            "date_published": "2023-04-12T11:28:19.000Z",
            "author": {
                "name": "VitWW",
                "url": "https://github.com/VitWW"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1146369?u=057e912610899b0df3dd1915f4502e9c8ac7dbc5&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">I suggest having a strict type for a value of a range. This type can be converted into another value of another range. The solution to the problem of conversion from two integer ranges is always the same, as far as I know, and so it can easily be written once for everyone and used. I think such a small but helpful addition to Rust's standard library types, such as <code class=\"notranslate\">std::ops::Range</code> and <code class=\"notranslate\">std::ops::RangeInclusive</code>, would enrich their interface and make the user code a little more stable by providing guarantees that specific values always lie within the range from which it was taken from.</p>\n<p dir=\"auto\"><a href=\"https://github.com/vityafx/rfcs/blob/master/text/0000-range-get-and-convert-methods.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3412",
            "title": "Proposal: add range value type and range value conversions between different ranges.",
            "date_modified": "2023-05-12T23:30:12.000Z",
            "date_published": "2023-04-10T09:11:21.000Z",
            "author": {
                "name": "vityafx",
                "url": "https://github.com/vityafx"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/43198?u=4e88d47bc79d87f09f463582681d29f1ed6f478e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This fixes the 404 not-found handling so that the not-found page can load javascript/css resources. Otherwise pages like <a href=\"https://rust-lang.github.io/rfcs/foo\" rel=\"nofollow\">https://rust-lang.github.io/rfcs/foo</a> do not render correctly.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3411",
            "title": "Fix 404 handling",
            "date_modified": "2023-04-09T20:06:47.000Z",
            "date_published": "2023-04-09T20:05:53.000Z",
            "author": {
                "name": "ehuss",
                "url": "https://github.com/ehuss"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/48802534?u=fa54658fd8bcc8eb724b7785b3abccd253d54bc9&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC suggests using the <code class=\"notranslate\">move</code> keyword to explicitly specify the moving binding mode to override match ergonomics</p>\n<p dir=\"auto\"><a href=\"https://github.com/schuelermine/rfcs/blob/explicit-move-binding-mode/text/3410-explicit-move-binding-mode.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3410",
            "title": "Explicit move binding mode",
            "date_modified": "2023-04-21T16:55:40.000Z",
            "date_published": "2023-04-07T21:32:47.000Z",
            "author": {
                "name": "schuelermine",
                "url": "https://github.com/schuelermine"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/28248770?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC proposes a feature to provide a guarantee that function calls are tail-call eliminated via the <code class=\"notranslate\">become</code> keyword. If this guarantee can not be provided an error is generated instead.</p>\n<p dir=\"auto\"><a href=\"https://github.com/phi-go/rfcs/blob/guaranteed-tco/text/0000-explicit-tail-calls.md\">Rendered</a></p>\n<p dir=\"auto\">For reference, previous RFCs <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"33774368\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/81\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/81/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/81\">#81</a> and <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"205914157\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/1888\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/1888/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/1888\">#1888</a>, as well as an earlier issue <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"43705105\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/271\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rfcs/issues/271/hovercard\" href=\"https://github.com/rust-lang/rfcs/issues/271\">#271</a>, and the currently active issue <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"435379329\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/2691\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rfcs/issues/2691/hovercard\" href=\"https://github.com/rust-lang/rfcs/issues/2691\">#2691</a>.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3407",
            "title": "Explicit Tail Calls",
            "date_modified": "2023-05-15T15:34:58.000Z",
            "date_published": "2023-04-06T12:31:47.000Z",
            "author": {
                "name": "phi-go",
                "url": "https://github.com/phi-go"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/6801863?u=699ef806e3d9624167be89db3c7217df5193775e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Implementing FFI-safe futures for <a href=\"https://crates.io/crates/stabby\" rel=\"nofollow\"><code class=\"notranslate\">stabby</code></a> has given me the opportunity to find out just how hard <code class=\"notranslate\">Waker</code>s are to deal with when attempting to pass futures across the FFI boundary.</p>\n<p dir=\"auto\">This RFC aims to make dealing with them not only much easier, but also much more performant than currently possible, removing a tree-sized splinter from the thumb of projects that need to pass futures across the FFI boundary.</p>\n<p dir=\"auto\">Disclaimer: this RFC proposes breaking API for completeness' sake only: my firm opinion is that Rust's backward compatibility guarantees should be protected, and the proposed non-breaking solution's runtime cost, while existent, is likely to become negligible as soon as the common executors switch to the newly proposed constructor for waker vtables.</p>\n<p dir=\"auto\"><a href=\"https://github.com/p-avital/rfcs/blob/stable-wakers/text/0000-stable-wakers.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3404",
            "title": "ABI-stabilize `core::task::Waker`",
            "date_modified": "2023-03-31T08:40:50.000Z",
            "date_published": "2023-03-28T19:07:22.000Z",
            "author": {
                "name": "p-avital",
                "url": "https://github.com/p-avital"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19670?u=d7df321e1e8f2ee042f53aa8990a319210e82534&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Summary:</p>\n<p dir=\"auto\">This proposal will enhance cargo and crates.io through adoption of the Sigstore capabilities and workflows as described in the document.</p>\n<p dir=\"auto\"><a href=\"https://github.com/trustification/rust-rfcs/blob/sigstore-rfc/text/0000-sigstore-integration.md\">Rendered</a></p>\n<p dir=\"auto\">For reference: <a href=\"https://internals.rust-lang.org/t/pre-rfc-using-sigstore-for-signing-and-verifying-crates/18115\" rel=\"nofollow\">pre-RFC discussions</a></p>\n<p dir=\"auto\">Made in collaboration with Tim Pletcher (HPE) and feedback from the community and RFCs from other package ecosystems.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3403",
            "title": "RFC: sigstore and cargo/crates.io",
            "date_modified": "2023-04-04T17:24:21.000Z",
            "date_published": "2023-03-27T11:11:01.000Z",
            "author": {
                "name": "lulf",
                "url": "https://github.com/lulf"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19656507?u=6660e21862872967475a54df58143d25987e350b&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC proposes extending the <code class=\"notranslate\">expect</code> attribute` from <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"310615309\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/2383\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/2383/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/2383\">#2383</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/JarredAllen/rust-lang-rfcs/blob/expect-attribute-count-parameter/text/0000-expect-attribute-count-parameter.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3400",
            "title": "Add a count parameter to the expect attribute",
            "date_modified": "2023-03-17T16:50:26.000Z",
            "date_published": "2023-03-13T21:46:30.000Z",
            "author": {
                "name": "JarredAllen",
                "url": "https://github.com/JarredAllen"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/22198616?u=38fc398a34cdd9e77a0de8733826dc59e6cd5fb9&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Let's make it more elegant to conditionally compile trait bounds by allowing cfg-attributes directly in where clauses.</p>\n<p dir=\"auto\"><a href=\"https://github.com/recatek/rfcs/blob/cfg-attribute-in-where/text/3399-cfg-attribute-in-where.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3399",
            "title": "Allow cfg-attributes in where clauses",
            "date_modified": "2023-03-17T19:41:33.000Z",
            "date_published": "2023-03-11T18:44:58.000Z",
            "author": {
                "name": "recatek",
                "url": "https://github.com/recatek"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/3050060?u=6ca85464b07c5464a052250a4fc3e3f9c03c97ed&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/rust-lang/rust/issues/32104\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/32104/hovercard\">Tracking issue</a></p>\n<p dir=\"auto\">cc @rust-lang/rustdoc</p>\n<p dir=\"auto\"><a href=\"https://github.com/GuillaumeGomez/rfcs/blob/rustdoc-bundle-local-images/text/000-rustdoc-bundle-local-resources.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3397",
            "title": "Bundle local images in rustdoc output",
            "date_modified": "2023-05-14T15:14:26.000Z",
            "date_published": "2023-02-27T09:58:56.000Z",
            "author": {
                "name": "GuillaumeGomez",
                "url": "https://github.com/GuillaumeGomez"
            }
        }
    ]
}