{
    "version": "https://jsonfeed.org/version/1",
    "title": "rust-lang/rfcs pr",
    "home_page_url": "https://00masato.github.io/github-search-rss/rust-rfc.json",
    "feed_url": "https://00masato.github.io/github-search-rss/rust-rfc.json",
    "description": "rust-lang/rfcs pr on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/in/2740?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://renovatebot.com\" rel=\"nofollow\"><img src=\"https://camo.githubusercontent.com/afc1c2a58082d5a20bbb5b81e6a885ed24e9bbd163f4ee38779d821e9dbfa6e8/68747470733a2f2f6170702e72656e6f76617465626f742e636f6d2f696d616765732f62616e6e65722e737667\" alt=\"Mend Renovate\" data-canonical-src=\"https://app.renovatebot.com/images/banner.svg\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">This PR contains the following updates:</p>\n<table role=\"table\">\n<thead>\n<tr>\n<th>Package</th>\n<th>Type</th>\n<th>Update</th>\n<th>Change</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://togithub.com/actions/checkout\" rel=\"nofollow\">actions/checkout</a></td>\n<td>action</td>\n<td>digest</td>\n<td><code class=\"notranslate\">b4ffde6</code> -&gt; <code class=\"notranslate\">0ad4b8f</code></td>\n</tr>\n</tbody>\n</table>\n<hr>\n<h3 dir=\"auto\">Configuration</h3>\n<p dir=\"auto\">📅 <strong>Schedule</strong>: Branch creation - \"before 4am on the first day of the month\" (UTC), Automerge - At any time (no schedule defined).</p>\n<p dir=\"auto\">🚦 <strong>Automerge</strong>: Disabled by config. Please merge this manually once you are satisfied.</p>\n<p dir=\"auto\">♻ <strong>Rebasing</strong>: Whenever PR becomes conflicted, or you tick the rebase/retry checkbox.</p>\n<p dir=\"auto\">🔕 <strong>Ignore</strong>: Close this PR and you won't be reminded about this update again.</p>\n<hr>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> If you want to rebase/retry this PR, check this box</li>\n</ul>\n<hr>\n<p dir=\"auto\">This PR has been generated by <a href=\"https://www.mend.io/free-developer-tools/renovate/\" rel=\"nofollow\">Mend Renovate</a>. View repository job log <a href=\"https://developer.mend.io/github/rust-lang/rfcs\" rel=\"nofollow\">here</a>.</p>\n",
            "url": "https://github.com/rust-lang/rfcs/pull/3620",
            "title": "Update actions/checkout digest to 0ad4b8f",
            "date_modified": "2024-05-01T13:09:32.000Z",
            "date_published": "2024-05-01T00:31:23.000Z",
            "author": {
                "name": "renovate",
                "url": "https://github.com/apps/renovate"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/43425812?u=f2f8ffc3e131abd598a2ae1b7832c1657ddef687&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #3618.\">fixes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2272444805\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3618\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rfcs/issues/3618/hovercard\" href=\"https://github.com/rust-lang/rfcs/issues/3618\">#3618</a>.</p>\n<p dir=\"auto\"><a href=\"https://github.com/hamirmahal/rfcs/blob/patch-2/text/0344-conventions-galore.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3619",
            "title": "docs: `0344-conventions-galore.md` should use `_`",
            "date_modified": "2024-04-30T21:03:36.000Z",
            "date_published": "2024-04-30T21:02:18.000Z",
            "author": {
                "name": "hamirmahal",
                "url": "https://github.com/hamirmahal"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1076834?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">To fully stabilize, in Rust 2024, the Lifetime Capture Rules 2024 that we accepted in RFC 3498, we need to stabilize some means of precise capturing.  This RFC provides that means.</p>\n<p dir=\"auto\">This RFC adds <code class=\"notranslate\">use&lt;..&gt;</code> syntax for specifying which generic parameters should be captured in an opaque RPIT-like <code class=\"notranslate\">impl Trait</code> type, e.g. <code class=\"notranslate\">impl use&lt;'t, T&gt; Trait</code>.  This solves the problem of overcapturing and will allow the Lifetime Capture Rules 2024 to be fully stabilized for RPIT in Rust 2024.</p>\n<p dir=\"auto\">One way to think about <code class=\"notranslate\">use&lt;..&gt;</code> is that, in Rust <code class=\"notranslate\">use</code> brings things <em>into scope</em>, and here we are bringing certain generic parameters into scope for the hidden type.</p>\n<p dir=\"auto\">For some history about the progress toward this feature predating this RFC, see <a href=\"https://github.com/rust-lang/rfcs/pull/3617#issuecomment-2076349223\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3617/hovercard\">this comment</a>.</p>\n<p dir=\"auto\"><a href=\"https://github.com/rust-lang/rfcs/blob/TC/precise-capturing/text/3617-precise-capturing.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3617",
            "title": "Precise capturing",
            "date_modified": "2024-04-29T23:57:54.000Z",
            "date_published": "2024-04-24T07:57:17.000Z",
            "author": {
                "name": "traviscross",
                "url": "https://github.com/traviscross"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/18526288?u=a851e2ec349404d3ad63a62786fe9a35009fa8d1&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Third-party <code class=\"notranslate\">derive</code> macros want to be able to use the same direct discriminant access to the <code class=\"notranslate\">enum</code> for which they're implementing a trait that the core derive macro does, which seems entirely reasonable.</p>\n<p dir=\"auto\">To allow that without imposing a new category of major breaking changes on library authors, this proposes a <em>safe</em> built-in way for getting the discriminant as a primitive integer -- not an opaque <code class=\"notranslate\">mem::Discriminant</code> -- for anything on which you can see private fields.</p>\n<p dir=\"auto\"><a href=\"https://github.com/scottmcm/rfcs/blob/enum-discriminant/text/3607-enum-discriminant.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3607",
            "title": "Add an expression for direct access to an enum's discriminant",
            "date_modified": "2024-04-17T18:42:58.000Z",
            "date_published": "2024-04-07T04:18:53.000Z",
            "author": {
                "name": "scottmcm",
                "url": "https://github.com/scottmcm"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/783247?u=b4f1eeea8dd687c853f13caa8e40eced78c65cf1&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This is one of the results of the <a href=\"https://rust-lang.zulipchat.com/#narrow/stream/403629-t-lang.2Ftemporary-lifetimes-2024\" rel=\"nofollow\">temporary lifetimes effort</a> by <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/nikomatsakis/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nikomatsakis\">@nikomatsakis</a> <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/dingxiangfei2009/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dingxiangfei2009\">@dingxiangfei2009</a> and me.</p>\n<p dir=\"auto\">Originally, we were working on a much larger RFC with several changes, but decided to not block small things on big things.</p>\n<p dir=\"auto\">This part is quite small, but requires an edition change.</p>\n<p dir=\"auto\"><a href=\"https://github.com/m-ou-se/rfcs/blob/tailtemp/text/3606-temporary-lifetimes-in-tail-expressions.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3606",
            "title": "RFC: Drop temporaries in tail expressions before local variables",
            "date_modified": "2024-04-24T14:46:41.000Z",
            "date_published": "2024-04-02T14:34:50.000Z",
            "author": {
                "name": "m-ou-se",
                "url": "https://github.com/m-ou-se"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/5026283?u=5904dba48d84a78b16221f9d91cfdd86c4985e5c&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/chorman0773/rust-rfcs/blob/freeze-uninit/text/0000-freeze-uninit.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3605",
            "title": "RFC: Add `freeze` intrinsic and related library functions",
            "date_modified": "2024-04-19T07:51:25.000Z",
            "date_published": "2024-04-02T04:01:02.000Z",
            "author": {
                "name": "chorman0773",
                "url": "https://github.com/chorman0773"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/146410045?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">I think this a good quality of life proposal similar to the <a href=\"https://rust-lang.github.io/rfcs/3107-derive-default-enum.html\" rel=\"nofollow\">proposal to add a derive Default for enums</a>, not big in scope or magnitude.<br>\nTLDR:<br>\nI want to make a derive macro for TryFrom and Into, that generate an impl of TryFrom and Into for any C-Style Enum:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"//using these two macros\n#[derive(FromInt, IntoInt)] // names subject to change\nenum CStyleEnum {\n   Variant1 = 10,\n   Variant2 = 20,\n   ...\n}\n\n//convert from a number to the C-style enum easily\nlet from_num = CStyleEnum::try_from(10); // Ok(CStyleEnum::Variant1)\nlet failed_from = CStyleEnum::try_from(21); // Err(())\n//convert into a number from a C-style enum more generically\nlet into_num = CStyleEnum::Variant2.into(); //20\"><pre class=\"notranslate\"><span class=\"pl-c\">//using these two macros</span>\n<span class=\"pl-c1\">#<span class=\"pl-kos\">[</span>derive<span class=\"pl-kos\">(</span><span class=\"pl-v\">FromInt</span><span class=\"pl-kos\">,</span> <span class=\"pl-v\">IntoInt</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">]</span></span> <span class=\"pl-c\">// names subject to change</span>\n<span class=\"pl-k\">enum</span> <span class=\"pl-smi\">CStyleEnum</span> <span class=\"pl-kos\">{</span>\n   <span class=\"pl-v\">Variant1</span> = <span class=\"pl-c1\">10</span><span class=\"pl-kos\">,</span>\n   <span class=\"pl-v\">Variant2</span> = <span class=\"pl-c1\">20</span><span class=\"pl-kos\">,</span>\n   ...\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-c\">//convert from a number to the C-style enum easily</span>\n<span class=\"pl-k\">let</span> from_num = <span class=\"pl-smi\">CStyleEnum</span><span class=\"pl-kos\">::</span><span class=\"pl-en\">try_from</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">10</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// Ok(CStyleEnum::Variant1)</span>\n<span class=\"pl-k\">let</span> failed_from = <span class=\"pl-smi\">CStyleEnum</span><span class=\"pl-kos\">::</span><span class=\"pl-en\">try_from</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">21</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">// Err(())</span>\n<span class=\"pl-c\">//convert into a number from a C-style enum more generically</span>\n<span class=\"pl-k\">let</span> into_num = <span class=\"pl-smi\">CStyleEnum</span><span class=\"pl-kos\">::</span><span class=\"pl-v\">Variant2</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">into</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span> <span class=\"pl-c\">//20</span></pre></div>\n<p dir=\"auto\"><a href=\"https://github.com/agreyyy/rfcs-c_style_enums/blob/master/text/3604-derive_c-enum_integer_conversions.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3604",
            "title": "RFC: Add a special TryFrom and Into derive macro, specifically for C-Style enums",
            "date_modified": "2024-04-14T10:40:08.000Z",
            "date_published": "2024-04-01T13:10:56.000Z",
            "author": {
                "name": "agreyyy",
                "url": "https://github.com/agreyyy"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1295100?u=b0540abe14ddfb8c24578add2a8c960bc704a661&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Re-organise the compiler team:</p>\n<ul dir=\"auto\">\n<li>Re-define and rename the tiers of membership</li>\n<li>Change how team members and contributors are promoted</li>\n<li>Document expectations of team members</li>\n<li>Establish mechanism for scaling additional responsibilities that team members take on and recognising these contributions</li>\n</ul>\n<p dir=\"auto\"><a href=\"https://github.com/davidtwco/rfcs/blob/compiler-team-trusted-contrib-maintainer/text/0000-compiler-team-trusted-contrib-maintainer.md\">Rendered text</a></p>\n<p dir=\"auto\">@rust-lang/compiler @rust-lang/compiler-contributors</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3599",
            "title": "re-organise the compiler team",
            "date_modified": "2024-04-29T10:50:01.000Z",
            "date_published": "2024-03-28T15:14:51.000Z",
            "author": {
                "name": "davidtwco",
                "url": "https://github.com/davidtwco"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/164242179?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">More details are in the MD himself.<br>\nFor more possible info see:<br>\n<a href=\"https://internals.rust-lang.org/t/stack-aligment-in-a-callback-function/2050\" rel=\"nofollow\">https://internals.rust-lang.org/t/stack-aligment-in-a-callback-function/2050</a><br>\n<a href=\"https://clang.llvm.org/docs/AttributeReference.html#force-align-arg-pointer\" rel=\"nofollow\">https://clang.llvm.org/docs/AttributeReference.html#force-align-arg-pointer</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/benisxdxd/rfcs/blob/master/text/3594-expose-stackrealign-attribute.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3594",
            "title": "RFC: Add realign_stack attribute to rustc",
            "date_modified": "2024-05-01T03:24:13.000Z",
            "date_published": "2024-03-26T00:19:11.000Z",
            "author": {
                "name": "benisxdxd",
                "url": "https://github.com/benisxdxd"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/803701?u=ebadc7c37e0aea6c03a620fcdc9533ddf632e587&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Beginning with the 2024 edition, reserve the syntax <code class=\"notranslate\">#\"foo\"#</code>, as a way of future-proofing against future language changes.</p>\n<p dir=\"auto\"><a href=\"https://github.com/pitaj/rfcs/blob/unprefixed-strings/text/3593-unprefixed_guarded_strings.md\">Rendered</a></p>\n<p dir=\"auto\">Note: much of the text of this RFC is directly adapted from <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"848793381\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3101\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3101/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3101\">#3101</a>. Thank you to <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/bstrie/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bstrie\">@bstrie</a> and all other contributors there for paving the path.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3593",
            "title": "RFC: Reserve unprefixed guarded string literals in Edition 2024",
            "date_modified": "2024-04-13T15:38:42.000Z",
            "date_published": "2024-03-25T03:47:02.000Z",
            "author": {
                "name": "pitaj",
                "url": "https://github.com/pitaj"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1786500?u=9d2e4fd7ebf17905de63ea2f3b6dc4e67bc446ba&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/obsgolem/rfcs/blob/master/text/0000-import-trait-methods.md\">Rendered</a></p>\n<p dir=\"auto\">This feature fully supplants <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"631148470\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rust/issues/73001\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rust/pull/73001/hovercard\" href=\"https://github.com/rust-lang/rust/pull/73001\">rust-lang/rust#73001</a>, allowing you to do things like:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"use Default::default;\n\nstruct S {\n    a: HashMap&lt;i32, i32&gt;,\n}\n\nimpl S {\n    fn new() -&gt; S {\n        S {\n            a: default()\n        }\n    }\n}\"><pre class=\"notranslate\"><span class=\"pl-k\">use</span> <span class=\"pl-smi\">Default</span><span class=\"pl-kos\">::</span>default<span class=\"pl-kos\">;</span>\n\n<span class=\"pl-k\">struct</span> <span class=\"pl-smi\">S</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">a</span><span class=\"pl-kos\">:</span> <span class=\"pl-smi\">HashMap</span><span class=\"pl-kos\">&lt;</span><span class=\"pl-smi\">i32</span><span class=\"pl-kos\">,</span> <span class=\"pl-smi\">i32</span><span class=\"pl-kos\">&gt;</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span>\n\n<span class=\"pl-k\">impl</span> <span class=\"pl-smi\">S</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-k\">fn</span> <span class=\"pl-en\">new</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> -&gt; <span class=\"pl-smi\">S</span> <span class=\"pl-kos\">{</span>\n        <span class=\"pl-smi\">S</span> <span class=\"pl-kos\">{</span>\n            <span class=\"pl-c1\">a</span><span class=\"pl-kos\">:</span> <span class=\"pl-en\">default</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>\n        <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">and more.</p>\n<p dir=\"auto\">This is my first RFC, please forgive any missteps I make in the process.</p>\n<p dir=\"auto\">Partially completes <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"226922754\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/1995\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rfcs/issues/1995/hovercard\" href=\"https://github.com/rust-lang/rfcs/issues/1995\">#1995</a>.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3591",
            "title": "Add support for `use Trait::func`",
            "date_modified": "2024-03-31T03:16:03.000Z",
            "date_published": "2024-03-19T21:57:05.000Z",
            "author": {
                "name": "obsgolem",
                "url": "https://github.com/obsgolem"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1945?u=15e6bc170aee701847bbac4062aca05ed99cbf77&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a href=\"https://github.com/casey/rfcs/blob/respect-lockfiles/text/0000-respect-lockfiles.md\">Rendered</a></p>\n<p dir=\"auto\">Currently, <code class=\"notranslate\">cargo install</code> does not respect lockfiles by default, which causes breakages when dependencies release breaking but semver-compatible versions. This RFC proposes to change <code class=\"notranslate\">cargo install</code> to respect lockfiles by default.</p>\n<p dir=\"auto\">There's been a lot of discussion on <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"471876873\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/cargo/issues/7169\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/cargo/issues/7169/hovercard\" href=\"https://github.com/rust-lang/cargo/issues/7169\">rust-lang/cargo#7169</a> without much progress, so I thought it would be productive to open an RFC proposing changing the default behavior of <code class=\"notranslate\">cargo install</code> to respect lockfiles by default, to provide a concrete proposal that can be discussed.</p>\n<p dir=\"auto\">Even if this RFC is ultimately rejected, it will provide some forward progress on the issue, since we can then focus on an alternative to changing the default behavior.</p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3585",
            "title": "Make `cargo install` respect lockfiles by default",
            "date_modified": "2024-03-17T19:36:50.000Z",
            "date_published": "2024-03-10T23:24:47.000Z",
            "author": {
                "name": "casey",
                "url": "https://github.com/casey"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/134893?u=940724c499b98313ee519a69a725d26908685e6d&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">The existing RFC does not give sufficient attention to parametrized types and traits.</p>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/dhardy/rfcs/blob/revise-nonlocal-defns/text/3373-avoid-nonlocal-definitions-in-fns.md\">Rendered</a></li>\n<li><a href=\"https://github.com/rust-lang/rfcs/pull/3373#issuecomment-1975065275\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3373/hovercard\">Original RFC</a></li>\n<li><a href=\"https://github.com/rust-lang/rust/issues/120363\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/120363/hovercard\">Tracking issue</a></li>\n</ul>",
            "url": "https://github.com/rust-lang/rfcs/pull/3581",
            "title": "Update non-local-defns regarding parameterized traits and types",
            "date_modified": "2024-04-27T08:10:13.000Z",
            "date_published": "2024-03-03T14:58:17.000Z",
            "author": {
                "name": "dhardy",
                "url": "https://github.com/dhardy"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/123987141?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC is the first of a series for a PKI model for Rust; includes the design and implementation for a PKI CA and a resilient Quorum model for the project to implement, and next steps for signing across the project. Crate and release signing will follow in a subsequent separate RFC.</p>\n<p dir=\"auto\"><a href=\"https://github.com/walterhpearce/rfcs/blob/master/text/3579-pki.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3579",
            "title": "Public Key Infrastructure for Rust Project",
            "date_modified": "2024-03-21T22:26:37.000Z",
            "date_published": "2024-02-27T21:03:20.000Z",
            "author": {
                "name": "walterhpearce",
                "url": "https://github.com/walterhpearce"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/160595697?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC improves ergonomics for pointers in unsafe Rust. It adds the RArrow token as a single-dereference member access operator. <code class=\"notranslate\">x-&gt;field</code> desugars to <code class=\"notranslate\">(*x).field</code>, and <code class=\"notranslate\">x-&gt;method()</code> desugars to <code class=\"notranslate\">(*x).method()</code>.</p>\n<p dir=\"auto\">Before:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"(*(*(*pointer.add(5)).some_field).method_returning_pointer()).other_method()\"><pre class=\"notranslate\"><span class=\"pl-kos\">(</span><span class=\"pl-c1\">*</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">*</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">*</span>pointer<span class=\"pl-kos\">.</span><span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">5</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">some_field</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">method_returning_pointer</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">other_method</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\"></span></pre></div>\n<p dir=\"auto\">After:</p>\n<div class=\"highlight highlight-source-rust notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"pointer.add(5)-&gt;some_field-&gt;method_returning_pointer()-&gt;other_method()\"><pre class=\"notranslate\">pointer<span class=\"pl-kos\">.</span><span class=\"pl-en\">add</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">5</span><span class=\"pl-kos\">)</span>-&gt;some_field-&gt;<span class=\"pl-en\">method_returning_pointer</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span>-&gt;<span class=\"pl-en\">other_method</span><span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\"><a href=\"https://github.com/EEliisaa/arrow_deref/blob/master/text/0000-arrow-deref.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3577",
            "title": "RFC: RArrow Dereference for Pointer Ergonomics ",
            "date_modified": "2024-04-10T09:48:45.000Z",
            "date_published": "2024-02-20T23:18:09.000Z",
            "author": {
                "name": "EEliisaa",
                "url": "https://github.com/EEliisaa"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/162737?u=31a4f284889d0261a2b00e45af696e84dafb1488&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Introduce an <code class=\"notranslate\">is</code> operator in Rust 2024, to test if an expression matches a<br>\npattern and bind the variables in the pattern. This is in <em>addition</em> to<br>\n<code class=\"notranslate\">let</code>-chaining; this RFC proposes that we allow both <code class=\"notranslate\">let</code>-chaining <em>and</em> the<br>\n<code class=\"notranslate\">is</code> operator.</p>\n<p dir=\"auto\">Previous discussions around <code class=\"notranslate\">let</code>-chains have treated the <code class=\"notranslate\">is</code> operator as an<br>\nalternative on the basis that they serve similar functions, rather than<br>\nproposing that they can and should coexist. This RFC proposes that we allow<br>\n<code class=\"notranslate\">let</code>-chaining <em>and</em> add the <code class=\"notranslate\">is</code> operator.</p>\n<p dir=\"auto\">The <code class=\"notranslate\">is</code> operator allows developers to chain multiple matching-and-binding<br>\noperations and simplify what would otherwise require complex nested<br>\nconditionals. The <code class=\"notranslate\">is</code> operator allows writing and reading a pattern match from<br>\nleft-to-right, which reads more naturally in many circumstances. For instance,<br>\nconsider an expression like <code class=\"notranslate\">x is Some(y) &amp;&amp; y &gt; 5</code>; that boolean expression<br>\nreads more naturally from left-to-right than <code class=\"notranslate\">let Some(y) = x &amp;&amp; y &gt; 5</code>.</p>\n<p dir=\"auto\">This is even more true at the end of a longer expression chain, such as<br>\n<code class=\"notranslate\">x.method()?.another_method().await? is Some(y)</code>. Rust method chaining and <code class=\"notranslate\">?</code><br>\nand <code class=\"notranslate\">.await</code> all encourage writing code that reads in operation order from left<br>\nto right, and <code class=\"notranslate\">is</code> fits naturally at the end of such a sequence.</p>\n<p dir=\"auto\">Having an <code class=\"notranslate\">is</code> operator would also help to reduce the demand for methods on<br>\ntypes such as <code class=\"notranslate\">Option</code> and <code class=\"notranslate\">Result</code> (e.g. <code class=\"notranslate\">Option::is_some_and</code> and<br>\n<code class=\"notranslate\">Result::is_ok_and</code> and <code class=\"notranslate\">Result::is_err_and</code>), by allowing prospective users of<br>\nthose methods to write a natural-looking condition using <code class=\"notranslate\">is</code> instead.</p>\n<p dir=\"auto\"><a href=\"https://github.com/joshtriplett/rfcs/blob/is/text/3573-is.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3573",
            "title": "`is` operator for pattern-matching and binding",
            "date_modified": "2024-05-01T11:58:08.000Z",
            "date_published": "2024-02-16T11:43:05.000Z",
            "author": {
                "name": "joshtriplett",
                "url": "https://github.com/joshtriplett"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/49301588?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Pre-RFC on <a href=\"https://internals.rust-lang.org/t/pre-rfc-deprecate-then-remove-static-mut/20072\" rel=\"nofollow\">IRLO</a>.</p>\n<p dir=\"auto\"><a href=\"https://www.surveyhero.com/results/1749245/qsry7n7amfk9t2dbanw15vfyo0x06tzj\" rel=\"nofollow\">Results</a> from research survey to inform discussion with respect to perception of the feature. (JS required)</p>\n<p dir=\"auto\"><a href=\"https://github.com/dyslexicsteak/rfcs/blob/master/text/3560-deprecate-static-mut.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3560",
            "title": "Deprecate `static mut`",
            "date_modified": "2024-04-10T19:39:47.000Z",
            "date_published": "2024-01-26T09:59:12.000Z",
            "author": {
                "name": "dyslexicsteak",
                "url": "https://github.com/dyslexicsteak"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1050652?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">cc <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"496718321\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/2771\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rfcs/issues/2771/hovercard\" href=\"https://github.com/rust-lang/rfcs/issues/2771\">#2771</a>, <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1722049304\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/3435\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/rust-lang/rfcs/pull/3435/hovercard\" href=\"https://github.com/rust-lang/rfcs/pull/3435\">#3435</a>, <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1677424706\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rust/issues/110624\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rust/issues/110624/hovercard\" href=\"https://github.com/rust-lang/rust/issues/110624\">rust-lang/rust#110624</a></p>\n<p dir=\"auto\">Not sure if compiler team or lang team owns this.</p>\n<p dir=\"auto\"><a href=\"https://github.com/aidanhs/rfcs/blob/aphs-re-export/text/3556-re-export-symbols.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3556",
            "title": "RFC: Allow symbol re-export in cdylib crate from linked staticlib",
            "date_modified": "2024-03-12T00:36:16.000Z",
            "date_published": "2024-01-06T15:26:58.000Z",
            "author": {
                "name": "aidanhs",
                "url": "https://github.com/aidanhs"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/704597?u=15e04047ef09260a4861c1c9622e1e6fd3898161&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This RFC adds an option to Cargo that emits a Software Bill of Materials (SBOM) alongside compiled artifacts. Similar to how Cargo emits split debug info or \"dep-info\" (.d) files, this change emits an SBOM in a Cargo-specific format alongside outputs in the target directory. External tooling or Cargo subcommands can consume this Cargo SBOM file and transform it into other SBOM formats such as SPDX or CycloneDX.</p>\n<p dir=\"auto\">Originally posted on internals as a <a href=\"https://internals.rust-lang.org/t/pre-rfc-cargo-sbom/19842\" rel=\"nofollow\">pre-RFC</a>, now moved to an RFC.</p>\n<p dir=\"auto\"><a href=\"https://github.com/arlosi/rfcs/blob/sbom/text/3553-cargo-sbom.md\">Rendered</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3553",
            "title": "RFC: cargo-sbom",
            "date_modified": "2024-02-29T22:01:17.000Z",
            "date_published": "2024-01-04T18:57:29.000Z",
            "author": {
                "name": "arlosi",
                "url": "https://github.com/arlosi"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/803701?u=ebadc7c37e0aea6c03a620fcdc9533ddf632e587&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Change the range operators <code class=\"notranslate\">a..b</code>, <code class=\"notranslate\">a..</code>, and <code class=\"notranslate\">a..=b</code> to resolve to new types <code class=\"notranslate\">ops::range::Range</code>, <code class=\"notranslate\">ops::range::RangeFrom</code>, and <code class=\"notranslate\">ops::range::RangeInclusive</code> in Edition 2024. These new types will not implement <code class=\"notranslate\">Iterator</code>, instead implementing <code class=\"notranslate\">Copy</code> and <code class=\"notranslate\">IntoIterator</code>.</p>\n<p dir=\"auto\"><span class=\"issue-keyword tooltipped tooltipped-se\" aria-label=\"This pull request closes issue #2848.\">Closes</span> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"548525650\" data-permission-text=\"Title is private\" data-url=\"https://github.com/rust-lang/rfcs/issues/2848\" data-hovercard-type=\"issue\" data-hovercard-url=\"/rust-lang/rfcs/issues/2848/hovercard\" href=\"https://github.com/rust-lang/rfcs/issues/2848\">#2848</a></p>\n<p dir=\"auto\"><a href=\"https://internals.rust-lang.org/t/pre-rfc-fixing-range-by-2027/19936\" rel=\"nofollow\">Pre-RFC discussion on IRLO</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/pitaj/rfcs/blob/new-range/text/3550-new-range.md\">🖥️ Rendered</a></p>\n<p dir=\"auto\"><a href=\"https://hackmd.io/@uhs6rVdLTSS0gnie4q0fqA/ryjYJW2pa\" rel=\"nofollow\">Analysis of impact on crates in the wild</a></p>",
            "url": "https://github.com/rust-lang/rfcs/pull/3550",
            "title": "RFC: New range types for Edition 2024",
            "date_modified": "2024-05-01T14:45:14.000Z",
            "date_published": "2023-12-28T05:10:59.000Z",
            "author": {
                "name": "pitaj",
                "url": "https://github.com/pitaj"
            }
        }
    ]
}